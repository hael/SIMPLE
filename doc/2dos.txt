CTFFIT
Consider using the natural logarithm of the power spectrum for CTF fitting rater than the square root. Should improve robustness. (Leave option speckind=sqrt|log)

NEW DEVELOPMENTS
* Json as a User Interface Markup Language (Joe made a mockup)
* Need methods for projecting the time of an execution, so that we can display accordingly
* Edge normalisation on extraction (same as EMAN's edgenorm routine). The average of the
boarder pixels must be zero for Fourier transformation.
* statistical normalisation of particle images should be done based on background pixels ONLY
* support for doc input to re-extract with shifts from doc
* pipelined pick/extract
* frac parameter for 2D (& consider outlier detection similar to picker)
* dyncls should state=0 the ones that fall below threshold
* extract should set the header right (smpd)
* scaling should set the header right (smpd)

MAJOR REFACTORINGS
* simple_auto exec
* modularise commanders for Julia integration
* simple_sp_projec controller

BINARY FILE FORMAT
Should we keep track of jobid, out_dir, pid for every executed job?
In this way we could kill processes, allowing cancellation
Shall we keep track of which jobid wrote which entry in the segmented binary file?

StkInfo
ClsInfo
Ptcl2DInfo
Cls3Dinfo
Ptcl3DInfo
FSCInfo
VolInfo (flip indicator)
LastJob (append to structure to get history of workflow???)

JULIA
Should be possible to use ccall to call Fortran subroutines, which means we need to re-code all
commanders so they become subroutines of modules and so that their arguments are native types
(i.e. the cmdline needs to be turned into a job_description string). Then we should have all the
commander functionality at our hands with all the power of Julia.

Julia coding priorities:
Support from reading MRC into matrix
Support for  writing MRC from matrix
Support for read/write *simple binary files
