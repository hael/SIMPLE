# -*- mode: org -*-
#+options: toc:t title:nil

#+name: simple_logo
#+attr_html: :width 600 :alt Single-particle CryoEM Image Processing Linux Engine :align center
[[https://simplecyroem.com][https://github.com/hael/SIMPLE3.0/blob/release2.5/doc/SimpleTutorials2017/SIMPLE_logo/rawlogo.png]]

*Important Notices*

-  version 3 uses cmake for compilation, not the previous perl scripts
-  =master= branch file paths are *not* considered stable -- use =release2.5=
-  cloning this repository is *not* recommended unless you are going to
   be contributing to development


#+name: banner
#+attr_html: :width 300 :align center
 | [[https://opensource.org/licenses/GPL-3.0][https://img.shields.io/:license-gpl-blue.svg]] | [[https://github.com/hael/SIMPLE3.0/archive/release2.5.zip][https://img.shields.io/badge/Package-release2.5.zip-green.svg]] |  [[https://github.com/hael/SIMPLE3.0/][https://img.shields.io/badge/Github-SIMPLE3.0-white.svg]]       |

* Build status
#+name: status
#+attr_html:  :align center :width 500
#+caption: Release2.5 -- Build success table
|                       | GNU /gfortran/ and FFTW                                                                                                                                                          | Intel /ifort/ and MKL                                     | Portland Group /pgfortran/  and PGI compiled FFTW  |
|-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------+----------------------------------------------------|
| Ubuntu (16.04)        | [[https://img.shields.io/badge/build-v5.4-green.svg]]  [[https://img.shields.io/badge/build-v7.1-green.svg]]                                                                                 | [[https://img.shields.io/badge/build-v2017.2.174-green.svg]]  | [[https://img.shields.io/badge/build-2016-yellow.svg]] |
| Centos (MASSIVE3)     | [[https://img.shields.io/badge/build-v5-green.svg]]                                                                                                                                  | [[https://img.shields.io/badge/build-v2016-yellow.svg]]       | |
| ThinkStation          | [[https://img.shields.io/badge/build-v4.9-green.svg]]                                                                                                                                |     | |
| iMac (10.10)          | [[https://img.shields.io/badge/build-MacPorts_gcc4.9-green.svg]]                                                                                                                     |     | |
| MacOSX MacBookPro     | [[https://img.shields.io/badge/build-Brew_gcc4.9-green.svg]]     |                                                           |                                                    |
| MacOSX (10.12)        | [[https://img.shields.io/badge/build-Brew_v4.9-green.svg]]  [[https://img.shields.io/badge/build-Ports_v5.4-green.svg]]  [[https://img.shields.io/badge/build-Fink_v4.9-green.svg]]          |     | |
| Win                   | [[https://img.shields.io/badge/build-TODO-gray.svg]]                                                                                                                                 |     | |


#+name: masterstatus
#+attr_html:  :align center :width 500
#+caption: Master Repository -- Build success table
|                   | GNU /gfortran/ and FFTW                                  | Intel /ifort/ and MKL                                    | Portland Group /pgfortran/  and PGI compiled FFTW  |
|-------------------+----------------------------------------------------------+----------------------------------------------------------+----------------------------------------------------|
| Ubuntu (16.04)    | [[https://img.shields.io/badge/build-v5.4_7.x-green.svg]]    | [[https://img.shields.io/badge/build-v2017.2.174-green.svg]] | [[https://img.shields.io/badge/build-2016-yellow.svg]] |
| Centos (MASSIVE3) | [[https://img.shields.io/badge/build-v5-green.svg]]          | [[https://img.shields.io/badge/build-v2016-yellow.svg]]      | [[https://img.shields.io/badge/build-NA-gray.svg]]     |
| ThinkStation      | [[https://img.shields.io/badge/build-v4.9-green.svg]]        |                                                          |                                                    |
| MacBookPro        | [[https://img.shields.io/badge/build-Brew_gcc4.9-green.svg]] |                                                          |                                                    |




* Installation Options

/Note/: Simple is designed for modern Fortran compilers, preferrably Fortran
2008 compliant. It has been tested on Linux & macOS (OS X) only with GNU gfortran.

*** Release Download

-  SIMPLE source code is available for download as in the [[https://github.com/hael/SIMPLE3.0/releases/latest][latest release]]. Older
   versions are no longer supported but are still available on the [[http://simplecryoem.com][homepage]].

https://github.com/hael/SIMPLE3.0/releases/latest

*** Build from source
-  Building SIMPLE with CMake requires a git client, a fortran compiler
   (2008 standards compliant), perl (>= 6.0) and FFTW3 libraries.
- _Warning: Link time optimisation  may take some time
-  FFTW3 -- CMake tries to find the necessary libraries in the system paths,
   otherwise it uses pkg_config

Clone the repository and create a build directory
#+BEGIN_SRC sh
    git clone https://github.com/hael/SIMPLE3.0.git
    cd SIMPLE3.0
    mkdir build
    cd build
#+end_src

**** GNU/Linux
Generate Unix Makefiles and build with make:

#+BEGIN_SRC sh
    # In SIMPLE3.0/build dir
    cmake ..
    make -j
#+END_SRC

Default installation is in the build directory. Setup the SIMPLE_PATH
environment variable and add the bin folder to PATH.

#+BEGIN_SRC sh
   export SIMPLE_PATH=$(pwd)
   export PATH=${SIMPLE_PATH}/bin:${SIMPLE_PATH}/../scripts:${PATH}
#+END_SRC


If you wish to install SIMPLE to another location, use the following:

#+BEGIN_SRC sh
    cmake -DCMAKE_INSTALL_PREFIX=/opt/simple ../
    make -j install
#+END_SRC

If your FFTW libraries were built locally or not found - you can modify the
single and double precision libraries in the interactive =ccmake= or declare FFTW_DIR
#+BEGIN_SRC sh
    cmake -DFFTW_DIR=/path/to/fftw ../
    make -j
#+END_SRC


**** Intel fortran

Source the =compilervars.sh= file from your Intel compiler source path
#+BEGIN_SRC sh
   source /opt/intel/bin/compilervars.sh intel64
   source /opt/intel/bin/mklvars.sh
   mkdir build-intel
   cd build-intel
   export FC=ifort
   export CPP=fpp
   cmake ..
   make -j
#+END_SRC sh



**** PGI Linux   ( No longer supported )

Shell environment variables FC and LD_LIBRARY_PATH are crucial in the cmake
build to determine the fortran compiler and for finding the FFTW3 libraries.

In a local file or in your home .bashrc file, add the following commands and then source it:
#+BEGIN_SRC sh
,## PGILINUX
unset -v PGIVERSION PGITARGET PGIHOME PGIDIR PGI
unset -v OMPI_VERSION OMPI_DIR PGI_OPTL_INCLUDE_DIRS PGI_OPTL_INCLUDE_DIRS

function set_pgilinux(){

    ## PGI Linux
    export PGIVERSION=2016
    export PGITARGET=linux86-64
    export PGIHOME=/usr/local/pgi
    export PGIDIR="${PGIHOME}/${PGITARGET}/${PGIVERSION}"
    export CUDADIR="${PGIDIR}"/cuda/8.0
    export PGI="${PGIHOME}"
    export CC="${PGIDIR}"/bin/pgcc
    export FC="${PGIDIR}"/bin/pgfortran
    export F90="${PGIDIR}"/bin/pgf90
    export F77="${PGIDIR}"/bin/pgf77
    export CPP="${PGIDIR}/bin/pgcc -E"
    export CXX="${PGIDIR}"/bin/pgc++
    export PATH="${PGIDIR}/bin:${CUDADIR}/bin:${PATH}"
    export MANPATH="${PGIDIR}/man:${MANPATH}"
    export LD_LIBRARY_PATH="${PGIDIR}/lib:${CUDADIR}/lib64:${LD_LIBRARY_PATH}"
    # if Debian/Ubuntu/Mint
    # may need to add /usr/lib/x86_64-linux-gnu
    # to LD_LIBRARY_PATH
    export OMPI_VERSION=1.10.2
    export OMPI_DIR=/usr/local/pgi/linux86-64/2016/mpi/openmpi-1.10.2
    export PGI_OPTL_INCLUDE_DIRS="${OMPI_DIR}"/include
    export PGI_OPTL_LIB_DIRS="${OMPI_DIR}"/lib
    export PATH="${OMPI_DIR}/bin:${PATH}"
    export MANPATH="${OMPI_DIR}/share/man:${MANPATH}"
    export LD_LIBRARY_PATH="${OMPI_DIR}/lib:${LD_LIBRARY_PATH}"
}

function unset_pgilinux(){
    if test "${PGIDIR}" ; then # defined and not empty
        export PATH=$( echo "${PATH}" | sed "s#${PGIDIR}[^:]*:##g" )
              export LD_LIBRARY_PATH=$( echo "${LD_LIBRARY_PATH}" | sed "s#${PGIDIR}[^:]*:##g" )
        export MANPATH=$( echo "${MANPATH}" | sed "s#${PGIDIR}/lib:##" )
        if test "${OMPI_DIR}"; then
            export PATH=$( echo "${PATH}"| sed "s#${OMPI_DIR}/bin:##")
            export LD_LIBRARY_PATH=$( echo ${LD_LIBRARY_PATH}| sed "s#${OMPI_DIR}/lib:##")
        fi
        unset  PGI PGIVERSION PGITARGET PGIHOME PGIDIR PGI
        unset  OMPI_VERSION OMPI_DIR PGI_OPTL_INCLUDE_DIRS PGI_OPTL_INCLUDE_DIRS
        unset  F77 F90 CPP CC CXX FC
    fi
}
#+END_SRC


Create a unique directory in the SIMPLE source directory and build with cmake:
#+BEGIN_SRC sh
    # source file_listed_above
    set_pgilinux
    mkdir build-pgi
    cd build-pgi
    cmake .. -DUSE_CUDA=1
    make -j
#+END_SRC

**** MacOSX/Apple Clang    (Unsupported)                           :noexport:

The GNU compiler is the preferred compiler.
Building with clang will be rejected by CMake.

**** Windows/MinGW                                    :noexport:
- ~Untested~
Generate MinGW Makefiles and build with mingw32-make.exe:
#+BEGIN_SRC sh
 cmake -G "MinGW Makefiles" ..
 mingw32-make.exe
#+END_SRC

**** Windows/MSVC                                     :noexport:
- ~Untested~
Generate Visual Studio 12 Solution and build the ALL_BUILD target:
#+BEGIN_SRC sh
 cmake -G "Visual Studio 12 2013" ..
 cmake --build . --target ALL_BUILD --config Release
#+END_SRC


** Runtime

Environment variables that will affect SIMPLE at runtime:
 - OMP_NUM_THREADS
 - OMP_STACKSIZE

For PGI related environment variable in Installation settings above, see PGI reference http://www.pgroup.com/resources/docs/17.7/x86/pgi-user-guide/index.htm#use-pgi-compilers-linux
and http://www.pgroup.com/resources/docs/17.7/x86/pgi-user-guide/index.htm#env-vars-pgi

PGI's version of OpenMP fails with /proc_bind/ in source !omp$ commands.

MP_BIND MPSTKZ NCPUS_MAX NCPUS MP_SPIN MP_WARN
 PGI_STACK_USAGE

Generic environment variables affecting Fortran programs:
 - NO_STOP_MESSAGE: if this var exists, the execution of a plain STOP statement does not produce the message FORTRAN STOP
 - STATIC_RANDOM_SEED: if this var equals YES, calls to random_seed() will return the same value


*** Convert specifier

File formats can be manipulated by the CONVERT specifier. See
https://gcc.gnu.org/onlinedocs/gcc-7.1.0/gfortran/CONVERT-specifier.html#CONVERT-specifier

Compile time arg /-fconvert/ is overridden by /CONVERT=/ in calls to /open/. Both compile arg and in source are overridden by
GFORTRAN_CONVERT_UNIT on the commandline.

See, set endianness for unformatted I/O https://gcc.gnu.org/onlinedocs/gcc-5.4.0/gfortran/GFORTRAN_005fCONVERT_005fUNIT.html

*** Stack size

 PGI_STACK_USAGE
Large static stack support in Linux 64-bit systems:

/-mcmodel=medium/ see http://www.pgroup.com/resources/docs/17.7/x86/pgi-user-guide/index.htm#prog-64bits-static-data-linux

Dynamic heap support
-Mlarge_arrays  http://www.pgroup.com/resources/docs/17.7/x86/pgi-user-guide/index.htm#prog-64bits-static-data-linux

*** Running Parallel Programs on Linux

You may encounter difficulties running auto-parallel or OpenMP programs on Linux
systems when the per-thread stack size is set to the default (2MB). If you have
unexplained failures, please try setting the environment variable OMP_STACKSIZE
to a larger value, such as 8MB. For information on setting environment
variables, refer to Setting Environment Variables.

If your program is still failing, you may be encountering the hard 8 MB limit on
main process stack sizes in Linux. You can work around the problem by issuing
the following command:

In csh:
```sh
	% limit stacksize unlimited
```
In bash, sh, zsh, or ksh, use:
```sh
	$ ulimit -s unlimited
```
** Testing

*** Unit testing with CTest                                        :noexport:

Add unit tests with CTest using =add_test()=.

#+BEGIN_SRC sh
    # Testing
    make test
    ctest --output-on-failure
#+END_SRC

**** Test the features

Each of the following features have a test executable in the bin
directory with a prefix =simple_test_=.

#+BEGIN_EXAMPLE
    binomial_para    parse
    cartcorr_sanity  ptcl_conv
    defocus_groups   scatsrch
    elem_bess        shelliter
    ft_expanded      speed
    imgfile          srch
    install          timer
    new_ori          units
    omp_timer        volpft_srch
    order_corr
#+END_EXAMPLE

To run a typical test with 8 cores, use:

#+BEGIN_SRC sh
    cd bin
    ./simple_test_install nthr=4
#+END_SRC

* Usage

See [[http://simplecryoem.com/manuals.html][User documentation]] on the homepage

* Contributing

Create documentation with =make doc= (see below) or see the [[file:doc/SimpleManual/simple3.0devel.tex][Developer Manual]]

All developer options can be used in CMake when using the VERBOSE arg.

: ccmake -DVERBOSE=1

The dev options include:
 - ENABLE_DOXYGEN
 - CPACK_GENERATOR   {TGZ, RPM, DEB, ZIP}
 - CTest
 - CodeCoverage
 - ENABLE_PROFILING

Optimisation flags include:
 - ENABLE_LINK_TIME_OPTIMISATION
 - ENABLE_FAST_MATH_OPTIMISATION
 - ENABLE_PROFILE_OPTIMISATION

Further development and optimisation should go in cmake/SimpleFortranOptions.cmake.
Critical production should go in cmake/FortranOverride.cmake (all forced options are set here and should not change for users.)

*** Building Doxygen API documentation

: cmake -DVERBOSE=1 -DENABLE_DOXYGEN=ON
: make doc

*** Building Tarball package

: ccmake -DVERBOSE=1 -DCPACK_GENERATOR=TGZ
: make package


** Changelog

See doc/ReleaseNotes

** Licence

SIMPLE is free software: you can redistribute it and/or modify it under the
terms of the [[http://www.gnu.org/copyleft/gpl.html][GNU General Public License]] as published by the Free Software
Foundation, either version 3 of the license, or (at your option) any later
version. SIMPLE is distributed with the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the [[http://www.gnu.org/licenses/gpl-3.0.html][GPL v3 licence]] for more details.

SIMPLE depends on FFTW which is licenced under GPL ([[https://www.fftw.org][FFTW website]]).

CTFFIND4 Copyright 2014 Howard Hughes Medical Institute
 -  Use is subject to Janelia Farm Research Campus Software Copyright 1.1
   license terms ( http://license.janelia.org/license/jfrc_copyright_1_1.html )

* Post Release 2.5 Changes
** Syslib

- simple_error_check -- gather relevant info, print stuff and will not stop
- simple_stop   -- gather relevant info, print stuff and stop
- allocchk      -- check allocate errors
- simple_end
- get_sys_error
- all syscalls functions

** Universal File I/O

- fopen  -- do not use "UNIT=",  return logical false on fail, user can then call fileio_errmsg to terminate
- fclose -- wrapper for file close
- fileiochk -- wrapper for simple_error_check, will stop if necessary, if
               you want to prevent termination use die=.false

Former method:
:-        fnr = get_fileunit()
:-        open(unit=fnr, FILE='CAVGASSEMBLE_FINISHED', STATUS='REPLACE', action='WRITE', iostat=file_stat)
:-        call fopen_err('In: commander_rec :: eo_volassemble', file_stat )
:-        close( unit=fnr )
New file open/close
:+        if(.not.fopen(fnr, 'CAVGASSEMBLE_FINISHED', STATUS='REPLACE', action='WRITE', iostat=file_stat))&
:+        call fileio_errmsg('In: commander_rec :: eo_volassemble', file_stat )
:+         if(.not.fclose( fnr , iostat=file_stat))&
:+        call fileio_errmsg('In: commander_rec :: eo_volassemble fclose', file_stat )


| Old         |   | New Function  | args              | optional               |
|-------------+---+---------------+-------------------+------------------------|
| open()      |   | l = fopen()   | funit,file,iostat | access,status,recl,... |
|             |   |               |                   |                        |
| close()     |   | l = fclose()  | unit,iostat       | dispose                |
| fopen_err() |   | fileio_errmsg | msg,iostat        | die (default true)     |
|             |   |               |                   |                        |

** Image files

- imgfile contains find_ldim_nptcls and imgfile type
- imghead/imgfile/procimg etc all rely on fileio

** Allocation

- all allocate() and deallocate() calls should have a =stat= argument, then call alloc_errchk immediately afterwards
- alloc_err replaced with alloc_errchk with additional features.

Syslib's simple_error_check and get_sys_error gather relevant info, print stuff and stop if necessary

REPLACE
:- allocate(self%p(spec%ndim+1,spec%ndim), self%y(spec%ndim+1), self%pb(spec%ndim))
WITH
:+ allocate(self%p(spec%ndim+1,spec%ndim), self%y(spec%ndim+1), self%pb(spec%ndim), stat=alloc_stat)
:+ call alloc_errchk("In: new_simplex_opt", alloc_stat)


* Memory check and profiling

** Valgrind
Valgrind memcheck
1. Compile with -g option (DEBUG or RELWITHDEBUGINFO)
2. Run: valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all -v   program

Valgrind Massif :  [[https://valgrind.org/docs/manual/ms-manual.html][Massif manual]]
1. Compile with -g option (DEBUG or RELWITHDEBUGINFO)
2. Run: valgrind --tool=massif  --pages-as-heap=yes    program
3. View Massif info: ms_print massif.out.<pid>

Valgrind DHAT dynamic heap analysis tool [[https://valgrind.org/docs/manual/dh-manual.html][DHAT manual]]
1. Compile with -g option (DEBUG or RELWITHDEBUGINFO)
2. Run: valgrind --tool=exp-dhat   program


Valgrind SGCheck stack and global array overrun detector
1. Compile with -g option (DEBUG or RELWITHDEBUGINFO)
2. Run: valgrind--tool=exp-sgcheck program

** TAU https://www.cs.uoregon.edu/research/tau/home.php
*Installation*
./configure -c++=mpicxx -cc=mpicc -fortran=mpif90 -mpi -ompt=download -bfd=download -unwind=download
make -j4 install

*Runtime Environment*
export TAU_MAKEFILE=<path to TAU>/x86_64/lib/Makefile.tau-mpi-openmp
export TAU_OPTIONS='-optVerbose -optDetectMemoryLeaks -optCompInst'
export TAU_PROFILE=1

*Debugging*
<In SIMPLE3.0/build>
FC=tau_f90.sh CC=tau_cc.sh CXX=tau_cxx.sh cmake ..
make -j install
tau_exec -T OpenMP -memory -ompt -io -ebs ./bin/simple_test_qsort
pprof
paraprof

** OpenSpeedShop  https://openspeedshop.org/
*Installation*
Read the installation PDF from the website
*Runtime Environment*
TOOL_VERS="_v2.3.1.release"
export OPENSS_PREFIX=~/OpenSpeedShop/openspeedshop-release-2.3
export KROOT_IDIR=${OPENSS_PREFIX}/krellroot${TOOL_VERS}
export CBTF_IDIR=${OPENSS_PREFIX}/cbtf${TOOL_VERS}
export OSSCBTF_IDIR=${OPENSS_PREFIX}/osscbtf${TOOL_VERS}
export OSSOFF_IDIR=${OPENSS_PREFIX}/ossoff${TOOL_VERS}
export OPENSS_DOC_DIR=$OPENSS_PREFIX/share/doc/packages/OpenSpeedShop
export OPENSS_INSTRUMENTOR=offline
export XPLAT_RSH=ssh
export OPENSS_MPI_IMPLEMENTATION=openmpi
export CBTF_MPI_IMPLEMENTATION=openmpi
export OPENSS_RAWDATA_DIR=$OPENSS_PREFIX/Offline
export OPENSS_DB_DIR=$OPENSS_PREFIX/DB

export MRNET_COMM_PATH=${CBTF_IDIR}/sbin/cbtf_mrnet_commnode
export CBTF_MRNET_BACKEND_PATH=${CBTF_IDIR}/sbin/cbtf_libcbtf_mrnet_backend
# OPENSS_PREFIX_target/bin must come first to
# find the osslink in the target directory

export PATH=$OPENSS_PREFIX/bin:${KROOT_IDIR}/bin:${CBTF_IDIR}/bin:${OSSCBTF_IDIR}/bin:${OSSOFF_IDIR}/bin:${CBTF_IDIR}/sbin:${PATH}
export MANPATH=$OPENSS_PREFIX/share/man:${MANPATH}
export OPENSS_PLUGIN_PATH=$OSSCBTF_IDIR/lib64/openspeedshop
export DYNINSTAPI_RT_LIB=$OPENSS_PREFIX/lib64/libdyninstAPI_RT.so.1
export LD_LIBRARY_PATH=$OPENSS_PREFIX/lib64:${KROOT_IDIR}/lib:${OSSCBTF_IDIR}/lib64:${CBTF_IDIR}/lib64:${OSSOFF_IDIR}/lib64:${GRAPHVIZ_IDIR}/lib:${LD_LIBRARY_PATH}

*Debugging*
Basic analysis
$ osspcsamp  "simple_test_qsort"
$ ossusertime "simple_test_qsort"
$ oss[hwc,hwctime,hwcsamp] "simple_test_qsort"

Memory Leak detection
$ ossmem "simple_test_memleaks"

Parallel profiling, tracing etc.
$ oss[mpi,mpit,mpip] "simple_test_mpi"
$ osscuda "simple_test_cuda"
$ osspthread "simple_test_omp"
$ ossomptp "simple_test_omp"
