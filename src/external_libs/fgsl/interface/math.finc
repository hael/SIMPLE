!-*-f90-*-
!
!  Interfaces: Mathematical Functions
!
     function gsl_isnan(x) bind(c)
       import
       real(c_double), value :: x
       integer(c_int) :: gsl_isnan
     end function gsl_isnan
     function gsl_isinf(x) bind(c)
       import
       real(c_double), value :: x
       integer(c_int) :: gsl_isinf
     end function gsl_isinf
     function gsl_finite(x) bind(c)
       import
       real(c_double), value :: x
       integer(c_int) :: gsl_finite
     end function gsl_finite
     function gsl_log1p(x) bind(c)
       import
       real(c_double), value :: x
       real(c_double) :: gsl_log1p
     end function gsl_log1p
     function gsl_expm1(x) bind(c)
       import
       real(c_double), value :: x
       real(c_double) :: gsl_expm1
     end function gsl_expm1
     function gsl_hypot(x) bind(c)
       import
       real(c_double), value :: x
       real(c_double) :: gsl_hypot
     end function gsl_hypot
     function gsl_acosh(x) bind(c)
       import
       real(c_double), value :: x
       real(c_double) :: gsl_acosh
     end function gsl_acosh
     function gsl_asinh(x) bind(c)
       import
       real(c_double), value :: x
       real(c_double) :: gsl_asinh
     end function gsl_asinh
     function gsl_atanh(x) bind(c)
       import
       real(c_double), value :: x
       real(c_double) :: gsl_atanh
     end function gsl_atanh
     function gsl_ldexp(x,e) bind(c)
       import
       real(c_double), value :: x
       integer(c_int), value :: e
       real(c_double) :: gsl_ldexp
     end function gsl_ldexp
     function gsl_frexp(x,e) bind(c)
       import
       real(c_double), value :: x
       integer(c_int), intent(out) :: e
       real(c_double) :: gsl_frexp
     end function gsl_frexp
     function gsl_fcmp(x,y,eps) bind(c)
       import
       real(c_double), value :: x, y, eps
       integer(c_int) :: gsl_fcmp
     end function gsl_fcmp
! constructors for abstract types
     function fgsl_function_cinit(func, params) bind(c)
       import
       type(c_funptr), value :: func
       type(c_ptr), value :: params
       type(c_ptr) :: fgsl_function_cinit
     end function fgsl_function_cinit
     function fgsl_function_fdf_cinit(f, df, fdf, params) bind(c)
       import
       type(c_funptr), value :: f, df, fdf
       type(c_ptr), value :: params
       type(c_ptr) :: fgsl_function_fdf_cinit
     end function fgsl_function_fdf_cinit
     subroutine fgsl_function_cfree(sfunc) bind(c)
       import
       type(c_ptr), value :: sfunc
     end subroutine fgsl_function_cfree
     subroutine fgsl_function_fdf_cfree(sfunc) bind(c)
       import
       type(c_ptr), value :: sfunc
     end subroutine fgsl_function_fdf_cfree
! auxiliary routines
     function fgsl_fn_eval_aux(f, x) bind(c)
       import
       type(c_ptr), value :: f
       real(c_double), value :: x
       real(c_double) :: fgsl_fn_eval_aux
     end function fgsl_fn_eval_aux
     function fgsl_fn_fdf_eval_f_aux(f, x) bind(c)
       import
       type(c_ptr), value :: f
       real(c_double), value :: x
       real(c_double) :: fgsl_fn_fdf_eval_f_aux
     end function fgsl_fn_fdf_eval_f_aux
     function fgsl_fn_fdf_eval_df_aux(f, x) bind(c)
       import
       type(c_ptr), value :: f
       real(c_double), value :: x
       real(c_double) :: fgsl_fn_fdf_eval_df_aux
     end function fgsl_fn_fdf_eval_df_aux
     subroutine fgsl_fn_fdf_eval_f_df_aux(f, x, y, dy) bind(c)
       import
       type(c_ptr), value :: f
       real(c_double), value :: x
       real(c_double), intent(out) :: y, dy
     end subroutine fgsl_fn_fdf_eval_f_df_aux
