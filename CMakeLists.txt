cmake_minimum_required(VERSION 3.12 FATAL_ERROR)

project(SIMPLE
        VERSION 3.0.0
        DESCRIPTION "SIMPLE is a program package for cryo-EM image processing (https://github.com/hael/SIMPLE)"
        HOMEPAGE_URL "https://github.com/hael/SIMPLE"
        LANGUAGES Fortran C CXX)

set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake" "${CMAKE_SOURCE_DIR}/cmake/Modules/")
include(FortranOverride)

## CMAKE CONFIGURATION TYPES & BUILDS
#set(CMAKE_CONFIGURATION_TYPES DEBUG RELEASE RELWITHDEBINFO)

# Options by default
option(BUILD_SHARED_LIBS           "Build the simple library as shared or static (default)." OFF)
option(${PROJECT_NAME}_BUILD_TESTS "Build the test examples." ON)
option(USE_OPENMP                  "Use OpenMP for parallelization - debugging may disable OpemMP." ON )
option(USE_LIBTIFF                 "Use libtiff." ON)
option(GUI                         "Install the GUI." ON)
option(BUILD_DOCS                  "Enable the generation of PDF manuals and doxygen API documentation." ON)
option(ENABLE_DOXYGEN              "Enable a 'make docs' target for Doxygen documentation." ON)
option(BUILD_GUI                   "Build single user GUI from source." OFF)
option(NICE                        "Install NICE." OFF)
option(USE_SYSTEM_JPEG_SQLite      "Compile libjpeg9 and sqlite3 from source (default) or use system libraries." OFF)
option(BUILD_DOCS                  "Enable the generation of PDF manuals and doxygen API documentation." ON)
option(NICE_FQDN                   "Set NICE server fqdn else fqdn of compiling node is used." OFF)
option(COVERALLS                   "Generate coveralls data." OFF) #coveralls.io
OPTION(USE_CODE_COVERAGE           "Added code coverage flags." OFF)
OPTION(USE_PROFILING               "Enable symbol generation without debug support." OFF)
option(USE_LINK_TIME_OPTIMISATION  "Enable link-time optimization." OFF)
option(COVERALLS                   "Generate coveralls data." OFF) #coveralls.io
option(USE_CODE_COVERAGE           "Added code coverage flags." OFF)
option(USE_MPI                     "Use OpenMPI for parallelization - in developement." OFF )
option(USE_FAST_MATH_OPTIMISATION  "Optimize code for fastmath." OFF)
option(USE_PROFILE_OPTIMISATION    "Optimize code for PFO. (GNU: -fpfo )." OFF)
option(USE_AUTO_PARALLELISE        "Optimize code for parallel systems. [Intel and PGI only]." OFF)
option(USE_AGGRESSIVE_OPTIMISATION "Flags for aggressive optimization level. Unroll all loops and inline functions."  OFF)
option(CPACK_GENERATOR             "Enable build of distribution packages using CPack." TGZ)
option(CPACK_GENERATOR             "Enable build of distribution packages using CPack." OFF)
option(USE_GNU_EXTENSIONS          "Enable GNU extensions in C " OFF)
option(GFORTRAN_EXTRA_CHECKING     "Use extra checks in commandline " OFF)
option(USE_OPENACC_ONLY            "Enable OpenACC without OpenMP (OpenMP on by default)" OFF)
option(UPDATE_GIT_VERSION_INFO     "Update git version info in source tree" ON)
# PGI
option(PGI_EXTRACT_ALL             "PGI --Extract subprograms for inlining (-Mextract)" OFF)
option(PGI_LARGE_FILE_SUPPORT      "PGI -- Link with library directory for large file support (-Mlfs)" OFF)
option(PGI_CUDA_MANAGED_MEMORY     "Use CUDA Managed Memory" OFF)
option(PGI_CUDA_IOMUTEX            "Use mutex for IO calls (-Miomutex)" ON)
option(PGI_CHECKING                "Use extra checks in commandline " OFF)
option(PGI_EXTRA_FAST              "Use extra compile options to speed up code e.g. -Munroll -Mvect" OFF)
# Intel
option(INTEL_OMP_OVERRIDE          "Allow Intel compiler to override limits when compiling OpenMP" OFF)
# LaTeX
option(LATEX_USE_SYNCTEX           "If on, have LaTeX generate a synctex file, which WYSIWYG editors can use to correlate output files like dvi and pdf with the lines of LaTeX source that generates them.  In addition to adding the LATEX_SYNCTEX_FLAGS to the command line, this option also adds build commands that \"corrects\" the resulting synctex file to point to the original LaTeX files rather than those generated by UseLATEX.cmake." OFF)
option(LATEX_SMALL_IMAGES          "If on, the raster images will be converted to 1/6 the original size.  This is because papers usually require 600 dpi images whereas most monitors only require at most 96 dpi.  Thus, smaller images make smaller files for web distribution and can make it faster to read dvi files." OFF)

# Extra libraries if needed it
set(EXTRA_LIBS "")

# Number of Physical Cores available
cmake_host_system_information(RESULT NUM_JOBS QUERY NUMBER_OF_PHYSICAL_CORES) 

set(BUILD_NAME "${CMAKE_Fortran_COMPILER_ID}_${CMAKE_BUILD_TYPE}" CACHE STRING "Build name with compiler, type and FFT backend. ")
set(CMAKE_Fortran_MODULE_DIRECTORY ${PROJECT_BINARY_DIR}/lib)

# Define the main targets
# Have the .mod files placed in the lib folder
include_directories(${CMAKE_Fortran_MODULE_DIRECTORY})
set(EXECUTABLE_OUTPUT_DIRECTORY "${CMAKE_INSTALL_BINDIR}")
set(LIBRARY_OUTPUT_DIRECTORY "${CMAKE_INSTALL_LIBDIR}")
set(SCRIPTS_OUTPUT_DIRECTORY "${CMAKE_INSTALL_PREFIX}/scripts")

# Define the executable names
set(SIMPLE_EXE simple_exec)
set(SINGLE_EXE single_exec)
set(STREAM_EXE simple_stream)
set(SIMPLE_PRIVATE_EXE simple_private_exec)
# Define the library name lib<name>.so
#set(SIMPLELIB "SIMPLE${${PROJECT_NAME}_VERSION}")
set(SIMPLELIB "${${PROJECT_NAME}_VERSION}")

# Define some directories
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src/inc)
include_directories(${CMAKE_BINARY_DIR}/lib/simple)
include_directories(${CMAKE_CURRENT_BINARY_DIR})

# INCLUDES
#include(CheckIncludeFiles)
include(SimpleFortranOptions)

# Configurations RELEASE, DEBUG 
############################################################
# Add definition macros unique to compilation
############################################################
add_definitions("-DBUILD_NAME=\"${BUILD_NAME}\"")
add_definitions(" -D__FILENAME__='\"$(notdir $<)\"' ")
# use _DEBUG since DEBUG or debug is used as a variable in some files
# _DEBUG is defined by Intel Fortran on Windows
if(CMAKE_BUILD_TYPE STREQUAL "DEBUG")
    add_definitions("-D_DEBUG")
endif()

#   cmake_add_fortran_subdirectory(
#    ${SRC}                  # name of subdirectory
#    PROJECT libSIMPLE       # project name in subdir top CMakeLists.txt
#    ARCHIVE_DIR ${LIB}      # dir where project places .lib files
#    RUNTIME_DIR ${LIB}      # dir where project places .dll files
#    LIBRARIES <lib>         # names of library targets to import
#    LINK_LIBRARIES          # link interface libraries for LIBRARIES
#     [LINK_LIBS ${FFTW_LIBRARIES} <dep>...]...
#    CMAKE_COMMAND_LINE ...  # extra command line flags to pass to cmake
#    NO_EXTERNAL_INSTALL     # skip installation of external project
#    )

# CREATE libSIMPLE<VERSION>
add_subdirectory(src lib)
list(APPEND EXTRA_LIBS
    ${SIMPLELIB}
    ${CMAKE_THREAD_LIBS_INIT}
    ${EXTRA_LIBS}
)
link_directories(lib)
message(STATUS "EXTRA_LIBS ${EXTRA_LIBS}")

# ADD SCRIPTS
# The script folder contains some handy perl scripts for running SIMPLE
add_subdirectory(scripts)

# INSTALL NICE
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/nice)
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/nice)
endif()

# INSTALL GUI
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/gui)
    add_subdirectory(gui ${CMAKE_INSTALL_BINDIR}/gui)
endif()

# STATIC LIBRARIES
# Try to search first static libraries
if(NOT ${BUILD_SHARED_LIBS})
    set(CMAKE_FIND_LIBRARY_SUFFIXES "${CMAKE_FIND_LIBRARY_SUFFIXES} .a")
endif()

# Add a distclean target to the Makefile
add_custom_target(distclean
    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_SOURCE_DIR}/cmake/distclean.cmake
)

# here we save a version file
set(VERSION_FILE "${CMAKE_INSTALL_LIBDIR}/simple/CMake/${PROJECT_NAME}ConfigVersion.cmake")
configure_file( "${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/ProjectConfigVersion.cmake.in" ${VERSION_FILE} @ONLY )

# modules / depends
file(GLOB_RECURSE SIMPLE_CMAKE_FILES
    LIST_DIRECTORIES false
    RELATIVE ${CMAKE_SOURCE_DIR} "*.cmake" 
)
list(REMOVE_DUPLICATES SIMPLE_CMAKE_FILES)

# SIMPLE installation
install(
    FILES ${SIMPLE_CMAKE_FILES}
    DESTINATION "${CMAKE_INSTALL_LIBDIR}/simple/CMake"
    CONFIGURATIONS DEBUG
    COMPONENT dev
)

message( STATUS "Set runtime variables. ")
if(NOT BUILD_SHARED_LIBS)
    configure_file( "${CMAKE_CURRENT_SOURCE_DIR}/scripts/add2.bashrc.template"  ${CMAKE_CURRENT_BINARY_DIR}/add2.bashrc @ONLY )
    configure_file( "${CMAKE_CURRENT_SOURCE_DIR}/scripts/add2.tcshrc.template"  ${CMAKE_CURRENT_BINARY_DIR}/add2.tcshrc @ONLY )
else()
    configure_file( "${CMAKE_CURRENT_SOURCE_DIR}/scripts/add2.bashrc.sharedtemplate"  ${CMAKE_CURRENT_BINARY_DIR}/add2.bashrc @ONLY )
    configure_file( "${CMAKE_CURRENT_SOURCE_DIR}/scripts/add2.tcshrc.sharedtemplate"  ${CMAKE_CURRENT_BINARY_DIR}/add2.tcshrc @ONLY )
endif()
install(FILES  ${CMAKE_CURRENT_BINARY_DIR}/add2.bashrc ${CMAKE_CURRENT_BINARY_DIR}/add2.tcshrc
    DESTINATION ${CMAKE_INSTALL_PREFIX}
    CONFIGURATIONS DEBUG|RELEASE
    PERMISSIONS   OWNER_READ OWNER_WRITE GROUP_READ GROUP_WRITE WORLD_READ WORLD_WRITE
)

if(${BUILD_DOCS})

    # User manual and tutorial
    add_subdirectory(doc)

    # Doxygen
    #option(ENABLE_DOXYGEN "Enable a 'make docs' target for Doxygen documentation." ON)
    if(ENABLE_DOXYGEN)
        add_custom_target(doc
            ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
            COMMENT "Generating API documentation with Doxygen." VERBATIM
        )
        include(UseDoxygen OPTIONAL)
        # add_doxygen(
        #     docs
        #     INPUT
        #         "${CMAKE_SOURCE_DIR}/src"
        #     STRIP_FROM_PATH
        #         "${CMAKE_SOURCE_DIR}/src/inc"
        #     STRIP_FROM_INC_PATH
        #         "${CMAKE_SOURCE_DIR}/src/inc"
        #     EXCLUDE_PATTERNS
        #         */gnufor2/*
        #     EXCLUDE_SYMBOLS
        #         *debug*
        #         *verbose*
        #     ALL
        # )
    endif()
endif()

if(VERBOSE) #only for the fool-hardy
    #option(USE_FAST_MATH_OPTIMISATION  "Optimize code for fastmath." OFF)
    #option(USE_PROFILE_OPTIMISATION    "Optimize code for PFO. (GNU: -fpfo )." OFF)
    #option(USE_AUTO_PARALLELISE        "Optimize code for parallel systems. [Intel and PGI only]." OFF)
    #option(USE_AGGRESSIVE_OPTIMISATION "Flags for aggressive optimization level. Unroll all loops and inline functions."  OFF)
    #option(CPACK_GENERATOR             "Enable build of distribution packages using CPack." TGZ)
    # CPack
    #option(CPACK_GENERATOR "Enable build of distribution packages using CPack." OFF)
    include(SimplePackage)
    # Debugging CMAKE
    include(CMakeGraphVizOptions)
endif()

# ADD PRODUCTION EXECUTABLES
# The source for the SIMPLE binary and have it placed in the bin folder
add_subdirectory(production bin)

#only for debugging
if(VERBOSE)
    include(GenericLogging)
endif()

# Add message at end of installation
add_subdirectory(${CMAKE_SOURCE_DIR}/cmake/PostInstall)

