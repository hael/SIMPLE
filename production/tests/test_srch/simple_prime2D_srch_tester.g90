module simple_prime2D_srch_tester
use simple_hadamard2D_matcher ! singleton
use simple_defs               ! singleton
use simple_jiffys             ! singleton
use simple_prime2D_srch,      only: prime2D_srch
use simple_stat,              only: pearsn
use simple_math,              only: euclid, calc_fourier_index
use simple_cmdline,           only: cmdline
use simple_params,            only: params
use simple_build,             only: build
use simple_image,             only: image
use simple_oris,              only: oris
implicit none

public :: exec_prime2D_srch_test
private
#include "simple_local_flags.inc"
! module global constants
integer,           parameter :: NPROJS      = 10
character(len=32), parameter :: refsname    = 'prime2D_srch_test_refs.mrc'
character(len=32), parameter :: ptclsname   = 'prime2D_srch_test_ptcls.mrc'
character(len=32), parameter :: orisname    = 'prime2D_srch_test_oris.txt'
character(len=32), parameter :: outfilename = 'prime2D_srch_test_algndoc.txt'
real,              parameter :: LPLIM       = 10.

! module global variables
type(build)              :: b
type(params)             :: p
type(oris)               :: o_refs, o_ptcls
type(image), allocatable :: imgs_refs(:), imgs_ptcls(:)
type(cmdline)            :: cline_here


contains

    subroutine exec_prime2D_srch_test( cline, be_verbose )
        class(cmdline),    intent(inout) :: cline
        logical, optional, intent(in)    :: be_verbose
        call setup_testenv( cline, be_verbose )
        write(*,*) '****prime2D_srch_test, init'
        call test_greedy_srch
        call shutdown_testenv
        write(*,*) '****prime2D_srch_test, completed'
    end subroutine exec_prime2D_srch_test

    subroutine setup_testenv( cline, be_verbose )
        use simple_projector_hlev, only: project
        class(cmdline),    intent(inout) :: cline
        logical, optional, intent(in)    :: be_verbose
        integer :: iproj
        verbose = .false.
        if( present(be_verbose) ) verbose = be_verbose
        ! it is assumed that vol1, smpd, msk are part of the inputted command line
        ! setting the remainder of the command line up in here
        cline_here = cline
        call cline_here%set('ncls',    real(NPROJS))
        call cline_here%set('nptcls',  real(NPROJS))
        call cline_here%set('lp',      LPLIM       )
        call cline_here%set('ctf',     'no'        )
        call cline_here%set('outfile', outfilename )
        ! generate orientations
        call o_refs%new(NPROJS)
        call o_refs%spiral
        o_ptcls = o_refs
        call o_ptcls%rnd_inpls
        ! create parameters and build
        p = params(cline_here)                   ! parameters generated
        call b%build_general_tbox(p, cline_here) ! general objects built
        ! set resolution range
        p%kfromto(1) = 2
        p%kfromto(2) = calc_fourier_index(p%lp, p%boxmatch, p%smpd)
        ! generate images
        call b%vol%read(p%vols(1))
        call b%vol%fwd_ft
        call b%vol%expand_cmat
        imgs_refs  = project(b%vol, o_refs,  p)
        imgs_ptcls = project(b%vol, o_ptcls, p)
        do iproj=1,NPROJS
            call imgs_refs(iproj)%write(refsname, iproj)
            call imgs_ptcls(iproj)%write(ptclsname, iproj)
        end do
        call cline_here%set('stk',  ptclsname)
        call cline_here%set('refs', refsname)
        ! re-create parameters and build
        p = params(cline_here)                   ! parameters generated
        call b%build_general_tbox(p, cline_here) ! general objects built
        call b%build_hadamard_prime2D_tbox(p)    ! 2D Hadamard matcher built
        ! prepare pftcc object
        call prime2D_read_sums( b, p )
        call preppftcc4align( b, p )
        ! The pftcc & primesrch2D objects are now globally available in the module
        ! because of the use simple_hadamard2D_matcher statement in the top
    end subroutine setup_testenv

    subroutine test_greedy_srch
        use simple_ori, only: ori
        integer            :: iptcl
        logical            :: assignments_correct(NPROJS)
        type(prime2D_srch) :: primesrch2D
        call primesrch2D%new(p, pftcc)
        VerbosePrint 'testing primesrch2D :: greedy_srch in CPU mode'
        do iptcl=1,NPROJS
            call primesrch2D%prep4srch(pftcc, iptcl, b%a)
            call primesrch2D%greedy_srch(pftcc, iptcl, b%a)
            assignments_correct(iptcl) = nint(b%a%get(iptcl,'class')) == iptcl
        end do
        if( all(assignments_correct) )then
            ! the test passed
        else
            print *, 'only ', count(assignments_correct), ' assignments correct'
            stop '****prime2D_srch_tester TEST FAILURE primesrch2D :: test_greedy_srch, CPU mode'
        endif
        call primesrch2D%kill
    end subroutine test_greedy_srch

    subroutine shutdown_testenv
        integer :: iproj
        call b%kill_general_tbox
        call b%kill_hadamard_prime2D_tbox
        call pftcc%kill
        do iproj=1,NPROJS
            call imgs_refs(iproj)%kill
            call imgs_ptcls(iproj)%kill
        end do
        deallocate(imgs_refs, imgs_ptcls)
    end subroutine shutdown_testenv

end module simple_prime2D_srch_tester
