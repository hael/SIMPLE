!-*-f90-*-
!
! Interfaces: Ntuples
! 
  function gsl_ntuple_create(fname, data, size) bind(c)
    import
    character(kind=c_char), dimension(*) :: fname
    type(c_ptr), value :: data
    integer(c_size_t), value :: size
    type(c_ptr) :: gsl_ntuple_create
  end function gsl_ntuple_create
  function gsl_ntuple_open(fname, data, size) bind(c)
    import
    character(kind=c_char), dimension(*) :: fname
    type(c_ptr), value :: data
    integer(c_size_t), value :: size
    type(c_ptr) :: gsl_ntuple_open
  end function gsl_ntuple_open
  function gsl_ntuple_write(ntuple) bind(c)
    import
    type(c_ptr), value :: ntuple
    integer(c_int) :: gsl_ntuple_write
  end function gsl_ntuple_write
  function gsl_ntuple_read(ntuple) bind(c)
    import
    type(c_ptr), value :: ntuple
    integer(c_int) :: gsl_ntuple_read
  end function gsl_ntuple_read
  function gsl_ntuple_close(ntuple) bind(c)
    import
    type(c_ptr), value :: ntuple
    integer(c_int) :: gsl_ntuple_close
  end function gsl_ntuple_close
  function fgsl_ntuple_select_fn_cinit(func, params) bind(c)
    import
    type(c_funptr), value :: func
    type(c_ptr), value :: params
    type(c_ptr) :: fgsl_ntuple_select_fn_cinit
  end function fgsl_ntuple_select_fn_cinit
  function fgsl_ntuple_value_fn_cinit(func, params) bind(c)
    import
    type(c_funptr), value :: func
    type(c_ptr), value :: params
    type(c_ptr) :: fgsl_ntuple_value_fn_cinit
  end function fgsl_ntuple_value_fn_cinit
  subroutine fgsl_ntuple_select_fn_cfree(sfunc) bind(c)
    import
    type(c_ptr), value :: sfunc
  end subroutine fgsl_ntuple_select_fn_cfree
  subroutine fgsl_ntuple_value_fn_cfree(sfunc) bind(c)
    import
    type(c_ptr), value :: sfunc
  end subroutine fgsl_ntuple_value_fn_cfree
  function gsl_ntuple_project(h, ntuple, value_func, select_func) bind(c)
    import
    type(c_ptr), value :: h, ntuple, value_func, select_func
    integer(c_int) :: gsl_ntuple_project
  end function gsl_ntuple_project
!
  function fgsl_aux_ntuple_data(ntuple) bind(c)
    import
    type(c_ptr), value :: ntuple
    type(c_ptr) :: fgsl_aux_ntuple_data
  end function fgsl_aux_ntuple_data
  function fgsl_aux_ntuple_size(ntuple) bind(c)
    import
    type(c_ptr), value :: ntuple
    integer(c_size_t) :: fgsl_aux_ntuple_size
  end function fgsl_aux_ntuple_size
