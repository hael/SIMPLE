CTFFIT

TESTING
* test greedy in conjunction with frac update and measure convergence rate vs SHC
* evaluate TAU

NEW DEVELOPMENTS
* Need methods for projecting the time of an execution, so that we can display accordingly
* support for doc input to re-extract with shifts from doc
* pipelined pick/extract???
* frac parameter for 2D (& consider outlier detection similar to picker)
* dyncls should state=0 the ones that fall below threshold
* extract should set the header right (smpd)
* scaling should set the header right (smpd)

NEEDS DOING
* proper PFTs for picker, with whitening etc.

EXCEPTION HANDLING
* need a file-based system because of the different processes

MAJOR REFACTORINGS
* all output should be consistently written to cwd
* simple_auto exec (for all programs executed internally by the commanders)
* split programs (eg PRIME3D) into functional units that corresponds more closely to what users would recognize
* modularise commanders for Julia integration
* simple_sp_projec controller for centralisation of meta-data
* rename programs/commanders to be consistent with GUI
* use JSON as user interface markup language to auto-generate GUI & command-line front-end
* prime3D_search need to be slit to segregate het from single state:
  a) the shared arrays need to be in a module of its own
  b) common functionality need to be in a prime3D_srch_base class
  c) het/SNHC/single-state functionality needs to be provided by extension
  d) alternatively, we use a bona-fide strategy pattern

BINARY FILE FORMAT
Should we keep track of jobid, out_dir, pid for every executed job? Or rather, when a field is filled-in jobproc should be updated with a job_descr and dir
In this way we could kill processes, allowing cancellation
Shall we keep track of which jobid wrote which entry in the segmented binary file?

StkInfo
ClsInfo
Ptcl2DInfo
Cls3Dinfo
Ptcl3DInfo
FSCInfo
VolInfo (flip indicator)
LastJob (append to structure to get history of workflow???)

JULIA
Should be possible to use ccall to call Fortran subroutines, which means we need to re-code all
commanders so they become subroutines of modules and so that their arguments are native types
(i.e. the cmdline needs to be turned into a job_description string). Then we should have all the
commander functionality at our hands with all the power of Julia.

Julia coding priorities:
Support from reading MRC into matrix
Support for  writing MRC from matrix
Support for read/write *simple binary files
