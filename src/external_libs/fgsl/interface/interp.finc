!-*-f90-*-
!
!  Interfaces: Interpolation 
!
     function gsl_interp_eval(interp, xa, ya, x, acc) bind(c)
       import
       type(c_ptr), value :: interp
       real(c_double), dimension(*), intent(in) :: xa, ya
       real(c_double), value :: x
       type(c_ptr), value :: acc
       real(c_double) :: gsl_interp_eval
     end function gsl_interp_eval
     function gsl_interp_eval_e(interp, xa, ya, x, acc, y) bind(c)
       import
       type(c_ptr), value :: interp
       real(c_double), dimension(*), intent(in) :: xa, ya
       real(c_double), value :: x
       real(c_double), intent(out) :: y
       type(c_ptr), value :: acc
       integer(c_int) :: gsl_interp_eval_e
     end function gsl_interp_eval_e
     function gsl_interp_eval_integ(interp, xa, ya, a, b, acc) bind(c)
       import
       type(c_ptr), value :: interp
       real(c_double), dimension(*), intent(in) :: xa, ya
       real(c_double), value :: a, b
       type(c_ptr), value :: acc
       real(c_double) :: gsl_interp_eval_integ
     end function gsl_interp_eval_integ
     function gsl_interp_eval_integ_e(interp, xa, ya, a, b, acc, result) bind(c)
       import
       type(c_ptr), value :: interp
       real(c_double), dimension(*), intent(in) :: xa, ya
       real(c_double), value :: a, b
       real(c_double), intent(out) :: result
       type(c_ptr), value :: acc
       integer(c_int) :: gsl_interp_eval_integ_e
     end function gsl_interp_eval_integ_e
     function gsl_interp_eval_deriv(interp, xa, ya, x, acc) bind(c)
       import
       type(c_ptr), value :: interp
       real(c_double), dimension(*), intent(in) :: xa, ya
       real(c_double), value :: x
       type(c_ptr), value :: acc
       real(c_double) :: gsl_interp_eval_deriv
     end function gsl_interp_eval_deriv
     function gsl_interp_eval_deriv_e(interp, xa, ya, x, acc, y) bind(c)
       import
       type(c_ptr), value :: interp
       real(c_double), dimension(*), intent(in) :: xa, ya
       real(c_double), value :: x
       real(c_double), intent(out) :: y
       type(c_ptr), value :: acc
       integer(c_int) :: gsl_interp_eval_deriv_e
     end function gsl_interp_eval_deriv_e
     function gsl_interp_eval_deriv2(interp, xa, ya, x, acc) bind(c)
       import
       type(c_ptr), value :: interp
       real(c_double), dimension(*), intent(in) :: xa, ya
       real(c_double), value :: x
       type(c_ptr), value :: acc
       real(c_double) :: gsl_interp_eval_deriv2
     end function gsl_interp_eval_deriv2
     function gsl_interp_eval_deriv2_e(interp, xa, ya, x, acc, y) bind(c)
       import
       type(c_ptr), value :: interp
       real(c_double), dimension(*), intent(in) :: xa, ya
       real(c_double), value :: x
       real(c_double), intent(out) :: y
       type(c_ptr), value :: acc
       integer(c_int) :: gsl_interp_eval_deriv2_e
     end function gsl_interp_eval_deriv2_e
     function fgsl_aux_interp_alloc(int_interp) bind(c)
       import
       integer(fgsl_int), value :: int_interp
       type(c_ptr) :: fgsl_aux_interp_alloc
     end function fgsl_aux_interp_alloc
     function gsl_interp_alloc(interp_type, size) bind(c)
       import
       type(c_ptr), value :: interp_type
       integer(c_size_t), value :: size
       type(c_ptr) :: gsl_interp_alloc
     end function gsl_interp_alloc
     subroutine gsl_interp_free(interp) bind(c)
       import
       type(c_ptr), value :: interp
     end subroutine gsl_interp_free
     function gsl_interp_init(interp, xa, ya, size) bind(c)
       import
       type(c_ptr), value :: interp
       real(c_double), dimension(*), intent(in) :: xa, ya
       integer(c_size_t), value :: size
       integer(c_int) gsl_interp_init
     end function gsl_interp_init
     function gsl_interp_accel_alloc() bind(c)
       import
       type(c_ptr) :: gsl_interp_accel_alloc
     end function gsl_interp_accel_alloc
     subroutine gsl_interp_accel_free(acc) bind(c)
       import
       type(c_ptr), value :: acc
     end subroutine gsl_interp_accel_free
     function gsl_interp_name(interp) bind(c)
       import
       type(c_ptr), value :: interp
       type(c_ptr) :: gsl_interp_name
     end function gsl_interp_name
     function fgsl_aux_interp_min_size(interp) bind(c)
       import
       type(c_ptr), value :: interp
       integer(c_long_long) :: fgsl_aux_interp_min_size
     end function fgsl_aux_interp_min_size
     function gsl_interp_bsearch(xa, x, index_lo, index_hi) bind(c)
       import
       real(c_double), dimension(*), intent(in) :: xa
       real(c_double), value :: x
       integer(c_size_t), value :: index_lo, index_hi
       integer(c_size_t) ::  gsl_interp_bsearch
     end function gsl_interp_bsearch
     function gsl_interp_accel_find(acc, xa, size, x) bind(c)
       import
       type(c_ptr), value :: acc
       real(c_double), dimension(*), intent(in) :: xa
       integer(c_size_t), value :: size
       real(c_double), value :: x
       integer(c_size_t) ::  gsl_interp_accel_find
     end function gsl_interp_accel_find
     function gsl_spline_alloc(interp_type, size) bind(c)
       import
       type(c_ptr), value :: interp_type
       integer(c_size_t), value :: size
       type(c_ptr) :: gsl_spline_alloc
     end function gsl_spline_alloc
     function gsl_spline_init(spline, xa, ya, size) bind(c)
       import
       type(c_ptr), value :: spline
       real(c_double), dimension(*), intent(in) :: xa, ya
       integer(c_size_t), value :: size
       integer(c_int) gsl_spline_init
     end function gsl_spline_init
     function gsl_spline_name(spline) bind(c)
       import
       type(c_ptr), value :: spline
       type(c_ptr) :: gsl_spline_name
     end function gsl_spline_name
     function fgsl_aux_spline_min_size(spline) bind(c)
       import
       type(c_ptr), value :: spline
       integer(c_long_long) :: fgsl_aux_spline_min_size
     end function fgsl_aux_spline_min_size
     function gsl_spline_eval(spline, x, acc) bind(c)
       import
       type(c_ptr), value :: spline
       real(c_double), value :: x
       type(c_ptr), value :: acc
       real(c_double) :: gsl_spline_eval
     end function gsl_spline_eval
     function gsl_spline_eval_e(spline, x, acc, y) bind(c)
       import
       type(c_ptr), value :: spline
       real(c_double), value :: x
       real(c_double), intent(out) :: y
       type(c_ptr), value :: acc
       integer(c_int) :: gsl_spline_eval_e
     end function gsl_spline_eval_e
     function gsl_spline_eval_deriv(spline, x, acc) bind(c)
       import
       type(c_ptr), value :: spline
       real(c_double), value :: x
       type(c_ptr), value :: acc
       real(c_double) :: gsl_spline_eval_deriv
     end function gsl_spline_eval_deriv
     function gsl_spline_eval_deriv_e(spline, x, acc, y) bind(c)
       import
       type(c_ptr), value :: spline
       real(c_double), value :: x
       real(c_double), intent(out) :: y
       type(c_ptr), value :: acc
       integer(c_int) :: gsl_spline_eval_deriv_e
     end function gsl_spline_eval_deriv_e
     function gsl_spline_eval_deriv2(spline, x, acc) bind(c)
       import
       type(c_ptr), value :: spline
       real(c_double), value :: x
       type(c_ptr), value :: acc
       real(c_double) :: gsl_spline_eval_deriv2
     end function gsl_spline_eval_deriv2
     function gsl_spline_eval_deriv2_e(spline, x, acc, y) bind(c)
       import
       type(c_ptr), value :: spline
       real(c_double), value :: x
       real(c_double), intent(out) :: y
       type(c_ptr), value :: acc
       integer(c_int) :: gsl_spline_eval_deriv2_e
     end function gsl_spline_eval_deriv2_e
     function gsl_spline_eval_integ(spline, a, b, acc) bind(c)
       import
       type(c_ptr), value :: spline
       real(c_double), value :: a, b
       type(c_ptr), value :: acc
       real(c_double) :: gsl_spline_eval_integ
     end function gsl_spline_eval_integ
     function gsl_spline_eval_integ_e(spline, a, b, acc, y) bind(c)
       import
       type(c_ptr), value :: spline
       real(c_double), value :: a, b
       real(c_double), intent(out) :: y
       type(c_ptr), value :: acc
       integer(c_int) :: gsl_spline_eval_integ_e
     end function gsl_spline_eval_integ_e
     subroutine gsl_spline_free(spline) bind(c)
       import
       type(c_ptr), value :: spline
     end subroutine gsl_spline_free
     function gsl_aux_sizeof_interp() bind(c)
       import :: c_size_t
       integer(c_size_t) :: gsl_aux_sizeof_interp
     end function gsl_aux_sizeof_interp
