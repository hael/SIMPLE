!-*-f90-*-
!
! Interfaces: Permutations and Combinations
!
  function gsl_permutation_alloc(n) bind(c)
    import
    integer(c_size_t), value :: n
    type(c_ptr) :: gsl_permutation_alloc
  end function gsl_permutation_alloc
  function gsl_permutation_calloc(n) bind(c)
    import
    integer(c_size_t), value :: n
    type(c_ptr) :: gsl_permutation_calloc
  end function gsl_permutation_calloc
  subroutine gsl_permutation_init(p) bind(c)
    import
    type(c_ptr), value :: p
  end subroutine gsl_permutation_init
  subroutine gsl_permutation_free(p) bind(c)
    import
    type(c_ptr), value :: p
  end subroutine gsl_permutation_free
  function gsl_permutation_memcpy(dest, src) bind(c)
    import
    type(c_ptr), value :: dest
    type(c_ptr), value :: src
    integer(c_int) :: gsl_permutation_memcpy
  end function gsl_permutation_memcpy
  function gsl_permutation_get(p, i) bind(c)
    import
    type(c_ptr), value :: p
    integer(c_size_t), value :: i
    integer(c_size_t) :: gsl_permutation_get
  end function gsl_permutation_get
  function gsl_permutation_swap(p, i, j) bind(c)
    import
    type(c_ptr), value :: p
    integer(c_size_t), value :: i, j
    integer(c_int) :: gsl_permutation_swap
  end function gsl_permutation_swap
  function gsl_permutation_size(p) bind(c)   
    import
    type(c_ptr), value :: p
    integer(c_size_t) :: gsl_permutation_size
  end function gsl_permutation_size
  function gsl_permutation_data(p) bind(c)   
    import
    type(c_ptr), value :: p
    type(c_ptr) :: gsl_permutation_data
  end function gsl_permutation_data
  function gsl_permutation_valid(p) bind(c)
    import
    type(c_ptr), value :: p
    integer(c_int) :: gsl_permutation_valid
  end function gsl_permutation_valid
  subroutine gsl_permutation_reverse(p) bind(c)
    import
    type(c_ptr), value :: p
  end subroutine gsl_permutation_reverse
  function gsl_permutation_inverse(inv, p) bind(c)
    import
    type(c_ptr), value :: inv
    type(c_ptr), value :: p
    integer(c_int) :: gsl_permutation_inverse
  end function gsl_permutation_inverse
  function gsl_permutation_next(p) bind(c)   
    import
    type(c_ptr), value :: p
    integer(c_int) :: gsl_permutation_next
  end function gsl_permutation_next
  function gsl_permutation_prev(p) bind(c)   
    import
    type(c_ptr), value :: p
    integer(c_int) :: gsl_permutation_prev
  end function gsl_permutation_prev
  function gsl_permute(p, data, stride, n) bind(c)
    import
    integer(c_size_t), dimension(*), intent(in) :: p
    integer(c_size_t), value :: stride, n
    real(c_double), dimension(*), intent(inout) :: data
    integer(c_int) :: gsl_permute
  end function gsl_permute
  function gsl_permute_long(p, data, stride, n) bind(c)
    import
    integer(c_size_t), dimension(*), intent(in) :: p
    integer(c_size_t), value :: stride, n
    integer(c_long), dimension(*), intent(inout) :: data
    integer(c_int) :: gsl_permute_long
  end function gsl_permute_long
  function gsl_permute_inverse(p, data, stride, n) bind(c)
    import
    integer(c_size_t), dimension(*), intent(in) :: p
    integer(c_size_t), value :: stride, n
    real(c_double), dimension(*), intent(inout) :: data
    integer(c_int) :: gsl_permute_inverse
  end function gsl_permute_inverse
  function gsl_permute_long_inverse(p, data, stride, n) bind(c)
    import
    integer(c_size_t), dimension(*), intent(in) :: p
    integer(c_size_t), value :: stride, n
    integer(c_long), dimension(*), intent(inout) :: data
    integer(c_int) :: gsl_permute_long_inverse
  end function gsl_permute_long_inverse
  function gsl_permute_vector(p,v) bind(c)
    import :: c_ptr, c_int
    type(c_ptr), value :: p,v
    integer(c_int) :: gsl_permute_vector
  end function gsl_permute_vector
  function gsl_permute_vector_inverse(p,v) bind(c)
    import :: c_ptr, c_int
    type(c_ptr), value :: p,v
    integer(c_int) :: gsl_permute_vector_inverse
  end function gsl_permute_vector_inverse
  function gsl_permutation_mul(p, pa, pb) bind(c)
    import
    type(c_ptr), value :: p
    type(c_ptr), value :: pa, pb
    integer(c_int) :: gsl_permutation_mul
  end function gsl_permutation_mul
  function gsl_permutation_fwrite(stream, p) bind(c)
    import :: c_ptr, c_int
    type(c_ptr), value :: stream, p
    integer(c_int) :: gsl_permutation_fwrite
  end function gsl_permutation_fwrite
  function gsl_permutation_fread(stream, p) bind(c)
    import :: c_ptr, c_int
    type(c_ptr), value :: stream, p
    integer(c_int) :: gsl_permutation_fread
  end function gsl_permutation_fread
  function gsl_permutation_fprintf(stream, p, format) bind(c)
    import :: c_ptr, c_int, c_char
    type(c_ptr), value :: stream, p
    character(kind=c_char), dimension(*) :: format
    integer(c_int) :: gsl_permutation_fprintf
  end function gsl_permutation_fprintf
  function gsl_permutation_fscanf(stream, p) bind(c)
    import :: c_ptr, c_int
    type(c_ptr), value :: stream, p
    integer(c_int) :: gsl_permutation_fscanf
  end function gsl_permutation_fscanf
  function gsl_permutation_linear_to_canonical(q, p) bind(c)
    import
    type(c_ptr), value :: q
    type(c_ptr), value :: p
    integer(c_int) :: gsl_permutation_linear_to_canonical
  end function gsl_permutation_linear_to_canonical
  function gsl_permutation_canonical_to_linear(p, q) bind(c)
    import
    type(c_ptr), value :: p
    type(c_ptr), value :: q
    integer(c_int) :: gsl_permutation_canonical_to_linear
  end function gsl_permutation_canonical_to_linear
  function gsl_permutation_inversions(p) bind(c)   
    import
    type(c_ptr), value :: p
    integer(c_size_t) :: gsl_permutation_inversions
  end function gsl_permutation_inversions
  function gsl_permutation_linear_cycles(p) bind(c)   
    import
    type(c_ptr), value :: p
    integer(c_size_t) :: gsl_permutation_linear_cycles
  end function gsl_permutation_linear_cycles
  function gsl_permutation_canonical_cycles(p) bind(c)   
    import
    type(c_ptr), value :: p
    integer(c_size_t) :: gsl_permutation_canonical_cycles
  end function gsl_permutation_canonical_cycles
!
  function gsl_combination_alloc(n, k) bind(c)
    import
    integer(c_size_t), value :: n, k
    type(c_ptr) :: gsl_combination_alloc
  end function gsl_combination_alloc
  function gsl_combination_calloc(n, k) bind(c)
    import
    integer(c_size_t), value :: n, k
    type(c_ptr) :: gsl_combination_calloc
  end function gsl_combination_calloc
  subroutine gsl_combination_init_first(c) bind(c)
    import
    type(c_ptr), value :: c
  end subroutine gsl_combination_init_first
  subroutine gsl_combination_init_last(c) bind(c)
    import
    type(c_ptr), value :: c
  end subroutine gsl_combination_init_last
  subroutine gsl_combination_free(c) bind(c)
    import
    type(c_ptr), value :: c
  end subroutine gsl_combination_free
  function gsl_combination_memcpy(dest, src) bind(c)
    import
    type(c_ptr), value :: dest
    type(c_ptr), value :: src
    integer(c_int) :: gsl_combination_memcpy
  end function gsl_combination_memcpy
  function gsl_combination_get(c, i) bind(c)
    import
    type(c_ptr), value :: c
    integer(c_size_t), value :: i
    integer(c_size_t) :: gsl_combination_get
  end function gsl_combination_get
  function gsl_combination_n(c) bind(c)   
    import
    type(c_ptr), value :: c
    integer(c_size_t) :: gsl_combination_n
  end function gsl_combination_n
  function gsl_combination_k(c) bind(c)   
    import
    type(c_ptr), value :: c
    integer(c_size_t) :: gsl_combination_k
  end function gsl_combination_k
  function gsl_combination_data(c) bind(c)   
    import
    type(c_ptr), value :: c
    type(c_ptr) :: gsl_combination_data
  end function gsl_combination_data
  function gsl_combination_valid(c) bind(c)
    import
    type(c_ptr), value :: c
    integer(c_int) :: gsl_combination_valid
  end function gsl_combination_valid
  function gsl_combination_next(c) bind(c)   
    import
    type(c_ptr), value :: c
    integer(c_int) :: gsl_combination_next
  end function gsl_combination_next
  function gsl_combination_prev(c) bind(c)   
    import
    type(c_ptr), value :: c
    integer(c_int) :: gsl_combination_prev
  end function gsl_combination_prev
  function gsl_combination_fwrite(stream, c) bind(c)
    import :: c_ptr, c_int
    type(c_ptr), value :: stream, c
    integer(c_int) :: gsl_combination_fwrite
  end function gsl_combination_fwrite
  function gsl_combination_fread(stream, c) bind(c)
    import :: c_ptr, c_int
    type(c_ptr), value :: stream, c
    integer(c_int) :: gsl_combination_fread
  end function gsl_combination_fread
  function gsl_combination_fprintf(stream, c, format) bind(c)
    import :: c_ptr, c_int, c_char
    type(c_ptr), value :: stream, c
    character(kind=c_char), dimension(*) :: format
    integer(c_int) :: gsl_combination_fprintf
  end function gsl_combination_fprintf
  function gsl_combination_fscanf(stream, c) bind(c)
    import :: c_ptr, c_int
    type(c_ptr), value :: stream, c
    integer(c_int) :: gsl_combination_fscanf
  end function gsl_combination_fscanf
!
  function gsl_aux_sizeof_permutation() bind(c)
    import :: c_size_t
    integer(c_size_t) :: gsl_aux_sizeof_permutation
  end function gsl_aux_sizeof_permutation
  function gsl_aux_sizeof_combination() bind(c)
    import :: c_size_t
    integer(c_size_t) :: gsl_aux_sizeof_combination
  end function gsl_aux_sizeof_combination
    
