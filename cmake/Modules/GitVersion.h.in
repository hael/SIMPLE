#ifdef BUILD_NAME
    character(len=*),parameter :: build_descr = BUILD_NAME   !< compiler, build type and FFT backend - defined on commandline
#else
    character(len=*),parameter :: build_descr = "NONE"
#endif
    character(len=*),parameter :: BUILD_TYPE         = "@CMAKE_BUILD_TYPE@"
    character(len=*),parameter :: SIMPLE_LIB_VERSION = "@SIMPLE_VERSION@"       !< simple version
    character(len=*),parameter :: SIMPLE_GIT_VERSION = "@SIMPLE_GIT_VERSION@"   !< git hash at buildtime
    character(len=*),parameter :: SIMPLE_SOURCE_PATH = "@CMAKE_SOURCE_DIR@"     !< source dir
    character(len=*),parameter :: SIMPLE_BUILD_PATH  = "@CMAKE_BINARY_DIR@"     !< where SIMPLE was built
    character(len=*),parameter :: SIMPLE_PATH        = "@CMAKE_INSTALL_PREFIX@" !< installation dir
    enum,bind(C)
      enumerator :: FC_GNU_COMPILER = 0
      enumerator :: FC_INTEL_COMPILER = 1
      enumerator :: FC_PGI_COMPILER = 2
    end enum
    integer, parameter :: OS_LINUX = 1
    integer, parameter :: OS_MACOSX = 0
    integer, parameter :: OS_WINDOWS = -1
#ifdef MACOSX
    integer, parameter :: OS_PLATFORM =  OS_MACOSX
#else
    integer, parameter :: OS_PLATFORM =  OS_LINUX
#endif
    character(len=*),parameter :: FC_COMPILER_CMAKE_VERSION= "@CMAKE_Fortran_COMPILER_VERSION@"
#ifdef INTEL
    character(len=*),parameter :: FC_COMPILER= "Intel ifort 64"
    integer :: FC_COMPILER_VERSION(3) = (/ __INTEL_COMPILER, INT(__INTEL_COMPILER_BUILD_DATE/1000), mod(__INTEL_COMPILER_BUILD_DATE,1000) /)
    integer, parameter :: FORTRAN_COMPILER = FC_INTEL_COMPILER
#elif defined(GNU)
    character(len=*),parameter :: FC_COMPILER= "GNU gfortran"
    integer :: FC_COMPILER_VERSION(3) = (/ __GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__ /)
    integer, parameter :: FORTRAN_COMPILER = FC_GNU_COMPILER
#elif defined(PGI)
    character(len=*),parameter :: FC_COMPILER= "PGI fortran"
    integer :: FC_COMPILER_VERSION(3) = (/ __PGIC__, __PGIC_MINOR__, __PGIC_PATCHLEVEL__ /)
    integer, parameter :: FORTRAN_COMPILER = FC_PGI_COMPILER
#else
# error 'Compiler must be GNU, Intel or PGI'
#endif
#ifdef WIN32
character, parameter        :: PATH_SEPARATOR  = "\\"        !! double backslash generates only one character
character(len=2), parameter :: PATH_HERE       = ".\\"
character(len=3), parameter :: PATH_PARENT     = "..\\"
character(len = *), parameter :: system_type   = "windows"
character(len = *), parameter :: rmdir_force   = "deltree /s"
character(len = *), parameter :: bg_cmd_prefix = ""
character(len = *), parameter :: bg_cmd_suffix = ""
character(len = 1), parameter :: redirect      = ">"
character(len = *), parameter :: tempdir       = "c:\\TEMP\\"
character(len = *), parameter :: temp_filelist = "__simple_filelist__"
character(len = *), parameter :: ls_command    = "dir  "
character(len = *), parameter :: list_subdirs  = "dir /a:d"
#else
character, parameter        :: PATH_SEPARATOR  = "/"
character(len=2), parameter :: PATH_HERE       = "./"
character(len=3), parameter :: PATH_PARENT     = "../"
character(len = *), parameter :: system_type   = "unix"
character(len = *), parameter :: rmdir_force   = "/bin/rm --dir --force --recursive --preserve-root"
character(len = *), parameter :: bg_cmd_prefix = "nohup"
character(len = 1), parameter :: bg_cmd_suffix = "&"
character(len = 1), parameter :: redirect      = ">"
character(len = *), parameter :: tempdir       = "/tmp/"
character(len = *), parameter :: temp_filelist = "__simple_filelist__"
character(len = *), parameter :: ls_command    = "/bin/ls "
character(len = *), parameter :: list_subdirs  = "find . -maxdepth 1 -type d -print0"
#endif
