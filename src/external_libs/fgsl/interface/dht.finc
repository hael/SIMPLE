!-*-f90-*-
!
! Interfaces: Hankel transforms
! 
  function gsl_dht_alloc(size) bind(c)
    import
    integer(c_size_t), value :: size
    type(c_ptr) :: gsl_dht_alloc
  end function gsl_dht_alloc
  function gsl_dht_init(t, nu, xmax) bind(c)
    import
    type(c_ptr), value :: t
    real(c_double), value :: nu, xmax
    integer(c_int) :: gsl_dht_init
  end function gsl_dht_init
  function gsl_dht_new(size, nu, xmax) bind(c)
    import
    integer(c_size_t), value :: size
    real(c_double), value :: nu, xmax
    type(c_ptr) :: gsl_dht_new
  end function gsl_dht_new
  subroutine gsl_dht_free(t) bind(c)
    import
    type(c_ptr), value :: t
  end subroutine gsl_dht_free
  function gsl_dht_apply(t, f_in, f_out) bind(c)
    import
    type(c_ptr), value :: t
    real(c_double), dimension(*), intent(in) :: f_in
    real(c_double), dimension(*), intent(out) :: f_out 
    integer(c_int) :: gsl_dht_apply
  end function gsl_dht_apply
  function gsl_dht_x_sample(t, n) bind(c)
    import
    type(c_ptr), value :: t
    integer(c_int), value :: n
    real(c_double) :: gsl_dht_x_sample
  end function gsl_dht_x_sample
  function gsl_dht_k_sample(t, n) bind(c)
    import
    type(c_ptr), value :: t
    integer(c_int), value :: n
    real(c_double) :: gsl_dht_k_sample
  end function gsl_dht_k_sample
    
    
