!-*-f90-*-
!
! Interfaces: Histograms
!
  function gsl_histogram_alloc(n) bind(c)
    import
    integer(c_size_t), value :: n
    type(c_ptr) :: gsl_histogram_alloc
  end function gsl_histogram_alloc
  function gsl_histogram_set_ranges(h, range, size) bind(c)
    import 
    type(c_ptr), value :: h
    integer(c_size_t), value :: size
    real(c_double), dimension(*), intent(in) :: range
    integer(c_int) :: gsl_histogram_set_ranges
  end function gsl_histogram_set_ranges
  function gsl_histogram_set_ranges_uniform(h, xmin, xmax) bind(c)
    import
    type(c_ptr), value :: h
    real(c_double), value :: xmin, xmax
    integer(c_int) :: gsl_histogram_set_ranges_uniform
  end function gsl_histogram_set_ranges_uniform
  subroutine gsl_histogram_free(h) bind(c)
    import
    type(c_ptr), value :: h
  end subroutine gsl_histogram_free
  function gsl_histogram_memcpy(dest, src) bind(c)
    import
    type(c_ptr), value :: dest, src
    integer(c_int) :: gsl_histogram_memcpy
  end function gsl_histogram_memcpy
  function gsl_histogram_clone(src) bind(c)
    import
    type(c_ptr), value :: src
    type(c_ptr) :: gsl_histogram_clone
  end function gsl_histogram_clone
  function gsl_histogram_increment(h, x) bind(c)
    import
    type(c_ptr), value :: h
    real(c_double), value :: x
    integer(c_int) :: gsl_histogram_increment
  end function gsl_histogram_increment
  function gsl_histogram_accumulate(h, x, weight) bind(c)
    import
    type(c_ptr), value :: h
    real(c_double), value :: x, weight
    integer(c_int) :: gsl_histogram_accumulate
  end function gsl_histogram_accumulate
  function gsl_histogram_get(h, i) bind(c) 
    import
    type(c_ptr), value :: h
    integer(c_size_t), value :: i
    real(c_double) :: gsl_histogram_get
  end function gsl_histogram_get
  function gsl_histogram_get_range(h, i, lower, upper) bind(c) 
    import
    type(c_ptr), value :: h
    integer(c_size_t), value :: i
    real(c_double), intent(out) :: lower, upper
    integer(c_int) :: gsl_histogram_get_range
  end function gsl_histogram_get_range
  function gsl_histogram_max(h) bind(c) 
    import
    type(c_ptr), value :: h
    real(c_double) :: gsl_histogram_max
  end function gsl_histogram_max
  function gsl_histogram_min(h) bind(c) 
    import
    type(c_ptr), value :: h
    real(c_double) :: gsl_histogram_min
  end function gsl_histogram_min
  function gsl_histogram_bins(h) bind(c) 
    import
    type(c_ptr), value :: h
    integer(c_size_t) :: gsl_histogram_bins
  end function gsl_histogram_bins
  subroutine gsl_histogram_reset(h) bind(c)
    import
    type(c_ptr), value :: h
  end subroutine gsl_histogram_reset
  function gsl_histogram_find(h, x, i) bind(c) 
    import
    type(c_ptr), value :: h
    real(c_double), value :: x    
    integer(c_size_t), intent(out) :: i
    integer(c_int) :: gsl_histogram_find
  end function gsl_histogram_find
  function gsl_histogram_max_val(h) bind(c) 
    import
    type(c_ptr), value :: h
    real(c_double) :: gsl_histogram_max_val
  end function gsl_histogram_max_val
  function gsl_histogram_max_bin(h) bind(c) 
    import
    type(c_ptr), value :: h
    integer(c_size_t) :: gsl_histogram_max_bin
  end function gsl_histogram_max_bin
  function gsl_histogram_min_val(h) bind(c) 
    import
    type(c_ptr), value :: h
    real(c_double) :: gsl_histogram_min_val
  end function gsl_histogram_min_val
  function gsl_histogram_min_bin(h) bind(c) 
    import
    type(c_ptr), value :: h
    integer(c_size_t) :: gsl_histogram_min_bin
  end function gsl_histogram_min_bin
  function gsl_histogram_mean(h) bind(c) 
    import
    type(c_ptr), value :: h
    real(c_double) :: gsl_histogram_mean
  end function gsl_histogram_mean
  function gsl_histogram_sigma(h) bind(c) 
    import
    type(c_ptr), value :: h
    real(c_double) :: gsl_histogram_sigma
  end function gsl_histogram_sigma
  function gsl_histogram_sum(h) bind(c) 
    import
    type(c_ptr), value :: h
    real(c_double) :: gsl_histogram_sum
  end function gsl_histogram_sum
  function gsl_histogram_equal_bins_p(h1, h2) bind(c) 
    import
    type(c_ptr), value :: h1, h2
    integer(c_int) :: gsl_histogram_equal_bins_p
  end function gsl_histogram_equal_bins_p
  function gsl_histogram_add(h1, h2) bind(c) 
    import
    type(c_ptr), value :: h1, h2
    integer(c_int) :: gsl_histogram_add
  end function gsl_histogram_add
  function gsl_histogram_sub(h1, h2) bind(c) 
    import
    type(c_ptr), value :: h1, h2
    integer(c_int) :: gsl_histogram_sub
  end function gsl_histogram_sub
  function gsl_histogram_mul(h1, h2) bind(c) 
    import
    type(c_ptr), value :: h1, h2
    integer(c_int) :: gsl_histogram_mul
  end function gsl_histogram_mul
  function gsl_histogram_div(h1, h2) bind(c) 
    import
    type(c_ptr), value :: h1, h2
    integer(c_int) :: gsl_histogram_div
  end function gsl_histogram_div
  function gsl_histogram_scale(h, scale) bind(c)
    import
    type(c_ptr), value :: h
    real(c_double), value :: scale
    integer(c_int) :: gsl_histogram_scale
  end function gsl_histogram_scale
  function gsl_histogram_shift(h, offset) bind(c)
    import
    type(c_ptr), value :: h
    real(c_double), value :: offset
    integer(c_int) :: gsl_histogram_shift
  end function gsl_histogram_shift
  function gsl_histogram_fwrite(stream, h) bind(c)
    import :: c_ptr, c_int
    type(c_ptr), value :: stream, h
    integer(c_int) :: gsl_histogram_fwrite
  end function gsl_histogram_fwrite
  function gsl_histogram_fread(stream, h) bind(c)
    import :: c_ptr, c_int
    type(c_ptr), value :: stream, h
    integer(c_int) :: gsl_histogram_fread
  end function gsl_histogram_fread
  function gsl_histogram_fprintf(stream, h, range_format, bin_format) bind(c)
    import :: c_ptr, c_int, c_char
    type(c_ptr), value :: stream, h
    character(kind=c_char), dimension(*) :: range_format, bin_format
    integer(c_int) :: gsl_histogram_fprintf
  end function gsl_histogram_fprintf
  function gsl_histogram_fscanf(stream, h) bind(c)
    import :: c_ptr, c_int
    type(c_ptr), value :: stream, h
    integer(c_int) :: gsl_histogram_fscanf
  end function gsl_histogram_fscanf
  function gsl_histogram_pdf_alloc(n) bind(c)
    import
    integer(c_size_t), value :: n
    type(c_ptr) :: gsl_histogram_pdf_alloc
  end function gsl_histogram_pdf_alloc
  function gsl_histogram_pdf_init(p, h) bind(c)
    import
    type(c_ptr), value :: p, h
    integer(c_int) :: gsl_histogram_pdf_init
  end function gsl_histogram_pdf_init
  subroutine gsl_histogram_pdf_free(p) bind(c)
    import
    type(c_ptr), value :: p
  end subroutine gsl_histogram_pdf_free
  function gsl_histogram_pdf_sample(p, r) bind(c)
    import
    type(c_ptr), value :: p
    real(c_double), value :: r
    real(c_double) :: gsl_histogram_pdf_sample
  end function gsl_histogram_pdf_sample
  function gsl_histogram2d_alloc(nx, ny) bind(c)
    import
    integer(c_size_t), value :: nx, ny
    type(c_ptr) :: gsl_histogram2d_alloc
  end function gsl_histogram2d_alloc
  function gsl_histogram2d_set_ranges(h, xrange, xsize, yrange, ysize) bind(c)
    import 
    type(c_ptr), value :: h
    integer(c_size_t), value :: xsize, ysize
    real(c_double), dimension(*), intent(in) :: xrange, yrange
    integer(c_int) :: gsl_histogram2d_set_ranges
  end function gsl_histogram2d_set_ranges
  function gsl_histogram2d_set_ranges_uniform(h, xmin, xmax, ymin, ymax) bind(c)
    import
    type(c_ptr), value :: h
    real(c_double), value :: xmin, xmax, ymin, ymax
    integer(c_int) :: gsl_histogram2d_set_ranges_uniform
  end function gsl_histogram2d_set_ranges_uniform
  subroutine gsl_histogram2d_free(h) bind(c)
    import
    type(c_ptr), value :: h
  end subroutine gsl_histogram2d_free
  function gsl_histogram2d_memcpy(dest, src) bind(c)
    import
    type(c_ptr), value :: dest, src
    integer(c_int) :: gsl_histogram2d_memcpy
  end function gsl_histogram2d_memcpy
  function gsl_histogram2d_clone(src) bind(c)
    import
    type(c_ptr), value :: src
    type(c_ptr) :: gsl_histogram2d_clone
  end function gsl_histogram2d_clone
  function gsl_histogram2d_increment(h, x, y) bind(c)
    import
    type(c_ptr), value :: h
    real(c_double), value :: x, y
    integer(c_int) :: gsl_histogram2d_increment
  end function gsl_histogram2d_increment
  function gsl_histogram2d_accumulate(h, x, y, weight) bind(c)
    import
    type(c_ptr), value :: h
    real(c_double), value :: x, y, weight
    integer(c_int) :: gsl_histogram2d_accumulate
  end function gsl_histogram2d_accumulate
  function gsl_histogram2d_get(h, i, j) bind(c) 
    import
    type(c_ptr), value :: h
    integer(c_size_t), value :: i, j
    real(c_double) :: gsl_histogram2d_get
  end function gsl_histogram2d_get
  function gsl_histogram2d_get_xrange(h, i, xlower, xupper) bind(c) 
    import
    type(c_ptr), value :: h
    integer(c_size_t), value :: i
    real(c_double), intent(out) :: xlower, xupper
    integer(c_int) :: gsl_histogram2d_get_xrange
  end function gsl_histogram2d_get_xrange
  function gsl_histogram2d_get_yrange(h, i, ylower, yupper) bind(c) 
    import
    type(c_ptr), value :: h
    integer(c_size_t), value :: i
    real(c_double), intent(out) :: ylower, yupper
    integer(c_int) :: gsl_histogram2d_get_yrange
  end function gsl_histogram2d_get_yrange
  function gsl_histogram2d_xmax(h) bind(c) 
    import
    type(c_ptr), value :: h
    real(c_double) :: gsl_histogram2d_xmax
  end function gsl_histogram2d_xmax
  function gsl_histogram2d_xmin(h) bind(c) 
    import
    type(c_ptr), value :: h
    real(c_double) :: gsl_histogram2d_xmin
  end function gsl_histogram2d_xmin
  function gsl_histogram2d_nx(h) bind(c) 
    import
    type(c_ptr), value :: h
    integer(c_size_t) :: gsl_histogram2d_nx
  end function gsl_histogram2d_nx
  function gsl_histogram2d_ymax(h) bind(c) 
    import
    type(c_ptr), value :: h
    real(c_double) :: gsl_histogram2d_ymax
  end function gsl_histogram2d_ymax
  function gsl_histogram2d_ymin(h) bind(c) 
    import
    type(c_ptr), value :: h
    real(c_double) :: gsl_histogram2d_ymin
  end function gsl_histogram2d_ymin
  function gsl_histogram2d_ny(h) bind(c) 
    import
    type(c_ptr), value :: h
    integer(c_size_t) :: gsl_histogram2d_ny
  end function gsl_histogram2d_ny
  subroutine gsl_histogram2d_reset(h) bind(c)
    import
    type(c_ptr), value :: h
  end subroutine gsl_histogram2d_reset
  function gsl_histogram2d_find(h, x, y, i, j) bind(c) 
    import
    type(c_ptr), value :: h
    real(c_double), value :: x, y    
    integer(c_size_t), intent(out) :: i, j
    integer(c_int) :: gsl_histogram2d_find
  end function gsl_histogram2d_find
  function gsl_histogram2d_max_val(h) bind(c) 
    import
    type(c_ptr), value :: h
    real(c_double) :: gsl_histogram2d_max_val
  end function gsl_histogram2d_max_val
  subroutine gsl_histogram2d_max_bin(h, i, j) bind(c) 
    import
    type(c_ptr), value :: h
    integer(c_size_t), intent(out) :: i, j
  end subroutine gsl_histogram2d_max_bin
  function gsl_histogram2d_min_val(h) bind(c) 
    import
    type(c_ptr), value :: h
    real(c_double) :: gsl_histogram2d_min_val
  end function gsl_histogram2d_min_val
  subroutine gsl_histogram2d_min_bin(h, i, j) bind(c) 
    import
    type(c_ptr), value :: h
    integer(c_size_t), intent(out) :: i, j
  end subroutine gsl_histogram2d_min_bin
  function gsl_histogram2d_xmean(h) bind(c) 
    import
    type(c_ptr), value :: h
    real(c_double) :: gsl_histogram2d_xmean
  end function gsl_histogram2d_xmean
  function gsl_histogram2d_ymean(h) bind(c) 
    import
    type(c_ptr), value :: h
    real(c_double) :: gsl_histogram2d_ymean
  end function gsl_histogram2d_ymean
  function gsl_histogram2d_xsigma(h) bind(c) 
    import
    type(c_ptr), value :: h
    real(c_double) :: gsl_histogram2d_xsigma
  end function gsl_histogram2d_xsigma
  function gsl_histogram2d_ysigma(h) bind(c) 
    import
    type(c_ptr), value :: h
    real(c_double) :: gsl_histogram2d_ysigma
  end function gsl_histogram2d_ysigma
  function gsl_histogram2d_cov(h) bind(c) 
    import
    type(c_ptr), value :: h
    real(c_double) :: gsl_histogram2d_cov
  end function gsl_histogram2d_cov
  function gsl_histogram2d_sum(h) bind(c) 
    import
    type(c_ptr), value :: h
    real(c_double) :: gsl_histogram2d_sum
  end function gsl_histogram2d_sum
  function gsl_histogram2d_equal_bins_p(h1, h2) bind(c) 
    import
    type(c_ptr), value :: h1, h2
    integer(c_int) :: gsl_histogram2d_equal_bins_p
  end function gsl_histogram2d_equal_bins_p
  function gsl_histogram2d_add(h1, h2) bind(c) 
    import
    type(c_ptr), value :: h1, h2
    integer(c_int) :: gsl_histogram2d_add
  end function gsl_histogram2d_add
  function gsl_histogram2d_sub(h1, h2) bind(c) 
    import
    type(c_ptr), value :: h1, h2
    integer(c_int) :: gsl_histogram2d_sub
  end function gsl_histogram2d_sub
  function gsl_histogram2d_mul(h1, h2) bind(c) 
    import
    type(c_ptr), value :: h1, h2
    integer(c_int) :: gsl_histogram2d_mul
  end function gsl_histogram2d_mul
  function gsl_histogram2d_div(h1, h2) bind(c) 
    import
    type(c_ptr), value :: h1, h2
    integer(c_int) :: gsl_histogram2d_div
  end function gsl_histogram2d_div
  function gsl_histogram2d_scale(h, scale) bind(c)
    import
    type(c_ptr), value :: h
    real(c_double), value :: scale
    integer(c_int) :: gsl_histogram2d_scale
  end function gsl_histogram2d_scale
  function gsl_histogram2d_shift(h, offset) bind(c)
    import
    type(c_ptr), value :: h
    real(c_double), value :: offset
    integer(c_int) :: gsl_histogram2d_shift
  end function gsl_histogram2d_shift
  function gsl_histogram2d_fwrite(stream, h) bind(c)
    import :: c_ptr, c_int
    type(c_ptr), value :: stream, h
    integer(c_int) :: gsl_histogram2d_fwrite
  end function gsl_histogram2d_fwrite
  function gsl_histogram2d_fread(stream, h) bind(c)
    import :: c_ptr, c_int
    type(c_ptr), value :: stream, h
    integer(c_int) :: gsl_histogram2d_fread
  end function gsl_histogram2d_fread
  function gsl_histogram2d_fprintf(stream, h, range_format, bin_format) bind(c)
    import :: c_ptr, c_int, c_char
    type(c_ptr), value :: stream, h
    character(kind=c_char), dimension(*) :: range_format, bin_format
    integer(c_int) :: gsl_histogram2d_fprintf
  end function gsl_histogram2d_fprintf
  function gsl_histogram2d_fscanf(stream, h) bind(c)
    import :: c_ptr, c_int
    type(c_ptr), value :: stream, h
    integer(c_int) :: gsl_histogram2d_fscanf
  end function gsl_histogram2d_fscanf
  function gsl_histogram2d_pdf_alloc(nx, ny) bind(c)
    import
    integer(c_size_t), value :: nx, ny
    type(c_ptr) :: gsl_histogram2d_pdf_alloc
  end function gsl_histogram2d_pdf_alloc
  function gsl_histogram2d_pdf_init(p, h) bind(c)
    import
    type(c_ptr), value :: p, h
    integer(c_int) :: gsl_histogram2d_pdf_init
  end function gsl_histogram2d_pdf_init
  subroutine gsl_histogram2d_pdf_free(p) bind(c)
    import
    type(c_ptr), value :: p
  end subroutine gsl_histogram2d_pdf_free
  function gsl_histogram2d_pdf_sample(p, r1, r2, x, y) bind(c)
    import
    type(c_ptr), value :: p
    real(c_double), value :: r1, r2
    real(c_double), intent(out) :: x, y
    integer(c_int) :: gsl_histogram2d_pdf_sample
  end function gsl_histogram2d_pdf_sample
