!= Module simple_timer
!
!
! Michael Eager 2017-03-15

module simple_timer
  use precision_m

  use cudafor

  implicit none


  public :: tic, toc, now, timer_setup, timer_kill
  private


  integer :: istat
  type (cudaEvent) :: &
       clock_start, clock_end, clock_rate
  real(fp_kind) :: elapsed

contains

  !  function constructor() result(self)
  !    call setup
  !  end function constructor

  subroutine timer_setup()
    call timer_kill

    integer :: nDevices
    istat = cudaGetDeviceCount(nDevices)
    write(*,"('Number of CUDA-capable devices: ', i0,/)") &
         nDevices 
    istat = cudaEventCreate(clock_start)
    istat = cudaEventCreate(clock_end)
    ! output device info and transfer size
    !  istat = cudaGetDeviceProperties(prop, 0)
  end subroutine timer_setup

  function tic() result(itic)
    integer(fp_kind) :: itic
    istat = cudaEventRecord(clock_start,0)     
    itic = floor(clock_start)
  end function tic

  function toc (arg) result (elapsed_time)
    real(fp_kind) :: elapsed_time

    type (cudaEvent), optional, intent(in) :: arg
    if( present(arg)) then
       clock_start = arg
    end if
    istat = cudaEventRecord(clock_end,0)
    istat = cudaEventSynchronize(clock_end)
    istat = cudaEventElapsedTime(elapsed, clock_start, clock_end)
    elapsed_time=elapsed
  end function toc

  subroutine timer_kill () !timer_destructor(this)

    istat = cudaEventDestroy(clock_start)
    istat = cudaEventDestroy(clock_end)

  end subroutine timer_kill !timer_destructor

  subroutine now()

  end subroutine now

end module simple_timer



