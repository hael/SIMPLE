[
  {
    "center": {
      "name": "center",
      "descr_short": "Center volume",
      "descr_long": "is a program for centering a volume and mapping the shift parameters back to the particle images",
      "executable": "simple_exec"
    },
    "image input\/output": [
      {
        "key": "vol1",
        "keytype": "file",
        "descr_short": "Volume",
        "descr_long": "Volume to center",
        "descr_placeholder": "input volume e.g. vol.mrc",
        "required": true
      }
    ],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "oritab",
        "keytype": "file",
        "descr_short": "Orientation and CTF parameter file",
        "descr_long": "Orientation and CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": false
      },
      {
        "key": "outfile",
        "keytype": "file",
        "descr_short": "Output orientation and CTF parameter file",
        "descr_long": "Output Orientation and CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": false
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [
      {
        "key": "cenlp",
        "keytype": "num",
        "descr_short": "Centering low-pass limit",
        "descr_long": "Limit for low-pass filter used in binarisation prior to determination of the center of gravity of the reference volume(s) and centering",
        "descr_placeholder": "centering low-pass limit in Angstroms{30}",
        "required": false
      }
    ],
    "mask controls": [],
    "computer controls": [
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "cluster2D": {
      "name": "cluster2D",
      "descr_short": "Simultaneous 2D alignment and clustering of single-particle images",
      "descr_long": "is a distributed workflow implementing a reference-free 2D alignment\/clustering algorithm adopted from the prime3D probabilistic ab initio 3D reconstruction algorithm",
      "executable": "simple_distr_exec"
    },
    "image input\/output": [
      {
        "key": "refs",
        "keytype": "file",
        "descr_short": "Initial references",
        "descr_long": "Initial 2D references used to bootstrap the search",
        "descr_placeholder": "xxx.mrc file with references",
        "required": false
      }
    ],
    "parameter input\/output": [
      {
        "key": "mkdir",
        "keytype": "binary",
        "descr_short": "Make auto-named dir for output",
        "descr_long": "Make auto-named consequtively numbered dir for output(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [
      {
        "key": "ncls",
        "keytype": "num",
        "descr_short": "Number of 2D clusters",
        "descr_long": "Number of groups to sort the particles into prior to averaging to create 2D class averages with improved SNR",
        "descr_placeholder": "# 2D clusters",
        "required": true
      },
      {
        "key": "startit",
        "keytype": "num",
        "descr_short": "First iteration",
        "descr_long": "Index of first iteration when starting from a previous run",
        "descr_placeholder": "start iterations from here",
        "required": false
      },
      {
        "key": "trs",
        "keytype": "num",
        "descr_short": "Maximum translational shift",
        "descr_long": "Maximum half-width for bund-constrained search of rotational origin shifts",
        "descr_placeholder": "max shift per iteration in pixels{5}",
        "required": false
      },
      {
        "key": "autoscale",
        "keytype": "binary",
        "descr_short": "Automatic down-scaling",
        "descr_long": "Automatic down-scaling of images for accelerated convergence rate. Initial\/Final low-pass limits control the degree of down-scaling(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "center",
        "keytype": "binary",
        "descr_short": "Center class averages",
        "descr_long": "Center class averages by their center of gravity and map shifts back to the particles(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "dyncls",
        "keytype": "binary",
        "descr_short": "Dynamic reallocation of clusters",
        "descr_long": "Dynamic reallocation of clusters that fall below a minimum population by randomization(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "maxits",
        "keytype": "num",
        "descr_short": "Max iterations",
        "descr_long": "Maximum number of iterations",
        "descr_placeholder": "Max # iterations",
        "required": false
      },
      {
        "key": "update_frac",
        "keytype": "num",
        "descr_short": "Fractional update per iteration",
        "descr_long": "Fraction of particles to update per iteration in incremental learning scheme for accelerated convergence rate(0.1-0.5){1.}",
        "descr_placeholder": "update this fraction per iter(0.1-0.5){1.0}",
        "required": false
      },
      {
        "key": "frac",
        "keytype": "num",
        "descr_short": "Fraction of particles to include",
        "descr_long": "Fraction of particles to include based on spectral score (median of FRC between reference and particle)",
        "descr_placeholder": "fraction of particles(0.1-0.9){1.0}",
        "required": false
      },
      {
        "key": "bfac",
        "keytype": "num",
        "descr_short": "Correlation B-factor",
        "descr_long": "B-factor for the objective function in Angstroms^2",
        "descr_placeholder": "B-factor in Angstroms^2(>0.0){200}",
        "required": false
      },
      {
        "key": "objfun",
        "keytype": "binary",
        "descr_short": "Objective function",
        "descr_long": "Objective function(cc|ccres){ccres}",
        "descr_placeholder": "(cc|ccres){ccres}",
        "required": false,
        "options": [
          "cc",
          "ccres"
        ]
      }
    ],
    "filter controls": [
      {
        "key": "hp",
        "keytype": "num",
        "descr_short": "High-pass limit",
        "descr_long": "High-pass resolution limit",
        "descr_placeholder": "high-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "cenlp",
        "keytype": "num",
        "descr_short": "Centering low-pass limit",
        "descr_long": "Limit for low-pass filter used in binarisation prior to determination of the center of gravity of the class averages and centering",
        "descr_placeholder": "centering low-pass limit in Angstroms{30}",
        "required": false
      },
      {
        "key": "lp",
        "keytype": "num",
        "descr_short": "Static low-pass limit",
        "descr_long": "Static low-pass limit to apply to diagnose possible issues with the dynamic update scheme used by default",
        "descr_placeholder": "low-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "lpstart",
        "keytype": "num",
        "descr_short": "Initial low-pass limit",
        "descr_long": "Low-pass limit to be applied in the first few iterations of search, before the automatic scheme kicks in. Also controls the degree of downsampling in the first phase",
        "descr_placeholder": "initial low-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "lpstop",
        "keytype": "num",
        "descr_short": "Final low-pass limit",
        "descr_long": "Low-pass limit that controls the degree of downsampling in the second phase. Give estimated best final resolution",
        "descr_placeholder": "final low-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "match_filt",
        "keytype": "binary",
        "descr_short": "Matched filter",
        "descr_long": "Filter to maximize the signal-to-noise ratio (SNR) in the presence of additive stochastic noise. Sometimes causes over-fitting and needs to be turned off(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "weights2D",
        "keytype": "binary",
        "descr_short": "Spectral weighting",
        "descr_long": "Weighted particle contributions based on the median FRC between the particle and its corresponding reference(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "shellw",
        "keytype": "binary",
        "descr_short": "B-factor weighted reconstruction",
        "descr_long": "Whether to perform B-factor weighted reconstruction(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "mask controls": [
      {
        "key": "msk",
        "keytype": "num",
        "descr_short": "Mask radius",
        "descr_long": "Mask radius in pixels for application of a soft-edged circular mask to remove background noise",
        "descr_placeholder": "mask radius in pixels",
        "required": true
      },
      {
        "key": "inner",
        "keytype": "num",
        "descr_short": "Inner mask radius",
        "descr_long": "Inner mask radius for omitting unordered cores of particles with high radial symmetry, typically icosahedral viruses",
        "descr_placeholder": "inner mask radius in pixels",
        "required": false
      }
    ],
    "computer controls": [
      {
        "key": "nparts",
        "keytype": "num",
        "descr_short": "Number of parts",
        "descr_long": "Number of partitions for distrbuted memory execution. One part typically corresponds to one CPU socket in the distributed system. On a single-socket machine there may be speed benfits to dividing the jobs into a few (2-4) partitions, depending on memory capacity",
        "descr_placeholder": "divide job into # parts",
        "required": true
      },
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "cluster2D_stream": {
      "name": "cluster2D_stream",
      "descr_short": "Simultaneous 2D alignment and clustering of single-particle images in streaming mode",
      "descr_long": "is a distributed workflow implementing a reference-free 2D alignment\/clustering algorithm in streaming mode",
      "executable": "simple_distr_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "dir_target",
        "keytype": "file",
        "descr_short": "Target directory",
        "descr_long": "Directory where the preprocess_stream application is running",
        "descr_placeholder": "e.g. 1_preprocess_stream",
        "required": true
      },
      {
        "key": "mkdir",
        "keytype": "binary",
        "descr_short": "Make auto-named dir for output",
        "descr_long": "Make auto-named consequtively numbered dir for output(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [
      {
        "key": "ncls_start",
        "keytype": "num",
        "descr_short": "Starting number of clusters",
        "descr_long": "Minimum number of class averagages to initiate 2D clustering",
        "descr_placeholder": "initial # clusters",
        "required": true
      },
      {
        "key": "nptcls_per_cls",
        "keytype": "num",
        "descr_short": "Particles per cluster",
        "descr_long": "Number of incoming particles for which one new class average is generated",
        "descr_placeholder": "# particles per cluster",
        "required": true
      },
      {
        "key": "trs",
        "keytype": "num",
        "descr_short": "Maximum translational shift",
        "descr_long": "Maximum half-width for bund-constrained search of rotational origin shifts",
        "descr_placeholder": "max shift per iteration in pixels{5}",
        "required": false
      },
      {
        "key": "objfun",
        "keytype": "binary",
        "descr_short": "Objective function",
        "descr_long": "Objective function(cc|ccres){cc}",
        "descr_placeholder": "(cc|ccres){cc}",
        "required": false,
        "options": [
          "cc",
          "ccres"
        ]
      },
      {
        "key": "autoscale",
        "keytype": "binary",
        "descr_short": "Automatic down-scaling",
        "descr_long": "Automatic down-scaling of images for accelerated convergence rate. Initial\/Final low-pass limits control the degree of down-scaling(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "center",
        "keytype": "binary",
        "descr_short": "Center class averages",
        "descr_long": "Center class averages by their center of gravity and map shifts back to the particles(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "filter controls": [
      {
        "key": "hp",
        "keytype": "num",
        "descr_short": "High-pass limit",
        "descr_long": "High-pass resolution limit",
        "descr_placeholder": "high-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "cenlp",
        "keytype": "num",
        "descr_short": "Centering low-pass limit",
        "descr_long": "Limit for low-pass filter used in binarisation prior to determination of the center of gravity of the class averages and centering",
        "descr_placeholder": "centering low-pass limit in Angstroms{30}",
        "required": false
      },
      {
        "key": "lp",
        "keytype": "num",
        "descr_short": "Static low-pass limit",
        "descr_long": "Static low-pass limit to apply to diagnose possible issues with the dynamic update scheme used by default",
        "descr_placeholder": "low-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "match_filt",
        "keytype": "binary",
        "descr_short": "Matched filter",
        "descr_long": "Filter to maximize the signal-to-noise ratio (SNR) in the presence of additive stochastic noise. Sometimes causes over-fitting and needs to be turned off(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "weights2D",
        "keytype": "binary",
        "descr_short": "Spectral weighting",
        "descr_long": "Weighted particle contributions based on the median FRC between the particle and its corresponding reference(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "mask controls": [
      {
        "key": "msk",
        "keytype": "num",
        "descr_short": "Mask radius",
        "descr_long": "Mask radius in pixels for application of a soft-edged circular mask to remove background noise",
        "descr_placeholder": "mask radius in pixels",
        "required": true
      },
      {
        "key": "inner",
        "keytype": "num",
        "descr_short": "Inner mask radius",
        "descr_long": "Inner mask radius for omitting unordered cores of particles with high radial symmetry, typically icosahedral viruses",
        "descr_placeholder": "inner mask radius in pixels",
        "required": false
      }
    ],
    "computer controls": [
      {
        "key": "nparts",
        "keytype": "num",
        "descr_short": "Number of parts",
        "descr_long": "Number of partitions for distrbuted memory execution. One part typically corresponds to one CPU socket in the distributed system. On a single-socket machine there may be speed benfits to dividing the jobs into a few (2-4) partitions, depending on memory capacity",
        "descr_placeholder": "divide job into # parts",
        "required": true
      },
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "cluster3D": {
      "name": "cluster3D",
      "descr_short": "3D heterogeneity analysis",
      "descr_long": "is a distributed workflow for heterogeneity analysis by 3D clustering",
      "executable": "simple_distr_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "nstates",
        "keytype": "num",
        "descr_short": "Number of states",
        "descr_long": "Number of conformational\/compositional states to separate",
        "descr_placeholder": "# states to separate",
        "required": true
      },
      {
        "key": "mkdir",
        "keytype": "binary",
        "descr_short": "Make auto-named dir for output",
        "descr_long": "Make auto-named consequtively numbered dir for output(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [
      {
        "key": "nspace",
        "keytype": "num",
        "descr_short": "Number of projection directions",
        "descr_long": "Number of projection directions used",
        "descr_placeholder": "# projections",
        "required": false
      },
      {
        "key": "startit",
        "keytype": "num",
        "descr_short": "First iteration",
        "descr_long": "Index of first iteration when starting from a previous run",
        "descr_placeholder": "start iterations from here",
        "required": false
      },
      {
        "key": "maxits",
        "keytype": "num",
        "descr_short": "Max iterations",
        "descr_long": "Maximum number of iterations",
        "descr_placeholder": "Max # iterations",
        "required": false
      },
      {
        "key": "frac",
        "keytype": "num",
        "descr_short": "Fraction of particles to include",
        "descr_long": "Fraction of particles to include based on spectral score (median of FRC between reference and particle)",
        "descr_placeholder": "fraction of particles(0.1-0.9){1.0}",
        "required": false
      },
      {
        "key": "pgrp",
        "keytype": "str",
        "descr_short": "Point-group symmetry",
        "descr_long": "Point-group symmetry of particle(cn|dn|t|o|i){c1}",
        "descr_placeholder": "point-group(cn|dn|t|o|i){c1}",
        "required": true
      },
      {
        "key": "objfun",
        "keytype": "binary",
        "descr_short": "Objective function",
        "descr_long": "Objective function(cc|ccres){cc}",
        "descr_placeholder": "(cc|ccres){cc}",
        "required": false,
        "options": [
          "cc",
          "ccres"
        ]
      },
      {
        "key": "refine",
        "keytype": "binary",
        "descr_short": "Refinement mode",
        "descr_long": "Refinement mode(cluster|clustersym)){cluster}",
        "descr_placeholder": "(cluster|clustersym){cluster}",
        "required": false,
        "options": [
          "cluster",
          "clustersym"
        ]
      }
    ],
    "filter controls": [
      {
        "key": "hp",
        "keytype": "num",
        "descr_short": "High-pass limit",
        "descr_long": "High-pass resolution limit",
        "descr_placeholder": "high-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "lp",
        "keytype": "num",
        "descr_short": "Static low-pass limit",
        "descr_long": "Static low-pass limit",
        "descr_placeholder": "low-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "lpstop",
        "keytype": "num",
        "descr_short": "Low-pass limit for frequency limited refinement",
        "descr_long": "Low-pass limit used to limit the resolution to avoid possible overfitting",
        "descr_placeholder": "low-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "lplim_crit",
        "keytype": "num",
        "descr_short": "Low-pass limit FSC criterion",
        "descr_long": "FSC criterion for determining the low-pass limit(0.143-0.5){0.3}",
        "descr_placeholder": "low-pass FSC criterion(0.143-0.5){0.3}",
        "required": false
      },
      {
        "key": "eo",
        "keytype": "binary",
        "descr_short": "Gold-standard FSC for filtering and resolution estimation",
        "descr_long": "Gold-standard FSC for filtering and resolution estimation(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "weights3D",
        "keytype": "binary",
        "descr_short": "Spectral weighting",
        "descr_long": "Weighted particle contributions based on the median FRC between the particle and its corresponding reference(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "mask controls": [
      {
        "key": "msk",
        "keytype": "num",
        "descr_short": "Mask radius",
        "descr_long": "Mask radius in pixels for application of a soft-edged circular mask to remove background noise",
        "descr_placeholder": "mask radius in pixels",
        "required": true
      },
      {
        "key": "inner",
        "keytype": "num",
        "descr_short": "Inner mask radius",
        "descr_long": "Inner mask radius for omitting unordered cores of particles with high radial symmetry, typically icosahedral viruses",
        "descr_placeholder": "inner mask radius in pixels",
        "required": false
      },
      {
        "key": "mskfile",
        "keytype": "file",
        "descr_short": "Input mask file",
        "descr_long": "Input mask file to apply to reference volume(s) before projection",
        "descr_placeholder": "e.g. automask.mrc from postprocess",
        "required": false
      },
      {
        "key": "focusmsk",
        "keytype": "num",
        "descr_short": "Mask radius in focused refinement",
        "descr_long": "Mask radius in pixels for application of a soft-edged circular mask to remove background noise in focused refinement",
        "descr_placeholder": "focused mask radius in pixels",
        "required": false
      },
      {
        "key": "width",
        "keytype": "num",
        "descr_short": "Falloff of inner mask",
        "descr_long": "Number of cosine edge pixels of inner mask in pixels",
        "descr_placeholder": "# pixels cosine edge{10}",
        "required": false
      }
    ],
    "computer controls": [
      {
        "key": "nparts",
        "keytype": "num",
        "descr_short": "Number of parts",
        "descr_long": "Number of partitions for distrbuted memory execution. One part typically corresponds to one CPU socket in the distributed system. On a single-socket machine there may be speed benfits to dividing the jobs into a few (2-4) partitions, depending on memory capacity",
        "descr_placeholder": "divide job into # parts",
        "required": true
      },
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "cluster3D_refine": {
      "name": "cluster3D_refine",
      "descr_short": "cluster 3D refinement",
      "descr_long": "is a distributed workflow based on probabilistic projection matching for refinement of 3D heterogeneity analysis by cluster3D",
      "executable": "simple_distr_exec"
    },
    "image input\/output": [
      {
        "key": "msklist",
        "keytype": "file",
        "descr_short": "List of mask files",
        "descr_long": "List (.txt file) of mask files for the different states",
        "descr_placeholder": "e.g. mskfiles.txt",
        "required": true
      },
      {
        "key": "vollist",
        "keytype": "file",
        "descr_short": "List of reference volumes files",
        "descr_long": "List (.txt file) of reference volumes for the different states",
        "descr_placeholder": "e.g. refvols.txt",
        "required": true
      }
    ],
    "parameter input\/output": [
      {
        "key": "state",
        "keytype": "num",
        "descr_short": "State to refine",
        "descr_long": "Index of state to refine",
        "descr_placeholder": "give state index",
        "required": false
      },
      {
        "key": "mkdir",
        "keytype": "binary",
        "descr_short": "Make auto-named dir for output",
        "descr_long": "Make auto-named consequtively numbered dir for output(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [
      {
        "key": "nspace",
        "keytype": "num",
        "descr_short": "Number of projection directions",
        "descr_long": "Number of projection directions used",
        "descr_placeholder": "# projections",
        "required": false
      },
      {
        "key": "startit",
        "keytype": "num",
        "descr_short": "First iteration",
        "descr_long": "Index of first iteration when starting from a previous run",
        "descr_placeholder": "start iterations from here",
        "required": false
      },
      {
        "key": "trs",
        "keytype": "num",
        "descr_short": "Maximum translational shift",
        "descr_long": "Maximum half-width for bund-constrained search of rotational origin shifts",
        "descr_placeholder": "max shift per iteration in pixels{5}",
        "required": false
      },
      {
        "key": "center",
        "keytype": "binary",
        "descr_short": "Center reference volume(s)",
        "descr_long": "Center reference volume(s) by their center of gravity and map shifts back to the particles(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "maxits",
        "keytype": "num",
        "descr_short": "Max iterations",
        "descr_long": "Maximum number of iterations",
        "descr_placeholder": "Max # iterations",
        "required": false
      },
      {
        "key": "update_frac",
        "keytype": "num",
        "descr_short": "Fractional update per iteration",
        "descr_long": "Fraction of particles to update per iteration in incremental learning scheme for accelerated convergence rate(0.1-0.5){1.}",
        "descr_placeholder": "update this fraction per iter(0.1-0.5){1.0}",
        "required": false
      },
      {
        "key": "frac",
        "keytype": "num",
        "descr_short": "Fraction of particles to include",
        "descr_long": "Fraction of particles to include based on spectral score (median of FRC between reference and particle)",
        "descr_placeholder": "fraction of particles(0.1-0.9){1.0}",
        "required": false
      },
      {
        "key": "pgrp",
        "keytype": "str",
        "descr_short": "Point-group symmetry",
        "descr_long": "Point-group symmetry of particle(cn|dn|t|o|i){c1}",
        "descr_placeholder": "point-group(cn|dn|t|o|i){c1}",
        "required": true
      },
      {
        "key": "nnn",
        "keytype": "num",
        "descr_short": "Number of nearest neighbours",
        "descr_long": "Number of nearest projection direction neighbours in neigh=yes refinement",
        "descr_placeholder": "# projection neighbours{10% of search space}",
        "required": false
      },
      {
        "key": "nstates",
        "keytype": "num",
        "descr_short": "Number of states",
        "descr_long": "Number of conformational\/compositional states to reconstruct",
        "descr_placeholder": "# states to reconstruct",
        "required": false
      },
      {
        "key": "objfun",
        "keytype": "binary",
        "descr_short": "Objective function",
        "descr_long": "Objective function(cc|ccres){cc}",
        "descr_placeholder": "(cc|ccres){cc}",
        "required": false,
        "options": [
          "cc",
          "ccres"
        ]
      },
      {
        "key": "refine",
        "keytype": "multi",
        "descr_short": "Refinement mode",
        "descr_long": "Refinement mode(snhc|single|multi|greedy_single|greedy_multi|cluster|clustersym){no}",
        "descr_placeholder": "(snhc|single|multi|greedy_single|greedy_multi|cluster|clustersym){single}",
        "required": false,
        "options": [
          "snhc",
          "single",
          "multi",
          "greedy_single",
          "greedy_multi",
          "cluster",
          "clustersym"
        ]
      },
      {
        "key": "neigh",
        "keytype": "binary",
        "descr_short": "Neighbourhood refinement",
        "descr_long": "Neighbourhood refinement(yes|no){yes}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "filter controls": [
      {
        "key": "hp",
        "keytype": "num",
        "descr_short": "High-pass limit",
        "descr_long": "High-pass resolution limit",
        "descr_placeholder": "high-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "cenlp",
        "keytype": "num",
        "descr_short": "Centering low-pass limit",
        "descr_long": "Limit for low-pass filter used in binarisation prior to determination of the center of gravity of the reference volume(s) and centering",
        "descr_placeholder": "centering low-pass limit in Angstroms{30}",
        "required": false
      },
      {
        "key": "lp",
        "keytype": "num",
        "descr_short": "Static low-pass limit",
        "descr_long": "Static low-pass limit",
        "descr_placeholder": "low-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "lpstop",
        "keytype": "num",
        "descr_short": "Low-pass limit for frequency limited refinement",
        "descr_long": "Low-pass limit used to limit the resolution to avoid possible overfitting",
        "descr_placeholder": "low-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "lplim_crit",
        "keytype": "num",
        "descr_short": "Low-pass limit FSC criterion",
        "descr_long": "FSC criterion for determining the low-pass limit(0.143-0.5){0.3}",
        "descr_placeholder": "low-pass FSC criterion(0.143-0.5){0.3}",
        "required": false
      },
      {
        "key": "eo",
        "keytype": "binary",
        "descr_short": "Gold-standard FSC for filtering and resolution estimation",
        "descr_long": "Gold-standard FSC for filtering and resolution estimation(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "weights3D",
        "keytype": "binary",
        "descr_short": "Spectral weighting",
        "descr_long": "Weighted particle contributions based on the median FRC between the particle and its corresponding reference(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "mask controls": [
      {
        "key": "msk",
        "keytype": "num",
        "descr_short": "Mask radius",
        "descr_long": "Mask radius in pixels for application of a soft-edged circular mask to remove background noise",
        "descr_placeholder": "mask radius in pixels",
        "required": true
      },
      {
        "key": "inner",
        "keytype": "num",
        "descr_short": "Inner mask radius",
        "descr_long": "Inner mask radius for omitting unordered cores of particles with high radial symmetry, typically icosahedral viruses",
        "descr_placeholder": "inner mask radius in pixels",
        "required": false
      },
      {
        "key": "width",
        "keytype": "num",
        "descr_short": "Falloff of inner mask",
        "descr_long": "Number of cosine edge pixels of inner mask in pixels",
        "descr_placeholder": "# pixels cosine edge{10}",
        "required": false
      }
    ],
    "computer controls": [
      {
        "key": "nparts",
        "keytype": "num",
        "descr_short": "Number of parts",
        "descr_long": "Number of partitions for distrbuted memory execution. One part typically corresponds to one CPU socket in the distributed system. On a single-socket machine there may be speed benfits to dividing the jobs into a few (2-4) partitions, depending on memory capacity",
        "descr_placeholder": "divide job into # parts",
        "required": true
      },
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "cluster_cavgs": {
      "name": "cluster_cavgs",
      "descr_short": "Analysis of class averages with affinity propagation",
      "descr_long": "is a program for analyzing class averages with affinity propagation, in order to get a better understanding of the view distribution. The balance flag is used to apply a balancing restraint (on the class population). Adjust balance until you are satisfied with the shape of the histogram",
      "executable": "simple_exec"
    },
    "image input\/output": [
      {
        "key": "stk",
        "keytype": "file",
        "descr_short": "Stack of class averages",
        "descr_long": "Stack of class averages",
        "descr_placeholder": "e.g. cavgs.mrc",
        "required": true
      }
    ],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "mkdir",
        "keytype": "binary",
        "descr_short": "Make auto-named dir for output",
        "descr_long": "Make auto-named consequtively numbered dir for output(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [
      {
        "key": "balance",
        "keytype": "num",
        "descr_short": "Max population for balance restraint",
        "descr_long": "Max population for balance restraint",
        "descr_placeholder": "max # cluster members",
        "required": false
      },
      {
        "key": "objfun",
        "keytype": "binary",
        "descr_short": "Objective function",
        "descr_long": "Objective function(cc|ccres){cc}",
        "descr_placeholder": "(cc|ccres){cc}",
        "required": false,
        "options": [
          "cc",
          "ccres"
        ]
      }
    ],
    "filter controls": [
      {
        "key": "hp",
        "keytype": "num",
        "descr_short": "High-pass limit",
        "descr_long": "High-pass resolution limit",
        "descr_placeholder": "high-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "lp",
        "keytype": "num",
        "descr_short": "Low-pass limit",
        "descr_long": "Low-pass resolution limit",
        "descr_placeholder": "low-pass limit in Angstroms",
        "required": false
      }
    ],
    "mask controls": [
      {
        "key": "msk",
        "keytype": "num",
        "descr_short": "Mask radius",
        "descr_long": "Mask radius in pixels for application of a soft-edged circular mask to remove background noise",
        "descr_placeholder": "mask radius in pixels",
        "required": true
      }
    ],
    "computer controls": [
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "convert": {
      "name": "convert",
      "descr_short": "Convert between SPIDER and MRC formats",
      "descr_long": "is a program for converting between SPIDER and MRC formats",
      "executable": "simple_exec"
    },
    "image input\/output": [
      {
        "key": "outvol",
        "keytype": "file",
        "descr_short": "Output volume name",
        "descr_long": "Output volume name",
        "descr_placeholder": "e.g. outvol.mrc",
        "required": false
      },
      {
        "key": "outstk",
        "keytype": "file",
        "descr_short": "Output stack name",
        "descr_long": "Output images stack name",
        "descr_placeholder": "e.g. outstk.mrc",
        "required": false
      }
    ],
    "parameter input\/output": [],
    "alternative inputs": [
      {
        "key": "vol1",
        "keytype": "file",
        "descr_short": "Volume",
        "descr_long": "Volume to convert",
        "descr_placeholder": "input volume e.g. vol.spi",
        "required": false
      },
      {
        "key": "stk",
        "keytype": "file",
        "descr_short": "Stack",
        "descr_long": "Stack to convert",
        "descr_placeholder": "input stack e.g. imgs.spi",
        "required": false
      }
    ],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": []
  },
  {
    "ctf_estimate": {
      "name": "ctf_estimate",
      "descr_short": "CTF parameter fitting",
      "descr_long": "is a distributed SIMPLE workflow for CTF parameter fitting",
      "executable": "simple_distr_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "pspecsz",
        "keytype": "num",
        "descr_short": "Size of power spectrum",
        "descr_long": "Size of power spectrum in pixels",
        "descr_placeholder": "in pixels",
        "required": false
      }
    ],
    "alternative inputs": [],
    "search controls": [
      {
        "key": "dfmin",
        "keytype": "num",
        "descr_short": "Expected minimum defocus",
        "descr_long": "Expected minimum defocus in microns{0.5}",
        "descr_placeholder": "in microns{0.5}",
        "required": false
      },
      {
        "key": "dfmax",
        "keytype": "num",
        "descr_short": "Expected maximum defocus",
        "descr_long": "Expected minimum defocus in microns{5.0}",
        "descr_placeholder": "in microns{5.0}",
        "required": false
      },
      {
        "key": "dfstep",
        "keytype": "num",
        "descr_short": "Defocus step size",
        "descr_long": "Defocus step size for grid search in microns{0.05}",
        "descr_placeholder": "in microns{0.05}",
        "required": false
      },
      {
        "key": "astigtol",
        "keytype": "num",
        "descr_short": "Expected astigmatism",
        "descr_long": "expected (tolerated) astigmatism(in microns){0.05}",
        "descr_placeholder": "in microns",
        "required": false
      }
    ],
    "filter controls": [
      {
        "key": "lp",
        "keytype": "num",
        "descr_short": "Low-pass limit",
        "descr_long": "Low-pass resolution limit",
        "descr_placeholder": "low-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "hp",
        "keytype": "num",
        "descr_short": "High-pass limit",
        "descr_long": "High-pass resolution limit",
        "descr_placeholder": "high-pass limit in Angstroms",
        "required": false
      }
    ],
    "mask controls": [],
    "computer controls": [
      {
        "key": "nparts",
        "keytype": "num",
        "descr_short": "Number of parts",
        "descr_long": "Number of partitions for distrbuted memory execution. One part typically corresponds to one CPU socket in the distributed system. On a single-socket machine there may be speed benfits to dividing the jobs into a few (2-4) partitions, depending on memory capacity",
        "descr_placeholder": "divide job into # parts",
        "required": true
      },
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "ctfops": {
      "name": "ctfops",
      "descr_short": "Apply CTF to stacked images",
      "descr_long": "is a program for applying CTF to stacked images",
      "executable": "simple_exec"
    },
    "image input\/output": [
      {
        "key": "stk",
        "keytype": "file",
        "descr_short": "Particle image stack",
        "descr_long": "Particle image stack",
        "descr_placeholder": "xxx.mrc file with particles",
        "required": false
      },
      {
        "key": "outstk",
        "keytype": "file",
        "descr_short": "Output stack name",
        "descr_long": "Output images stack name",
        "descr_placeholder": "e.g. outstk.mrc",
        "required": false
      }
    ],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "neg",
        "keytype": "binary",
        "descr_short": "Invert contrast",
        "descr_long": "Invert contrast(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "oritab",
        "keytype": "file",
        "descr_short": "Orientation and CTF parameter file",
        "descr_long": "Orientation and CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": false
      },
      {
        "key": "deftab",
        "keytype": "file",
        "descr_short": "CTF parameter file",
        "descr_long": "CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format with dfx, dfy and angast values",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": false
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [
      {
        "key": "ctf",
        "keytype": "multi",
        "descr_short": "CTF status",
        "descr_long": "Contrast Transfer Function status; flip indicates that images have been phase-flipped prior(yes|no|flip){no}",
        "descr_placeholder": "(yes|no|flip){no}",
        "required": true,
        "options": [
          "yes",
          "no",
          "flip"
        ]
      },
      {
        "key": "bfac",
        "keytype": "num",
        "descr_short": "CTF B-factor",
        "descr_long": "B-factor of CTF in Angstroms^2",
        "descr_placeholder": "B-factor in Angstroms^2(>0.0){0}",
        "required": false
      }
    ],
    "mask controls": [],
    "computer controls": [
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "extract": {
      "name": "extract",
      "descr_short": "Extract particle images from integrated movies",
      "descr_long": "is a program for extracting particle images from integrated movies",
      "executable": "simple_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "box",
        "keytype": "num",
        "descr_short": "Box size",
        "descr_long": "Square box size in pixels",
        "descr_placeholder": "in pixels",
        "required": false
      },
      {
        "key": "pcontrast",
        "keytype": "binary",
        "descr_short": "Input particle contrast",
        "descr_long": "Input particle contrast(black|white){black}",
        "descr_placeholder": "(black|white){black}",
        "required": false,
        "options": [
          "black",
          "white"
        ]
      },
      {
        "key": "outside",
        "keytype": "binary",
        "descr_short": "Extract outside boundaries",
        "descr_long": "Extract boxes outside the micrograph boundaries(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": []
  },
  {
    "filter": {
      "name": "filter",
      "descr_short": "Filter stack\/volume",
      "descr_long": "is a program for filtering stack\/volume",
      "executable": "simple_exec"
    },
    "image input\/output": [
      {
        "key": "outstk",
        "keytype": "file",
        "descr_short": "Output stack name",
        "descr_long": "Output images stack name",
        "descr_placeholder": "e.g. outstk.mrc",
        "required": false
      },
      {
        "key": "outvol",
        "keytype": "file",
        "descr_short": "Output volume name",
        "descr_long": "Output volume name",
        "descr_placeholder": "e.g. outvol.mrc",
        "required": false
      }
    ],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      }
    ],
    "alternative inputs": [
      {
        "key": "stk",
        "keytype": "file",
        "descr_short": "Stack to filter",
        "descr_long": "Stack of images to filter",
        "descr_placeholder": "e.g. refs.mrc",
        "required": false
      },
      {
        "key": "vol1",
        "keytype": "file",
        "descr_short": "Volume to filter",
        "descr_long": "Volume to filter",
        "descr_placeholder": "e.g. vol.mrc file",
        "required": false
      }
    ],
    "search controls": [],
    "filter controls": [
      {
        "key": "lp",
        "keytype": "num",
        "descr_short": "Low-pass limit",
        "descr_long": "Low-pass resolution limit",
        "descr_placeholder": "low-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "hp",
        "keytype": "num",
        "descr_short": "High-pass limit",
        "descr_long": "High-pass resolution limit",
        "descr_placeholder": "high-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "phrand",
        "keytype": "binary",
        "descr_short": "Phase randomization",
        "descr_long": "Fouirer phase randomization by white noise substitution(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "bfac",
        "keytype": "num",
        "descr_short": "B-factor of Gaussian low-\/high-pass filter",
        "descr_long": "B-factor of Gaussian low-\/high-pass filter in Angstroms^2",
        "descr_placeholder": "B-factor in Angstroms^2{0}",
        "required": false
      },
      {
        "key": "winsz",
        "keytype": "num",
        "descr_short": "Half-window size",
        "descr_long": "Half-window size(in pixels)",
        "descr_placeholder": "winsz in pixels",
        "required": false
      },
      {
        "key": "width",
        "keytype": "num",
        "descr_short": "Cosine low-pass filter falloff",
        "descr_long": "Number of cosine edge pixels of Fourier low-pass filter in pixels",
        "descr_placeholder": "# pixels cosine edge",
        "required": false
      },
      {
        "key": "real_filter",
        "keytype": "binary",
        "descr_short": "Real-space filter",
        "descr_long": "Real-space filter(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "frcs",
        "keytype": "str",
        "descr_short": "Projection FRCs file",
        "descr_long": "Projection FRCs file",
        "descr_placeholder": "e.g. frcs.bin",
        "required": false
      }
    ],
    "mask controls": [],
    "computer controls": [
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "fsc": {
      "name": "fsc",
      "descr_short": "Calculate FSC between the two input volumes",
      "descr_long": "is a program for calculating the FSC between the two input volumes",
      "executable": "simple_exec"
    },
    "image input\/output": [
      {
        "key": "vol1",
        "keytype": "file",
        "descr_short": "Odd volume",
        "descr_long": "Odd volume",
        "descr_placeholder": "vol1.mrc file",
        "required": true
      },
      {
        "key": "vol2",
        "keytype": "file",
        "descr_short": "Even volume",
        "descr_long": "Even volume",
        "descr_placeholder": "vol2.mrc file",
        "required": true
      }
    ],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [
      {
        "key": "msk",
        "keytype": "num",
        "descr_short": "Mask radius",
        "descr_long": "Mask radius in pixels for application of a soft-edged circular mask to remove background noise",
        "descr_placeholder": "mask radius in pixels",
        "required": true
      },
      {
        "key": "mskfile",
        "keytype": "file",
        "descr_short": "Input mask file",
        "descr_long": "Input mask file to apply to reference volume(s) before projection",
        "descr_placeholder": "e.g. automask.mrc from postprocess",
        "required": false
      }
    ],
    "computer controls": [
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "info_image": {
      "name": "info_image",
      "descr_short": "Print header information",
      "descr_long": "is a program for printing header information in MRC and SPIDER stacks and volumes",
      "executable": "simple_exec"
    },
    "image input\/output": [
      {
        "key": "fname",
        "keytype": "file",
        "descr_short": "Name of image file",
        "descr_long": "Name of image file",
        "descr_placeholder": "xxx.mrc file",
        "required": true
      }
    ],
    "parameter input\/output": [
      {
        "key": "stats",
        "keytype": "binary",
        "descr_short": "Output statistics",
        "descr_long": "Output statistics(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "vis",
        "keytype": "binary",
        "descr_short": "Visualize image",
        "descr_long": "Visualize image with gnuplot(yes|no){yes}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": []
  },
  {
    "info_stktab": {
      "name": "info_stktab",
      "descr_short": "Print stktab information",
      "descr_long": "is a program for printing information about stktab (list of stacks)",
      "executable": "simple_exec"
    },
    "image input\/output": [
      {
        "key": "stktab",
        "keytype": "file",
        "descr_short": "List of per-micrograph particle stacks",
        "descr_long": "List of per-micrograph particle stacks",
        "descr_placeholder": "stktab.txt file containing file names",
        "required": true
      }
    ],
    "parameter input\/output": [],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": []
  },
  {
    "initial_3Dmodel": {
      "name": "initial_3Dmodel",
      "descr_short": "3D ab initio model generation from class averages",
      "descr_long": "is a distributed workflow for generating an initial 3D model from class' averages obtained with cluster2D",
      "executable": "simple_distr_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "mkdir",
        "keytype": "binary",
        "descr_short": "Make auto-named dir for output",
        "descr_long": "Make auto-named consequtively numbered dir for output(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [
      {
        "key": "nspace",
        "keytype": "num",
        "descr_short": "Number of projection directions",
        "descr_long": "Number of projection directions used",
        "descr_placeholder": "# projections",
        "required": false
      },
      {
        "key": "center",
        "keytype": "binary",
        "descr_short": "Center reference volume(s)",
        "descr_long": "Center reference volume(s) by their center of gravity and map shifts back to the particles(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "maxits",
        "keytype": "num",
        "descr_short": "Max iterations",
        "descr_long": "Maximum number of iterations",
        "descr_placeholder": "Max # iterations",
        "required": false
      },
      {
        "key": "update_frac",
        "keytype": "num",
        "descr_short": "Fractional update per iteration",
        "descr_long": "Fraction of particles to update per iteration in incremental learning scheme for accelerated convergence rate(0.1-0.5){1.}",
        "descr_placeholder": "update this fraction per iter(0.1-0.5){1.0}",
        "required": false
      },
      {
        "key": "frac",
        "keytype": "num",
        "descr_short": "Fraction of particles to include",
        "descr_long": "Fraction of particles to include based on spectral score (median of FRC between reference and particle)",
        "descr_placeholder": "fraction of particles(0.1-0.9){1.0}",
        "required": false
      },
      {
        "key": "pgrp",
        "keytype": "str",
        "descr_short": "Point-group symmetry",
        "descr_long": "Point-group symmetry of particle(cn|dn|t|o|i){c1}",
        "descr_placeholder": "point-group(cn|dn|t|o|i){c1}",
        "required": true
      },
      {
        "key": "pgrp_known",
        "keytype": "binary",
        "descr_short": "Point-group applied directly",
        "descr_long": "Point-group applied direclty rather than first doing a reconstruction in c1 and searching for the symmerty axis(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "objfun",
        "keytype": "binary",
        "descr_short": "Objective function",
        "descr_long": "Objective function(cc|ccres){cc}",
        "descr_placeholder": "(cc|ccres){cc}",
        "required": false,
        "options": [
          "cc",
          "ccres"
        ]
      },
      {
        "key": "autoscale",
        "keytype": "binary",
        "descr_short": "Automatic down-scaling",
        "descr_long": "Automatic down-scaling of images for accelerated convergence rate. Final low-pass limit controls the degree of down-scaling(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "nrestarts",
        "keytype": "num",
        "descr_short": "Number of restarts",
        "descr_long": "Number of program restarts to execute{1}",
        "descr_placeholder": "# restarts{1}",
        "required": false
      }
    ],
    "filter controls": [
      {
        "key": "hp",
        "keytype": "num",
        "descr_short": "High-pass limit",
        "descr_long": "High-pass resolution limit",
        "descr_placeholder": "high-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "lpstart",
        "keytype": "num",
        "descr_short": "Initial low-pass limit",
        "descr_long": "Initial low-pass limit",
        "descr_placeholder": "low-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "lpstop",
        "keytype": "num",
        "descr_short": "Final low-pass limit",
        "descr_long": "Final low-pass limit",
        "descr_placeholder": "low-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "eo",
        "keytype": "binary",
        "descr_short": "Gold-standard FSC for filtering and resolution estimation",
        "descr_long": "Gold-standard FSC for filtering and resolution estimation(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "shellw",
        "keytype": "binary",
        "descr_short": "B-factor weighted reconstruction",
        "descr_long": "Whether to perform B-factor weighted reconstruction(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "mask controls": [
      {
        "key": "msk",
        "keytype": "num",
        "descr_short": "Mask radius",
        "descr_long": "Mask radius in pixels for application of a soft-edged circular mask to remove background noise",
        "descr_placeholder": "mask radius in pixels",
        "required": true
      },
      {
        "key": "inner",
        "keytype": "num",
        "descr_short": "Inner mask radius",
        "descr_long": "Inner mask radius for omitting unordered cores of particles with high radial symmetry, typically icosahedral viruses",
        "descr_placeholder": "inner mask radius in pixels",
        "required": false
      },
      {
        "key": "width",
        "keytype": "num",
        "descr_short": "Falloff of inner mask",
        "descr_long": "Number of cosine edge pixels of inner mask in pixels",
        "descr_placeholder": "# pixels cosine edge",
        "required": false
      }
    ],
    "computer controls": [
      {
        "key": "nparts",
        "keytype": "num",
        "descr_short": "Number of parts",
        "descr_long": "Number of partitions for distrbuted memory execution. One part typically corresponds to one CPU socket in the distributed system. On a single-socket machine there may be speed benfits to dividing the jobs into a few (2-4) partitions, depending on memory capacity",
        "descr_placeholder": "divide job into # parts",
        "required": true
      },
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "import_boxes": {
      "name": "import_boxes",
      "descr_short": "Import EMAN box coordinates to SIMPLE project",
      "descr_long": "is a program for importing EMAN1.9 box coordinates to the project. The *box (text) files should be listed in boxtab",
      "executable": "simple_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "boxtab",
        "keytype": "file",
        "descr_short": "List of box files",
        "descr_long": "List of per-micrograph box files (*.box) to import",
        "descr_placeholder": "e.g. boxes.txt",
        "required": true
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": []
  },
  {
    "import_cavgs": {
      "name": "import_cavgs",
      "descr_short": "Import class averages to SIMPLE project",
      "descr_long": "is a program for importing class averages movies to the project",
      "executable": "simple_exec"
    },
    "image input\/output": [
      {
        "key": "stk",
        "keytype": "file",
        "descr_short": "Stack of class averages",
        "descr_long": "Stack of class average images to import",
        "descr_placeholder": "e.g. cavgs.mrcs",
        "required": true
      }
    ],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": []
  },
  {
    "import_movies": {
      "name": "import_movies",
      "descr_short": "Import movies to SIMPLE project",
      "descr_long": "is a program for importing DDD movies to the project. The movies can be located in any read-only location 'accessible to the project. If the movies contain only a single frame, they will be interpreted as motion-corrected 'and integrated. Box files (in EMAN format) can be imported along with the movies",
      "executable": "simple_exec"
    },
    "image input\/output": [
      {
        "key": "filetab",
        "keytype": "file",
        "descr_short": "List of movie files",
        "descr_long": "List of movie files (*.mrcs) to import",
        "descr_placeholder": "e.g. movies.txt",
        "required": true
      }
    ],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "kv",
        "keytype": "num",
        "descr_short": "Acceleration voltage",
        "descr_long": "Acceleration voltage in kV",
        "descr_placeholder": "in kV",
        "required": true
      },
      {
        "key": "cs",
        "keytype": "num",
        "descr_short": "Spherical aberration",
        "descr_long": "Spherical aberration constant(in mm){2.7}",
        "descr_placeholder": "in mm{2.7}",
        "required": true
      },
      {
        "key": "fraca",
        "keytype": "num",
        "descr_short": "Amplitude contrast fraction",
        "descr_long": "Fraction of amplitude contrast used for fitting CTF{0.1}",
        "descr_placeholder": "fraction{0.1}",
        "required": true
      },
      {
        "key": "ctf",
        "keytype": "multi",
        "descr_short": "CTF status",
        "descr_long": "Contrast Transfer Function status; flip indicates that images have been phase-flipped prior(yes|no|flip){no}",
        "descr_placeholder": "(yes|no|flip){no}",
        "required": true,
        "options": [
          "yes",
          "no",
          "flip"
        ]
      },
      {
        "key": "phaseplate",
        "keytype": "binary",
        "descr_short": "Phase-plate images",
        "descr_long": "Images obtained with Volta phase-plate(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "boxtab",
        "keytype": "file",
        "descr_short": "List of box files",
        "descr_long": "List of per-micrograph box files (*.box) to import",
        "descr_placeholder": "e.g. boxes.txt",
        "required": false
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": []
  },
  {
    "import_particles": {
      "name": "import_particles",
      "descr_short": "Import particles to SIMPLE project",
      "descr_long": "is a program for importing extracted particle images to the project",
      "executable": "simple_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "kv",
        "keytype": "num",
        "descr_short": "Acceleration voltage",
        "descr_long": "Acceleration voltage in kV",
        "descr_placeholder": "in kV",
        "required": false
      },
      {
        "key": "cs",
        "keytype": "num",
        "descr_short": "Spherical aberration",
        "descr_long": "Spherical aberration constant(in mm){2.7}",
        "descr_placeholder": "in mm{2.7}",
        "required": false
      },
      {
        "key": "fraca",
        "keytype": "num",
        "descr_short": "Amplitude contrast fraction",
        "descr_long": "Fraction of amplitude contrast used for fitting CTF{0.1}",
        "descr_placeholder": "fraction{0.1}",
        "required": false
      },
      {
        "key": "ctf",
        "keytype": "multi",
        "descr_short": "CTF status",
        "descr_long": "Contrast Transfer Function status; flip indicates that images have been phase-flipped prior(yes|no|flip){no}",
        "descr_placeholder": "(yes|no|flip){no}",
        "required": true,
        "options": [
          "yes",
          "no",
          "flip"
        ]
      },
      {
        "key": "phaseplate",
        "keytype": "binary",
        "descr_short": "Phase-plate images",
        "descr_long": "Images obtained with Volta phase-plate(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "oritab",
        "keytype": "file",
        "descr_short": "Orientation and CTF parameter file",
        "descr_long": "Orientation and CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": false
      },
      {
        "key": "deftab",
        "keytype": "file",
        "descr_short": "CTF parameter file",
        "descr_long": "CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format with dfx, dfy and angast values",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": false
      },
      {
        "key": "plaintexttab",
        "keytype": "file",
        "descr_short": "Plain text file of input parameters",
        "descr_long": "Plain text file of tabulated per-particle input parameters: dfx, dfy, angast, phshift",
        "descr_placeholder": "e.g. params.txt",
        "required": false
      },
      {
        "key": "dfunit",
        "keytype": "binary",
        "descr_short": "Underfocus unit",
        "descr_long": "Underfocus unit(A|microns){microns}",
        "descr_placeholder": "(A|microns){microns}",
        "required": false,
        "options": [
          "A",
          "microns"
        ]
      },
      {
        "key": "angast",
        "keytype": "binary",
        "descr_short": "Angle of astigmatism unit",
        "descr_long": "Angle of astigmatism unit(radians|degrees){degrees}",
        "descr_placeholder": "(radians|degrees){degrees}",
        "required": false,
        "options": [
          "radians",
          "degrees"
        ]
      },
      {
        "key": "phshiftunit",
        "keytype": "binary",
        "descr_short": "Phase-shift unit",
        "descr_long": "Phase-shift unit(radians|degrees){degrees}",
        "descr_placeholder": "(radians|degrees){degrees}",
        "required": false,
        "options": [
          "radians",
          "degrees"
        ]
      }
    ],
    "alternative inputs": [
      {
        "key": "stktab",
        "keytype": "file",
        "descr_short": "List of per-micrograph particle stacks",
        "descr_long": "List of per-micrograph particle image stacks to import",
        "descr_placeholder": "per-micrograph stack list; e.g. stktab.txt",
        "required": false
      },
      {
        "key": "stk",
        "keytype": "file",
        "descr_short": "Stack of particles",
        "descr_long": "Stack of particle images to import",
        "descr_placeholder": "e.g. stk.mrcs",
        "required": false
      }
    ],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": []
  },
  {
    "make_cavgs": {
      "name": "make_cavgs",
      "descr_short": "Make class averages",
      "descr_long": "is a distributed workflow for generating class averages or initial random referencesfor cluster2D execution",
      "executable": "simple_distr_exec"
    },
    "image input\/output": [
      {
        "key": "refs",
        "keytype": "file",
        "descr_short": "Output 2D references",
        "descr_long": "Output 2D references",
        "descr_placeholder": "xxx.mrc file with references",
        "required": false
      }
    ],
    "parameter input\/output": [
      {
        "key": "ncls",
        "keytype": "num",
        "descr_short": "Number of 2D clusters",
        "descr_long": "Number of groups to sort the particles into prior to averaging to create 2D class averages with improved SNR",
        "descr_placeholder": "# 2D clusters",
        "required": false
      },
      {
        "key": "mul",
        "keytype": "num",
        "descr_short": "Shift multiplication factor",
        "descr_long": "Origin shift multiplication factor{1}",
        "descr_placeholder": "1\/scale in pixels{1}",
        "required": false
      },
      {
        "key": "weights2D",
        "keytype": "binary",
        "descr_short": "Spectral weighting",
        "descr_long": "Weighted particle contributions based on the median FRC between the particle and its corresponding reference(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "remap_cls",
        "keytype": "binary",
        "descr_short": "Whether to remap 2D clusters",
        "descr_long": "Whether to remap the number of 2D clusters(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "mkdir",
        "keytype": "binary",
        "descr_short": "Make auto-named dir for output",
        "descr_long": "Make auto-named consequtively numbered dir for output(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [
      {
        "key": "shellw",
        "keytype": "binary",
        "descr_short": "B-factor weighted reconstruction",
        "descr_long": "Whether to perform B-factor weighted reconstruction(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "mask controls": [],
    "computer controls": [
      {
        "key": "nparts",
        "keytype": "num",
        "descr_short": "Number of parts",
        "descr_long": "Number of partitions for distrbuted memory execution. One part typically corresponds to one CPU socket in the distributed system. On a single-socket machine there may be speed benfits to dividing the jobs into a few (2-4) partitions, depending on memory capacity",
        "descr_placeholder": "divide job into # parts",
        "required": true
      },
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "make_oris": {
      "name": "make_oris",
      "descr_short": "Make orientations",
      "descr_long": "is a program for making SIMPLE orientation files. Make_oris generates random Euler angles e1.in.[0,360], e2.in.[0,180] 'and e3.in.[0,360] and random origin shifts x.in.[-trs,yrs] and y.in.[-trs,yrs]. If ndiscrete is set to an integer number '> 0, the shifts x.in.[-trs,yrs] and y.in.[-trs,yrs]. If ndiscrete is set to an integer number > 0, the orientations 'produced are randomly sampled from the set of ndiscrete quasi-even projection directions, and the in-plane parameters 'are assigned randomly. If even=yes, then all nptcls orientations are assigned quasi-even projection directions and 'random in-plane parameters. If nstates is set to some integer number > 0, then states are assigned randomly .in.[1,nstates]",
      "executable": "simple_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "nptcls",
        "keytype": "num",
        "descr_short": "Number of per-particle orientations",
        "descr_long": "Number of per-particle orientations to produce",
        "descr_placeholder": "# per-ptcl oris",
        "required": true
      },
      {
        "key": "ncls",
        "keytype": "num",
        "descr_short": "Number of random class labels",
        "descr_long": "Number of random class labels to produce",
        "descr_placeholder": "# classes",
        "required": false
      },
      {
        "key": "outfile",
        "keytype": "file",
        "descr_short": "Output orientation and CTF parameter file",
        "descr_long": "Output Orientation and CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": false
      },
      {
        "key": "nstates",
        "keytype": "num",
        "descr_short": "Number of random state labels",
        "descr_long": "Number of random state labels to produce",
        "descr_placeholder": "# states",
        "required": false
      },
      {
        "key": "pgrp",
        "keytype": "str",
        "descr_short": "Point-group symmetry",
        "descr_long": "Point-group symmetry of particle(cn|dn|t|o|i){c1}",
        "descr_placeholder": "point-group(cn|dn|t|o|i){c1}",
        "required": false
      },
      {
        "key": "sherr",
        "keytype": "num",
        "descr_short": "Shift error half-width",
        "descr_long": "Uniform rotational origin shift error half-width(in pixels)",
        "descr_placeholder": "shift error in pixels",
        "required": false
      },
      {
        "key": "angerr",
        "keytype": "num",
        "descr_short": "Rotation angle error half-width",
        "descr_long": "Uniform rotation angle shift error half-width(in degrees)",
        "descr_placeholder": "rotation error in degrees",
        "required": false
      },
      {
        "key": "even",
        "keytype": "binary",
        "descr_short": "Generate even projections",
        "descr_long": "Generate quasi-even projection directions(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "ndiscrete",
        "keytype": "num",
        "descr_short": "Number of discrete projection directions",
        "descr_long": "Number of discrete projection directions to sample from",
        "descr_placeholder": "# discrete projs",
        "required": false
      },
      {
        "key": "oritype",
        "keytype": "multi",
        "descr_short": "Oritype segment in project",
        "descr_long": "Oritype segment in project(ptcl2D|ptcl3D|cls3D){ptcl3D}",
        "descr_placeholder": "(ptcl2D|ptcl3D|cls3D){ptcl3D}",
        "required": false,
        "options": [
          "ptcl2D",
          "ptcl3D",
          "cls3D"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": [
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "make_pickrefs": {
      "name": "make_pickrefs",
      "descr_short": "Generate picking references",
      "descr_long": "is a program for generating references for template-based particle picking",
      "executable": "simple_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "pcontrast",
        "keytype": "binary",
        "descr_short": "Input particle contrast",
        "descr_long": "Input particle contrast(black|white){black}",
        "descr_placeholder": "(black|white){black}",
        "required": false,
        "options": [
          "black",
          "white"
        ]
      },
      {
        "key": "mkdir",
        "keytype": "binary",
        "descr_short": "Make auto-named dir for output",
        "descr_long": "Make auto-named consequtively numbered dir for output(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [
      {
        "key": "stk",
        "keytype": "file",
        "descr_short": "Stack of 2D picking references",
        "descr_long": "Stack of 2D picking references",
        "descr_placeholder": "e.g. refs.mrc",
        "required": false
      },
      {
        "key": "vol1",
        "keytype": "file",
        "descr_short": "Volume",
        "descr_long": "Volume to re-project",
        "descr_placeholder": "vol.mrc file",
        "required": false
      }
    ],
    "search controls": [
      {
        "key": "pgrp",
        "keytype": "str",
        "descr_short": "Point-group symmetry",
        "descr_long": "Point-group symmetry of particle(cn|dn|t|o|i){c1}",
        "descr_placeholder": "point-group(cn|dn|t|o|i){c1}",
        "required": true
      }
    ],
    "filter controls": [],
    "mask controls": [],
    "computer controls": [
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "mask": {
      "name": "mask",
      "descr_short": "Mask images\/volumes",
      "descr_long": "is a program for masking of 2D images and volumes. If you want to mask your images with a spherical mask with a soft  falloff, set msk to the radius in pixels",
      "executable": "simple_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "oritab",
        "keytype": "file",
        "descr_short": "Orientation and CTF parameter file",
        "descr_long": "Orientation and CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": false
      },
      {
        "key": "outfile",
        "keytype": "file",
        "descr_short": "Output orientation and CTF parameter file",
        "descr_long": "Output Orientation and CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": false
      }
    ],
    "alternative inputs": [
      {
        "key": "stk",
        "keytype": "file",
        "descr_short": "Particle image stack",
        "descr_long": "Particle image stack",
        "descr_placeholder": "xxx.mrc file with particles",
        "required": false
      },
      {
        "key": "vol1",
        "keytype": "file",
        "descr_short": "Volume",
        "descr_long": "Volume to mask",
        "descr_placeholder": "input volume e.g. vol.mrc",
        "required": false
      }
    ],
    "search controls": [
      {
        "key": "center",
        "keytype": "binary",
        "descr_short": "Center input volume",
        "descr_long": "Center input volume by its center of gravity(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "filter controls": [
      {
        "key": "amsklp",
        "keytype": "num",
        "descr_short": "Low-pass limit for envelope mask generation",
        "descr_long": "Low-pass limit for envelope mask generation in Angstroms",
        "descr_placeholder": "low-pass limit in Angstroms",
        "required": false
      }
    ],
    "mask controls": [
      {
        "key": "msk",
        "keytype": "num",
        "descr_short": "Mask radius",
        "descr_long": "Mask radius in pixels for application of a soft-edged circular mask to remove background noise",
        "descr_placeholder": "mask radius in pixels",
        "required": false
      },
      {
        "key": "inner",
        "keytype": "num",
        "descr_short": "Inner mask radius",
        "descr_long": "Inner mask radius for omitting unordered cores of particles with high radial symmetry, typically icosahedral viruses",
        "descr_placeholder": "inner mask radius in pixels",
        "required": false
      },
      {
        "key": "outer",
        "keytype": "num",
        "descr_short": "Outer mask radius",
        "descr_long": "Outer mask radius for omitting unordered cores of particles with high radial symmetry, typically icosahedral viruses",
        "descr_placeholder": "outer mask radius in pixels",
        "required": false
      },
      {
        "key": "mskfile",
        "keytype": "file",
        "descr_short": "Input mask file",
        "descr_long": "Input mask file to apply to reference volume(s) before projection",
        "descr_placeholder": "e.g. automask.mrc from postprocess",
        "required": false
      },
      {
        "key": "msktype",
        "keytype": "binary",
        "descr_short": "Mask type",
        "descr_long": "Type of mask to use(soft|hard){soft}",
        "descr_placeholder": "(soft|hard){soft}",
        "required": false,
        "options": [
          "soft",
          "hard"
        ]
      },
      {
        "key": "mw",
        "keytype": "num",
        "descr_short": "Molecular weight",
        "descr_long": "Molecular weight in kDa",
        "descr_placeholder": "in kDa",
        "required": false
      },
      {
        "key": "width",
        "keytype": "num",
        "descr_short": "Inner mask falloff",
        "descr_long": "Number of cosine edge pixels of inner mask in pixels",
        "descr_placeholder": "# pixels cosine edge",
        "required": false
      },
      {
        "key": "edge",
        "keytype": "num",
        "descr_short": "Envelope mask soft edge",
        "descr_long": "Cosine edge size for softening molecular envelope in pixels",
        "descr_placeholder": "# pixels cosine edge",
        "required": false
      },
      {
        "key": "taper_edges",
        "keytype": "binary",
        "descr_short": "Taper edges",
        "descr_long": "Whether to taper the edges of image\/volume(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "pdbfile",
        "keytype": "file",
        "descr_short": "PDB for 3D envelope masking",
        "descr_long": "PDB file used to determine the mask",
        "descr_placeholder": "e.g. molecule.pdb",
        "required": false
      }
    ],
    "computer controls": [
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "motion_correct": {
      "name": "motion_correct",
      "descr_short": "Motion correction of movies",
      "descr_long": "is a distributed workflow for motion correction of movies based on the same principal strategy as Grigorieffs program. There are two important differences: automatic weighting of the frames using a correlation-based M-estimator and continuous optimisation of the shift parameters. If dose_rate and exp_time are given the individual frames will be low-pass filtered accordingly (dose-weighting strategy). If scale is given, the movie will be Fourier cropped according to the down-scaling factor (for super-resolution movies). If nframesgrp is given the frames will be pre-averaged in the given chunk size (Falcon 3 movies). If fromf\/tof are given, a contiguous subset of frames will be averaged without any dose-weighting applied",
      "executable": "simple_distr_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "dose_rate",
        "keytype": "num",
        "descr_short": "Dose rate",
        "descr_long": "Dose rate in e\/Ang^2\/sec",
        "descr_placeholder": "in e\/Ang^2\/sec",
        "required": false
      },
      {
        "key": "exp_time",
        "keytype": "num",
        "descr_short": "Exposure time",
        "descr_long": "Exposure time in seconds",
        "descr_placeholder": "in seconds",
        "required": false
      },
      {
        "key": "scale",
        "keytype": "num",
        "descr_short": "Down-scaling factor",
        "descr_long": "Down-scaling factor to apply to the movies",
        "descr_placeholder": "(0-1)",
        "required": false
      },
      {
        "key": "fbody",
        "keytype": "string",
        "descr_short": "Template output micrograph name",
        "descr_long": "Template output integrated movie name",
        "descr_placeholder": "e.g. mic_",
        "required": false
      },
      {
        "key": "pspecsz",
        "keytype": "num",
        "descr_short": "Size of power spectrum",
        "descr_long": "Size of power spectrum in pixels",
        "descr_placeholder": "in pixels",
        "required": false
      }
    ],
    "alternative inputs": [],
    "search controls": [
      {
        "key": "trs",
        "keytype": "num",
        "descr_short": "Maximum translational shift",
        "descr_long": "Maximum half-width for bund-constrained search of rotational origin shifts",
        "descr_placeholder": "max shift per iteration in pixels{5}",
        "required": false
      },
      {
        "key": "startit",
        "keytype": "num",
        "descr_short": "First iteration",
        "descr_long": "Index of first iteration when starting from a previous run",
        "descr_placeholder": "start iterations from here",
        "required": false
      },
      {
        "key": "nframesgrp",
        "keytype": "num",
        "descr_short": "Number of contigous frames to sum",
        "descr_long": "# contigous frames to sum before motion_correct(Falcon 3)",
        "descr_placeholder": "{0}",
        "required": false
      },
      {
        "key": "fromf",
        "keytype": "num",
        "descr_short": "First frame to include in subsum",
        "descr_long": "First frame index to include in subsum",
        "descr_placeholder": "give index",
        "required": false
      },
      {
        "key": "tof",
        "keytype": "num",
        "descr_short": "Last frame to include in subsum",
        "descr_long": "Last frame index to include in subsum",
        "descr_placeholder": "give index",
        "required": false
      },
      {
        "key": "nsig",
        "keytype": "num",
        "descr_short": "Number of sigmas for outlier removal",
        "descr_long": "Number of standard deviations threshold for pixel outlier removal{6}",
        "descr_placeholder": "# standard deviations{6}",
        "required": false
      }
    ],
    "filter controls": [
      {
        "key": "lpstart",
        "keytype": "num",
        "descr_short": "Initial low-pass limit",
        "descr_long": "Low-pass limit to be applied in the first iterations of movie alignment (in Angstroms)",
        "descr_placeholder": "in Angstroms",
        "required": false
      },
      {
        "key": "lpstop",
        "keytype": "num",
        "descr_short": "Final low-pass limit",
        "descr_long": "Low-pass limit to be applied in the last iterations of movie alignment (in Angstroms)",
        "descr_placeholder": "in Angstroms",
        "required": false
      }
    ],
    "mask controls": [],
    "computer controls": [
      {
        "key": "nparts",
        "keytype": "num",
        "descr_short": "Number of parts",
        "descr_long": "Number of partitions for distrbuted memory execution. One part typically corresponds to one CPU socket in the distributed system. On a single-socket machine there may be speed benfits to dividing the jobs into a few (2-4) partitions, depending on memory capacity",
        "descr_placeholder": "divide job into # parts",
        "required": true
      },
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "motion_correct_tomo": {
      "name": "motion_correct_tomo",
      "descr_short": "Motion correction of tomography movies",
      "descr_long": "is a distributed workflow for motion correction of tomography movies based on the same principal strategy as Grigorieffs program. There are two important differences: automatic weighting of the frames using a correlation-based M-estimator and continuous optimisation of the shift parameters. If dose_rate and exp_time are given, the individual frames will be low-pass filtered accordingly (dose-weighting strategy). The exp_doc document should contain per line exp_time=X and dose_rate=Y. It is asssumed that the input list of movies (one per tilt) are ordered temporally. This is necessary for correct dose-weighting of tomographic tilt series. If scale is given, the movie will be Fourier cropped according to the down-scaling factor (for super-resolution movies). If nframesgrp is given the frames will be pre-averaged in the given chunk size (Falcon 3 movies)",
      "executable": "simple_distr_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "tomoseries",
        "keytype": "file",
        "descr_short": ".txt filetable of filetables of tomograms",
        "descr_long": ".txt filetable of filetables; each line referring to a .txt file listing all movies in the tilt-series",
        "descr_placeholder": "e.g. filetab_of_filetabs.txt",
        "required": true
      },
      {
        "key": "exp_doc",
        "keytype": "file",
        "descr_short": ".txt file with exp_time and dose_rate per tomogram",
        "descr_long": ".txt file with exp_time and dose_rate per tomogram",
        "descr_placeholder": "e.g. exp_doc.txt",
        "required": true
      },
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "dir",
        "keytype": "dir",
        "descr_short": "Output directory",
        "descr_long": "Output directory",
        "descr_placeholder": "e.g. motion_correct\/",
        "required": false
      },
      {
        "key": "scale",
        "keytype": "num",
        "descr_short": "Down-scaling factor",
        "descr_long": "Down-scaling factor to apply to the movies",
        "descr_placeholder": "(0-1)",
        "required": false
      },
      {
        "key": "pspecsz",
        "keytype": "num",
        "descr_short": "Size of power spectrum",
        "descr_long": "Size of power spectrum in pixels",
        "descr_placeholder": "in pixels",
        "required": false
      },
      {
        "key": "numlen",
        "keytype": "num",
        "descr_short": "Length of number string",
        "descr_long": "Length of number string",
        "descr_placeholder": "# characters",
        "required": false
      },
      {
        "key": "mkdir",
        "keytype": "binary",
        "descr_short": "Make auto-named dir for output",
        "descr_long": "Make auto-named consequtively numbered dir for output(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [
      {
        "key": "trs",
        "keytype": "num",
        "descr_short": "Maximum translational shift",
        "descr_long": "Maximum half-width for bund-constrained search of rotational origin shifts",
        "descr_placeholder": "max shift per iteration in pixels{5}",
        "required": false
      },
      {
        "key": "startit",
        "keytype": "num",
        "descr_short": "First iteration",
        "descr_long": "Index of first iteration when starting from a previous run",
        "descr_placeholder": "start iterations from here",
        "required": false
      },
      {
        "key": "nframesgrp",
        "keytype": "num",
        "descr_short": "Number of contigous frames to sum",
        "descr_long": "# contigous frames to sum before motion_correct(Falcon 3)",
        "descr_placeholder": "{0}",
        "required": false
      },
      {
        "key": "nsig",
        "keytype": "num",
        "descr_short": "Number of sigmas for outlier removal",
        "descr_long": "Number of standard deviations threshold for pixel outlier removal{6}",
        "descr_placeholder": "# standard deviations{6}",
        "required": false
      }
    ],
    "filter controls": [
      {
        "key": "lpstart",
        "keytype": "num",
        "descr_short": "Initial low-pass limit",
        "descr_long": "Low-pass limit to be applied in the first iterations of movie alignment (in Angstroms)",
        "descr_placeholder": "in Angstroms",
        "required": false
      },
      {
        "key": "lpstop",
        "keytype": "num",
        "descr_short": "Final low-pass limit",
        "descr_long": "Low-pass limit to be applied in the last iterations of movie alignment (in Angstroms)",
        "descr_placeholder": "in Angstroms",
        "required": false
      },
      {
        "key": "kv",
        "keytype": "num",
        "descr_short": "Acceleration voltage",
        "descr_long": "Acceleration voltage in kV",
        "descr_placeholder": "in kV",
        "required": false
      }
    ],
    "mask controls": [],
    "computer controls": [
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "new_project": {
      "name": "new_project",
      "descr_short": "Create a new project",
      "descr_long": "is a program for creating a new project. SIMPLE3.0 relies on a monolithic project file for controlling execution on distributed and shared-memory systems and for unified meta-data management. This program creates a directory named projname and a file projname.simple inside that directory that contains all information about the project as well as all meta data generated by the different SIMPLE programs. This file is mirrored by an abstract data type in the back-end, which manages the parameters and meta-data I\/O required for execution of SIMPLE",
      "executable": "simple_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "projname",
        "keytype": "str",
        "descr_short": "Project name",
        "descr_long": "Name of project to create .\/myproject\/myproject.simple file for",
        "descr_placeholder": "e.g. to create .\/myproject\/myproject.simple",
        "required": true
      },
      {
        "key": "user_email",
        "keytype": "str",
        "descr_short": "Your e-mail address",
        "descr_long": "Your e-mail address",
        "descr_placeholder": "e.g. myname@uni.edu",
        "required": false
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": [
      {
        "key": "time_per_image",
        "keytype": "num",
        "descr_short": "Time per image",
        "descr_long": "Estimated time per image in seconds for forecasting total execution time{100}",
        "descr_placeholder": "in seconds{100}",
        "required": false
      },
      {
        "key": "user_account",
        "keytype": "str",
        "descr_short": "User account name in SLURM\/PBS",
        "descr_long": "User account name in SLURM\/PBS system",
        "descr_placeholder": "e.g. Account084",
        "required": false
      },
      {
        "key": "user_project",
        "keytype": "str",
        "descr_short": "User project name in SLURM\/PBS",
        "descr_long": "User project name in SLURM\/PBS system",
        "descr_placeholder": "e.g. Project001",
        "required": false
      },
      {
        "key": "qsys_partition",
        "keytype": "str",
        "descr_short": "Name of SLURM\/PBS partition",
        "descr_long": "Name of target partition of distributed computer system (SLURM\/PBS)",
        "descr_placeholder": "give part name",
        "required": false
      },
      {
        "key": "qsys_qos",
        "keytype": "str",
        "descr_short": "Schedule priority",
        "descr_long": "Job scheduling priority (SLURM\/PBS)",
        "descr_placeholder": "give priority",
        "required": false
      },
      {
        "key": "qsys_reservation",
        "keytype": "str",
        "descr_short": "Name of reserved partition",
        "descr_long": "Name of reserved target partition of distributed computer system (SLURM\/PBS)",
        "descr_placeholder": "give yourpart",
        "required": false
      },
      {
        "key": "job_memory_per_task",
        "keytype": "str",
        "descr_short": "Memory per part",
        "descr_long": "Memory in MB per part in distributed execution{1600}",
        "descr_placeholder": "MB per part{1600}",
        "required": false
      }
    ]
  },
  {
    "normalize": {
      "name": "normalize",
      "descr_short": "Normalize volume\/stack",
      "descr_long": "is a program for normalization of MRC or SPIDER stacks and volumes",
      "executable": "simple_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "norm",
        "keytype": "binary",
        "descr_short": "Normalize",
        "descr_long": "Statistical normalization: avg=zero, var=1(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "noise_norm",
        "keytype": "binary",
        "descr_short": "Noise normalize",
        "descr_long": "Statistical normalization based on background(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "shell_norm",
        "keytype": "binary",
        "descr_short": "Power whitening",
        "descr_long": "Normalisation of each Fourier shell to power=1(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [
      {
        "key": "stk",
        "keytype": "file",
        "descr_short": "Stack to normalize",
        "descr_long": "Stack of images to normalize",
        "descr_placeholder": "e.g. imgs.mrc",
        "required": false
      },
      {
        "key": "vol1",
        "keytype": "file",
        "descr_short": "Volume to normalize",
        "descr_long": "Volume to normalize",
        "descr_placeholder": "e.g. vol.mrc",
        "required": false
      }
    ],
    "search controls": [],
    "filter controls": [],
    "mask controls": [
      {
        "key": "msk",
        "keytype": "num",
        "descr_short": "Mask radius",
        "descr_long": "Mask radius in pixels for application of a soft-edged circular mask to remove background noise",
        "descr_placeholder": "mask radius in pixels",
        "required": true
      }
    ],
    "computer controls": [
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "orisops": {
      "name": "orisops",
      "descr_short": "Standard orientation editing",
      "descr_long": "is a program for modifying SIMPLE orientation\/parameter files. If errify=yes, 'uniform random angular errors .in.[-angerr,angerr], and uniform origin shift errors .in.[-sherr,sherr], 'and uniform random defocus errors .in.[-dferr,dferr] are introduced. If nstates > 1 then random states are assigned '.in.[1,nstates]. If mirr=2d, then the Euler angles in oritab are mirrored according to the relation 'e1=e1, e2=180.+e2, e3=-e3. If mirr=3d, then the Euler angles in oritab are mirrored according to the 'relation R=M(M*R), where R is the rotation matrix calculated from the Euler angle triplet and M is a '3D reflection matrix. If e1, e2, or e3 is 'inputted, the orientations are rotated correspondingly. If you input state, 'only the orientations assigned to state state are rotated. If mul is defined, the origin shifts are multiplied with mul. 'If zero=yes, then the shifts are zeroed",
      "executable": "simple_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "oritab",
        "keytype": "file",
        "descr_short": "Orientation and CTF parameter file",
        "descr_long": "Orientation and CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": true
      },
      {
        "key": "outfile",
        "keytype": "file",
        "descr_short": "Output orientation and CTF parameter file",
        "descr_long": "Output Orientation and CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": false
      },
      {
        "key": "e1",
        "keytype": "num",
        "descr_short": "Rotation along Phi",
        "descr_long": "Phi Euler angle",
        "descr_placeholder": "in degrees",
        "required": false
      },
      {
        "key": "e2",
        "keytype": "num",
        "descr_short": "Rotation along Theta",
        "descr_long": "Theat Euler angle",
        "descr_placeholder": "in degrees",
        "required": false
      },
      {
        "key": "e3",
        "keytype": "num",
        "descr_short": "Rotation along Psi",
        "descr_long": "Psi Euler angle",
        "descr_placeholder": "in degrees",
        "required": false
      },
      {
        "key": "nstates",
        "keytype": "num",
        "descr_short": "Number of random state labels",
        "descr_long": "Number of random state labels to insert",
        "descr_placeholder": "# states",
        "required": false
      },
      {
        "key": "pgrp",
        "keytype": "str",
        "descr_short": "Point-group symmetry",
        "descr_long": "Point-group symmetry of particle(cn|dn|t|o|i){c1}",
        "descr_placeholder": "point-group(cn|dn|t|o|i){c1}",
        "required": false
      },
      {
        "key": "ctf",
        "keytype": "multi",
        "descr_short": "CTF status",
        "descr_long": "Contrast Transfer Function status; flip indicates that images have been phase-flipped prior(yes|no|flip){no}",
        "descr_placeholder": "(yes|no|flip){no}",
        "required": false,
        "options": [
          "yes",
          "no",
          "flip"
        ]
      },
      {
        "key": "angerr",
        "keytype": "num",
        "descr_short": "Rotation angle error half-width",
        "descr_long": "Uniform rotation angle shift error half-width(in degrees)",
        "descr_placeholder": "rotation error in degrees",
        "required": false
      },
      {
        "key": "sherr",
        "keytype": "num",
        "descr_short": "Shift error half-width",
        "descr_long": "Uniform rotational origin shift error half-width(in pixels)",
        "descr_placeholder": "shift error in pixels",
        "required": false
      },
      {
        "key": "dferr",
        "keytype": "num",
        "descr_short": "Underfocus error half-width",
        "descr_long": "Uniform underfoucs error half-width(in microns)",
        "descr_placeholder": "defocus error in microns",
        "required": false
      },
      {
        "key": "zero",
        "keytype": "binary",
        "descr_short": "Zero shifts",
        "descr_long": "Zero shifts(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "ndiscrete",
        "keytype": "num",
        "descr_short": "Number of discrete projection directions",
        "descr_long": "Number of projection directions to use for discretization of input orientations",
        "descr_placeholder": "# discrete projs",
        "required": false
      },
      {
        "key": "state",
        "keytype": "num",
        "descr_short": "State to modify",
        "descr_long": "Index of state to modify",
        "descr_placeholder": "give state index",
        "required": false
      },
      {
        "key": "errify",
        "keytype": "binary",
        "descr_short": "Errify input orientations\/CTF parameters",
        "descr_long": "Introduce uniform random errors in input orientations\/CTF parameters(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "mul",
        "keytype": "num",
        "descr_short": "Shift multiplication factor",
        "descr_long": "Origin shift multiplication factor{1}",
        "descr_placeholder": "1\/scale in pixels{1}",
        "required": false
      },
      {
        "key": "mirr",
        "keytype": "multi",
        "descr_short": "Mirror orientations",
        "descr_long": "Mirror orientations(2d|3d|no){no}",
        "descr_placeholder": "(2d|3d|no){no}",
        "required": false,
        "options": [
          "2d",
          "3d",
          "no"
        ]
      },
      {
        "key": "symrnd",
        "keytype": "binary",
        "descr_short": "Randomize over subgroubs of point-group",
        "descr_long": "Expand orientations over entire unit sphere by permutation according to randomly selected subgroup symmetry(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "oritype",
        "keytype": "multi",
        "descr_short": "Oritype segment in project",
        "descr_long": "Oritype segment in project(ptcl2D|ptcl3D|cls3D){ptcl3D}",
        "descr_placeholder": "(ptcl2D|ptcl3D|cls3D){ptcl3D}",
        "required": false,
        "options": [
          "ptcl2D",
          "ptcl3D",
          "cls3D"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": []
  },
  {
    "oristats": {
      "name": "oristats",
      "descr_short": "Statistical analyses of orientations",
      "descr_long": "is a program for analyzing SIMPLE orientation\/parameter files. If two orientation 'tables (oritab and oritab2) are inputted, statistics of the distances between the orientations 'in the two documents are provided",
      "executable": "simple_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "oritab",
        "keytype": "file",
        "descr_short": "Orientation and CTF parameter file",
        "descr_long": "Orientation and CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": true
      },
      {
        "key": "oritab2",
        "keytype": "file",
        "descr_short": "2nd orientation and CTF parameter file",
        "descr_long": "2nd orientation and CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": false
      },
      {
        "key": "pgrp",
        "keytype": "str",
        "descr_short": "Point-group symmetry",
        "descr_long": "Point-group symmetry of particle(cn|dn|t|o|i){c1}",
        "descr_placeholder": "point-group(cn|dn|t|o|i){c1}",
        "required": false
      },
      {
        "key": "nspace",
        "keytype": "num",
        "descr_short": "Number of projection directions",
        "descr_long": "Number of projection directions used",
        "descr_placeholder": "# projections",
        "required": false
      },
      {
        "key": "oritype",
        "keytype": "multi",
        "descr_short": "Oritype segment in project",
        "descr_long": "Oritype segment in project(ptcl2D|ptcl3D|cls3D){ptcl3D}",
        "descr_placeholder": "(ptcl2D|ptcl3D|cls3D){ptcl3D}",
        "required": false,
        "options": [
          "ptcl2D",
          "ptcl3D",
          "cls3D"
        ]
      },
      {
        "key": "weights2D",
        "keytype": "binary",
        "descr_short": "Spectral weighting",
        "descr_long": "Weighted particle contributions based on the median FRC between the particle and its corresponding reference(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "weights3D",
        "keytype": "binary",
        "descr_short": "Spectral weighting",
        "descr_long": "Weighted particle contributions based on the median FRC between the particle and its corresponding re-projection(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "ctfstats",
        "keytype": "binary",
        "descr_short": "CTF statistics",
        "descr_long": "Provide statistics about CTF(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "classtats",
        "keytype": "binary",
        "descr_short": "Class statistics",
        "descr_long": "Provide statistics about 2D clusters(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "projstats",
        "keytype": "binary",
        "descr_short": "Projection statistics",
        "descr_long": "Provide statistics about projection directions(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "trsstats",
        "keytype": "binary",
        "descr_short": "Shift statistics",
        "descr_long": "Provide statistics about rotational origin shifts(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": [
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "pick": {
      "name": "pick",
      "descr_short": "Template-based particle picking",
      "descr_long": "is a distributed workflow for template-based particle picking",
      "executable": "simple_distr_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "refs",
        "keytype": "file",
        "descr_short": "Picking 2D references",
        "descr_long": "2D references used for automated picking",
        "descr_placeholder": "e.g. pickrefs.mrc file with references",
        "required": true
      },
      {
        "key": "dir",
        "keytype": "dir",
        "descr_short": "Output directory",
        "descr_long": "Output directory",
        "descr_placeholder": "e.g. pick\/",
        "required": false
      }
    ],
    "alternative inputs": [],
    "search controls": [
      {
        "key": "thres",
        "keytype": "num",
        "descr_short": "Distance threshold",
        "descr_long": "Distance filer (in pixels)",
        "descr_placeholder": "in pixels",
        "required": false
      },
      {
        "key": "ndev",
        "keytype": "num",
        "descr_short": "# of sigmas for clustering",
        "descr_long": "# of standard deviations threshold for one cluster clustering{2}",
        "descr_placeholder": "{2}",
        "required": false
      }
    ],
    "filter controls": [
      {
        "key": "lp",
        "keytype": "num",
        "descr_short": "Low-pass limit",
        "descr_long": "Low-pass limit in Angstroms{20}",
        "descr_placeholder": "in Angstroms{20}",
        "required": false
      }
    ],
    "mask controls": [],
    "computer controls": [
      {
        "key": "nparts",
        "keytype": "num",
        "descr_short": "Number of parts",
        "descr_long": "Number of partitions for distrbuted memory execution. One part typically corresponds to one CPU socket in the distributed system. On a single-socket machine there may be speed benfits to dividing the jobs into a few (2-4) partitions, depending on memory capacity",
        "descr_placeholder": "divide job into # parts",
        "required": true
      },
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "postprocess": {
      "name": "postprocess",
      "descr_short": "Post-processing of volume",
      "descr_long": "is a program for map post-processing. Use program volops to estimate the B-factor with the Guinier plot",
      "executable": "simple_exec"
    },
    "image input\/output": [
      {
        "key": "vol1",
        "keytype": "file",
        "descr_short": "Volume",
        "descr_long": "Volume to post-process",
        "descr_placeholder": "input volume e.g. vol.mrc",
        "required": false
      }
    ],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "mkdir",
        "keytype": "binary",
        "descr_short": "Make auto-named dir for output",
        "descr_long": "Make auto-named consequtively numbered dir for output(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "projfile",
        "keytype": "file",
        "descr_short": "Project file",
        "descr_long": "SIMPLE projectfile",
        "descr_placeholder": "e.g. myproject.simple",
        "required": false
      },
      {
        "key": "state",
        "keytype": "num",
        "descr_short": "State to postprocess",
        "descr_long": "State to postprocess{1}",
        "descr_placeholder": "Input state{1}",
        "required": false
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [
      {
        "key": "hp",
        "keytype": "num",
        "descr_short": "High-pass limit",
        "descr_long": "High-pass resolution limit",
        "descr_placeholder": "high-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "amsklp",
        "keytype": "num",
        "descr_short": "Low-pass limit for envelope mask generation",
        "descr_long": "Low-pass limit for envelope mask generation in Angstroms",
        "descr_placeholder": "low-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "lp",
        "keytype": "num",
        "descr_short": "Low-pass limit for map filtering",
        "descr_long": "Low-pass limit for map filtering",
        "descr_placeholder": "low-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "vol_filt",
        "keytype": "file",
        "descr_short": "Input filter volume",
        "descr_long": "Input filter volume",
        "descr_placeholder": "input filter volume e.g. aniso_optlp_state01.mrc",
        "required": false
      },
      {
        "key": "fsc",
        "keytype": "file",
        "descr_short": "FSC file",
        "descr_long": "Binary file with FSC info for filtering",
        "descr_placeholder": "input binary file e.g. fsc_state01.bin",
        "required": false
      },
      {
        "key": "bfac",
        "keytype": "num",
        "descr_short": "B-factor for sharpening",
        "descr_long": "B-factor for sharpening in Angstroms^2",
        "descr_placeholder": "B-factor in Angstroms^2",
        "required": false
      },
      {
        "key": "mirr",
        "keytype": "multi",
        "descr_short": "Perform mirroring",
        "descr_long": "Whether to mirror and along which axis(no|x|y){no}",
        "descr_placeholder": "(no|x|y){no}",
        "required": false,
        "options": [
          "no",
          "x",
          "y"
        ]
      }
    ],
    "mask controls": [
      {
        "key": "msk",
        "keytype": "num",
        "descr_short": "Mask radius",
        "descr_long": "Mask radius in pixels for application of a soft-edged circular mask to remove background noise",
        "descr_placeholder": "mask radius in pixels",
        "required": true
      },
      {
        "key": "inner",
        "keytype": "num",
        "descr_short": "Inner mask radius",
        "descr_long": "Inner mask radius for omitting unordered cores of particles with high radial symmetry, typically icosahedral viruses",
        "descr_placeholder": "inner mask radius in pixels",
        "required": false
      },
      {
        "key": "mskfile",
        "keytype": "file",
        "descr_short": "Input mask file",
        "descr_long": "Input mask file to apply to reference volume(s) before projection",
        "descr_placeholder": "e.g. automask.mrc from postprocess",
        "required": false
      },
      {
        "key": "binwidth",
        "keytype": "num",
        "descr_short": "Envelope binary layers width",
        "descr_long": "Binary layers grown for molecular envelope in pixels{1}",
        "descr_placeholder": "Molecular envelope binary layers width in pixels{1}",
        "required": false
      },
      {
        "key": "thres",
        "keytype": "num",
        "descr_short": "Volume threshold",
        "descr_long": "Volume threshold for enevloppe mask generation",
        "descr_placeholder": "Volume threshold",
        "required": false
      },
      {
        "key": "automsk",
        "keytype": "binary",
        "descr_short": "Perform envelope masking",
        "descr_long": "Whether to generate an envelope mask(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "mw",
        "keytype": "num",
        "descr_short": "Molecular weight",
        "descr_long": "Molecular weight in kDa",
        "descr_placeholder": "in kDa",
        "required": false
      },
      {
        "key": "width",
        "keytype": "num",
        "descr_short": "Inner mask falloff",
        "descr_long": "Number of cosine edge pixels of inner mask in pixels",
        "descr_placeholder": "# pixels cosine edge",
        "required": false
      },
      {
        "key": "edge",
        "keytype": "num",
        "descr_short": "Envelope mask soft edge",
        "descr_long": "Cosine edge size for softening molecular envelope in pixels",
        "descr_placeholder": "# pixels cosine edge",
        "required": false
      }
    ],
    "computer controls": [
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "powerspecs": {
      "name": "powerspecs",
      "descr_short": "Calculate powerspectra from micrographs",
      "descr_long": "is a program for generating powerspectra from a filetable of micrographs",
      "executable": "simple_distr_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "fbody",
        "keytype": "string",
        "descr_short": "Template output powerspec name",
        "descr_long": "Template output powerspec name",
        "descr_placeholder": "e.g. spec_",
        "required": false
      },
      {
        "key": "pspecsz",
        "keytype": "num",
        "descr_short": "Size of power spectrum",
        "descr_long": "Size of power spectrum in pixels",
        "descr_placeholder": "in pixels",
        "required": false
      },
      {
        "key": "speckind",
        "keytype": "multi",
        "descr_short": "Power spectrum kind",
        "descr_long": "Power spectrum kind(real|power|sqrt|log|phase){sqrt}",
        "descr_placeholder": "(real|power|sqrt|log|phase){sqrt}",
        "required": false,
        "options": [
          "real",
          "power",
          "sqrt",
          "log",
          "phase"
        ]
      },
      {
        "key": "clip",
        "keytype": "num",
        "descr_short": "Clipped box size",
        "descr_long": "Target box size for clipping in pixels",
        "descr_placeholder": "in pixels",
        "required": false
      },
      {
        "key": "mkdir",
        "keytype": "binary",
        "descr_short": "Make auto-named dir for output",
        "descr_long": "Make auto-named consequtively numbered dir for output(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [
      {
        "key": "stk",
        "keytype": "file",
        "descr_short": "Particle image stack",
        "descr_long": "Particle image stack",
        "descr_placeholder": "xxx.mrc file with particles",
        "required": false
      },
      {
        "key": "filetab",
        "keytype": "file",
        "descr_short": "List of micrograph files",
        "descr_long": "List of micrograph files to generate powerspectra from",
        "descr_placeholder": "e.g. filetab.txt",
        "required": true
      }
    ],
    "search controls": [],
    "filter controls": [
      {
        "key": "lp",
        "keytype": "num",
        "descr_short": "Low-pass limit of resolution mask",
        "descr_long": "Low-pass resolution limit of resolution mask",
        "descr_placeholder": "low-pass limit in Angstroms",
        "required": false
      }
    ],
    "mask controls": [],
    "computer controls": [
      {
        "key": "nparts",
        "keytype": "num",
        "descr_short": "Number of parts",
        "descr_long": "Number of partitions for distrbuted memory execution. One part typically corresponds to one CPU socket in the distributed system. On a single-socket machine there may be speed benfits to dividing the jobs into a few (2-4) partitions, depending on memory capacity",
        "descr_placeholder": "divide job into # parts",
        "required": true
      },
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "preprocess": {
      "name": "preprocess",
      "descr_short": "Preprocessing",
      "descr_long": "is a distributed workflow that executes motion_correct, ctf_estimate and pick in sequence",
      "executable": "simple_distr_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "dose_rate",
        "keytype": "num",
        "descr_short": "Dose rate",
        "descr_long": "Dose rate in e\/Ang^2\/sec",
        "descr_placeholder": "in e\/Ang^2\/sec",
        "required": false
      },
      {
        "key": "exp_time",
        "keytype": "num",
        "descr_short": "Exposure time",
        "descr_long": "Exposure time in seconds",
        "descr_placeholder": "in seconds",
        "required": false
      },
      {
        "key": "scale",
        "keytype": "num",
        "descr_short": "Down-scaling factor",
        "descr_long": "Down-scaling factor to apply to the movies",
        "descr_placeholder": "(0-1)",
        "required": false
      },
      {
        "key": "pcontrast",
        "keytype": "binary",
        "descr_short": "Input particle contrast",
        "descr_long": "Input particle contrast(black|white){black}",
        "descr_placeholder": "(black|white){black}",
        "required": false,
        "options": [
          "black",
          "white"
        ]
      },
      {
        "key": "box_extract",
        "keytype": "num",
        "descr_short": "Box size on extraction",
        "descr_long": "Box size on extraction in pixels",
        "descr_placeholder": "in pixels",
        "required": false
      },
      {
        "key": "refs",
        "keytype": "file",
        "descr_short": "Picking 2D references",
        "descr_long": "2D references used for automated picking",
        "descr_placeholder": "e.g. pickrefs.mrc file with references",
        "required": false
      },
      {
        "key": "fbody",
        "keytype": "string",
        "descr_short": "Template output micrograph name",
        "descr_long": "Template output integrated movie name",
        "descr_placeholder": "e.g. mic_",
        "required": false
      },
      {
        "key": "pspecsz",
        "keytype": "num",
        "descr_short": "Size of power spectrum",
        "descr_long": "Size of power spectrum in pixels",
        "descr_placeholder": "in pixels",
        "required": false
      },
      {
        "key": "numlen",
        "keytype": "num",
        "descr_short": "Length of number string",
        "descr_long": "Length of number string",
        "descr_placeholder": "# characters",
        "required": false
      }
    ],
    "alternative inputs": [],
    "search controls": [
      {
        "key": "trs",
        "keytype": "num",
        "descr_short": "Maximum translational shift",
        "descr_long": "Maximum half-width for bund-constrained search of rotational origin shifts",
        "descr_placeholder": "max shift per iteration in pixels{5}",
        "required": false
      },
      {
        "key": "startit",
        "keytype": "num",
        "descr_short": "First iteration",
        "descr_long": "Index of first iteration when starting from a previous run",
        "descr_placeholder": "start iterations from here",
        "required": false
      },
      {
        "key": "nframesgrp",
        "keytype": "num",
        "descr_short": "Number of contigous frames to sum",
        "descr_long": "# contigous frames to sum before motion_correct(Falcon 3)",
        "descr_placeholder": "{0}",
        "required": false
      },
      {
        "key": "fromf",
        "keytype": "num",
        "descr_short": "First frame to include in subsum",
        "descr_long": "First frame index to include in subsum",
        "descr_placeholder": "give index",
        "required": false
      },
      {
        "key": "tof",
        "keytype": "num",
        "descr_short": "Last frame to include in subsum",
        "descr_long": "Last frame index to include in subsum",
        "descr_placeholder": "give index",
        "required": false
      },
      {
        "key": "nsig",
        "keytype": "num",
        "descr_short": "Number of sigmas for outlier removal",
        "descr_long": "Number of standard deviations threshold for pixel outlier removal{6}",
        "descr_placeholder": "# standard deviations{6}",
        "required": false
      },
      {
        "key": "dfmin",
        "keytype": "num",
        "descr_short": "Expected minimum defocus",
        "descr_long": "Expected minimum defocus in microns{0.5}",
        "descr_placeholder": "in microns{0.5}",
        "required": false
      },
      {
        "key": "dfmax",
        "keytype": "num",
        "descr_short": "Expected maximum defocus",
        "descr_long": "Expected minimum defocus in microns{5.0}",
        "descr_placeholder": "in microns{5.0}",
        "required": false
      },
      {
        "key": "dfstep",
        "keytype": "num",
        "descr_short": "Defocus step size",
        "descr_long": "Defocus step size for grid search in microns{0.05}",
        "descr_placeholder": "in microns{0.05}",
        "required": false
      },
      {
        "key": "astigtol",
        "keytype": "num",
        "descr_short": "Expected astigmatism",
        "descr_long": "expected (tolerated) astigmatism(in microns){0.05}",
        "descr_placeholder": "in microns",
        "required": false
      },
      {
        "key": "thres",
        "keytype": "num",
        "descr_short": "Picking distance threshold",
        "descr_long": "Picking distance filer (in pixels)",
        "descr_placeholder": "in pixels",
        "required": false
      },
      {
        "key": "rm_outliers",
        "keytype": "binary",
        "descr_short": "Remove micrograph image outliers for picking",
        "descr_long": "Remove micrograph image outliers for picking(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "ndev",
        "keytype": "num",
        "descr_short": "# of sigmas for picking clustering",
        "descr_long": "# of standard deviations threshold for picking one cluster clustering{2}",
        "descr_placeholder": "{2}",
        "required": false
      }
    ],
    "filter controls": [
      {
        "key": "lpstart",
        "keytype": "num",
        "descr_short": "Initial low-pass limit for movie alignment",
        "descr_long": "Low-pass limit to be applied in the first iterations of movie alignment(in Angstroms){15}",
        "descr_placeholder": "in Angstroms{15}",
        "required": false
      },
      {
        "key": "lpstop",
        "keytype": "num",
        "descr_short": "Final low-pass limit for movie alignment",
        "descr_long": "Low-pass limit to be applied in the last iterations of movie alignment(in Angstroms){8}",
        "descr_placeholder": "in Angstroms{8}",
        "required": false
      },
      {
        "key": "lp_ctf_estimate",
        "keytype": "num",
        "descr_short": "Low-pass limit for CTF parameter estimation",
        "descr_long": "Low-pass limit for CTF parameter estimation in Angstroms{5}",
        "descr_placeholder": "in Angstroms{5}",
        "required": false
      },
      {
        "key": "hp_ctf_estimate",
        "keytype": "num",
        "descr_short": "High-pass limit for CTF parameter estimation",
        "descr_long": "High-pass limit for CTF parameter estimation  in Angstroms{30}",
        "descr_placeholder": "in Angstroms{30}",
        "required": false
      },
      {
        "key": "lp_pick",
        "keytype": "num",
        "descr_short": "Low-pass limit for picking",
        "descr_long": "Low-pass limit for picking in Angstroms{20}",
        "descr_placeholder": "in Angstroms{20}",
        "required": false
      }
    ],
    "mask controls": [],
    "computer controls": [
      {
        "key": "nparts",
        "keytype": "num",
        "descr_short": "Number of parts",
        "descr_long": "Number of partitions for distrbuted memory execution. One part typically corresponds to one CPU socket in the distributed system. On a single-socket machine there may be speed benfits to dividing the jobs into a few (2-4) partitions, depending on memory capacity",
        "descr_placeholder": "divide job into # parts",
        "required": true
      },
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "preprocess_stream": {
      "name": "preprocess_stream",
      "descr_short": "Preprocessing in streaming mode",
      "descr_long": "is a distributed workflow that executes motion_correct, ctf_estimate and pick in streaming mode as the microscope collects the data",
      "executable": "simple_distr_exec"
    },
    "image input\/output": [
      {
        "key": "dir_movies",
        "keytype": "dir",
        "descr_short": "Input movies directory",
        "descr_long": "Where the movies ot process will squentially appear",
        "descr_placeholder": "e.g. data\/",
        "required": true
      }
    ],
    "parameter input\/output": [
      {
        "key": "dose_rate",
        "keytype": "num",
        "descr_short": "Dose rate",
        "descr_long": "Dose rate in e\/Ang^2\/sec",
        "descr_placeholder": "in e\/Ang^2\/sec",
        "required": false
      },
      {
        "key": "exp_time",
        "keytype": "num",
        "descr_short": "Exposure time",
        "descr_long": "Exposure time in seconds",
        "descr_placeholder": "in seconds",
        "required": false
      },
      {
        "key": "scale",
        "keytype": "num",
        "descr_short": "Down-scaling factor",
        "descr_long": "Down-scaling factor to apply to the movies",
        "descr_placeholder": "(0-1)",
        "required": false
      },
      {
        "key": "pcontrast",
        "keytype": "binary",
        "descr_short": "Input particle contrast",
        "descr_long": "Input particle contrast(black|white){black}",
        "descr_placeholder": "(black|white){black}",
        "required": false,
        "options": [
          "black",
          "white"
        ]
      },
      {
        "key": "box_extract",
        "keytype": "num",
        "descr_short": "Box size on extraction",
        "descr_long": "Box size on extraction in pixels",
        "descr_placeholder": "in pixels",
        "required": false
      },
      {
        "key": "refs",
        "keytype": "file",
        "descr_short": "Picking 2D references",
        "descr_long": "2D references used for automated picking",
        "descr_placeholder": "e.g. pickrefs.mrc file with references",
        "required": false
      },
      {
        "key": "fbody",
        "keytype": "string",
        "descr_short": "Template output micrograph name",
        "descr_long": "Template output integrated movie name",
        "descr_placeholder": "e.g. mic_",
        "required": false
      },
      {
        "key": "pspecsz",
        "keytype": "num",
        "descr_short": "Size of power spectrum",
        "descr_long": "Size of power spectrum in pixels",
        "descr_placeholder": "in pixels",
        "required": false
      },
      {
        "key": "kv",
        "keytype": "num",
        "descr_short": "Acceleration voltage",
        "descr_long": "Acceleration voltage in kV",
        "descr_placeholder": "in kV",
        "required": true
      },
      {
        "key": "cs",
        "keytype": "num",
        "descr_short": "Spherical aberration",
        "descr_long": "Spherical aberration constant(in mm){2.7}",
        "descr_placeholder": "in mm{2.7}",
        "required": true
      },
      {
        "key": "fraca",
        "keytype": "num",
        "descr_short": "Amplitude contrast fraction",
        "descr_long": "Fraction of amplitude contrast used for fitting CTF{0.1}",
        "descr_placeholder": "fraction{0.1}",
        "required": true
      },
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "mkdir",
        "keytype": "binary",
        "descr_short": "Make auto-named dir for output",
        "descr_long": "Make auto-named consequtively numbered dir for output(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [
      {
        "key": "trs",
        "keytype": "num",
        "descr_short": "Maximum translational shift",
        "descr_long": "Maximum half-width for bund-constrained search of rotational origin shifts",
        "descr_placeholder": "max shift per iteration in pixels{5}",
        "required": false
      },
      {
        "key": "startit",
        "keytype": "num",
        "descr_short": "First iteration",
        "descr_long": "Index of first iteration when starting from a previous run",
        "descr_placeholder": "start iterations from here",
        "required": false
      },
      {
        "key": "nframesgrp",
        "keytype": "num",
        "descr_short": "Number of contigous frames to sum",
        "descr_long": "# contigous frames to sum before motion_correct(Falcon 3)",
        "descr_placeholder": "{0}",
        "required": false
      },
      {
        "key": "fromf",
        "keytype": "num",
        "descr_short": "First frame to include in subsum",
        "descr_long": "First frame index to include in subsum",
        "descr_placeholder": "give index",
        "required": false
      },
      {
        "key": "tof",
        "keytype": "num",
        "descr_short": "Last frame to include in subsum",
        "descr_long": "Last frame index to include in subsum",
        "descr_placeholder": "give index",
        "required": false
      },
      {
        "key": "nsig",
        "keytype": "num",
        "descr_short": "Number of sigmas for outlier removal",
        "descr_long": "Number of standard deviations threshold for pixel outlier removal{6}",
        "descr_placeholder": "# standard deviations{6}",
        "required": false
      },
      {
        "key": "dfmin",
        "keytype": "num",
        "descr_short": "Expected minimum defocus",
        "descr_long": "Expected minimum defocus in microns{0.5}",
        "descr_placeholder": "in microns{0.5}",
        "required": false
      },
      {
        "key": "dfmax",
        "keytype": "num",
        "descr_short": "Expected maximum defocus",
        "descr_long": "Expected minimum defocus in microns{5.0}",
        "descr_placeholder": "in microns{5.0}",
        "required": false
      },
      {
        "key": "dfstep",
        "keytype": "num",
        "descr_short": "Defocus step size",
        "descr_long": "Defocus step size for grid search in microns{0.05}",
        "descr_placeholder": "in microns{0.05}",
        "required": false
      },
      {
        "key": "astigtol",
        "keytype": "num",
        "descr_short": "Expected astigmatism",
        "descr_long": "expected (tolerated) astigmatism(in microns){0.05}",
        "descr_placeholder": "in microns",
        "required": false
      },
      {
        "key": "thres",
        "keytype": "num",
        "descr_short": "Picking distance threshold",
        "descr_long": "Picking distance filer (in pixels)",
        "descr_placeholder": "in pixels",
        "required": false
      },
      {
        "key": "rm_outliers",
        "keytype": "binary",
        "descr_short": "Remove micrograph image outliers for picking",
        "descr_long": "Remove micrograph image outliers for picking(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "ndev",
        "keytype": "num",
        "descr_short": "# of sigmas for picking clustering",
        "descr_long": "# of standard deviations threshold for picking one cluster clustering{2}",
        "descr_placeholder": "{2}",
        "required": false
      }
    ],
    "filter controls": [
      {
        "key": "lpstart",
        "keytype": "num",
        "descr_short": "Initial low-pass limit for movie alignment",
        "descr_long": "Low-pass limit to be applied in the first iterations of movie alignment(in Angstroms){15}",
        "descr_placeholder": "in Angstroms{15}",
        "required": false
      },
      {
        "key": "lpstop",
        "keytype": "num",
        "descr_short": "Final low-pass limit for movie alignment",
        "descr_long": "Low-pass limit to be applied in the last iterations of movie alignment(in Angstroms){8}",
        "descr_placeholder": "in Angstroms{8}",
        "required": false
      },
      {
        "key": "lp_ctf_estimate",
        "keytype": "num",
        "descr_short": "Low-pass limit for CTF parameter estimation",
        "descr_long": "Low-pass limit for CTF parameter estimation in Angstroms{5}",
        "descr_placeholder": "in Angstroms{5}",
        "required": false
      },
      {
        "key": "hp_ctf_estimate",
        "keytype": "num",
        "descr_short": "High-pass limit for CTF parameter estimation",
        "descr_long": "High-pass limit for CTF parameter estimation  in Angstroms{30}",
        "descr_placeholder": "in Angstroms{30}",
        "required": false
      },
      {
        "key": "lp_pick",
        "keytype": "num",
        "descr_short": "Low-pass limit for picking",
        "descr_long": "Low-pass limit for picking in Angstroms{20}",
        "descr_placeholder": "in Angstroms{20}",
        "required": false
      }
    ],
    "mask controls": [],
    "computer controls": [
      {
        "key": "nparts",
        "keytype": "num",
        "descr_short": "Number of parts",
        "descr_long": "Number of partitions for distrbuted memory execution. One part typically corresponds to one CPU socket in the distributed system. On a single-socket machine there may be speed benfits to dividing the jobs into a few (2-4) partitions, depending on memory capacity",
        "descr_placeholder": "divide job into # parts",
        "required": true
      },
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "print_fsc": {
      "name": "print_fsc",
      "descr_short": "Print FSC file produced by REFINE3D",
      "descr_long": "is a program for printing the binary FSC files produced by REFINE3D",
      "executable": "simple_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "box",
        "keytype": "num",
        "descr_short": "Square image size",
        "descr_long": "Square image size(in pixels)",
        "descr_placeholder": "# pixels of box",
        "required": true
      },
      {
        "key": "fsc",
        "keytype": "file",
        "descr_short": "FSC file",
        "descr_long": "Binary file with FSC info",
        "descr_placeholder": "input binary file e.g. fsc_state01.bin",
        "required": true
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": []
  },
  {
    "print_magic_boxes": {
      "name": "print_magic_boxes",
      "descr_short": "Print magic boxes (fast FFT)",
      "descr_long": "is a program for printing magic box sizes (fast FFT)",
      "executable": "simple_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "box",
        "keytype": "num",
        "descr_short": "Square image size",
        "descr_long": "Square image size(in pixels)",
        "descr_placeholder": "# pixels of box",
        "required": true
      },
      {
        "key": "moldiam",
        "keytype": "num",
        "descr_short": "Molecular diameter",
        "descr_long": "Molecular diameter(in pixels)",
        "descr_placeholder": "give # pixels of diameter",
        "required": false
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": []
  },
  {
    "print_project_info": {
      "name": "print_project_info",
      "descr_short": "Print project info",
      "descr_long": "is a program prints information abourt a *.simple project file",
      "executable": "simple_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": []
  },
  {
    "reproject": {
      "name": "reproject",
      "descr_short": "Re-project volume",
      "descr_long": "is a program for re-projecting a volume using Fourier interpolation. Input is a SPIDER or MRC volume. Output is a stack of projection images of the same format as the inputted volume. Projections are generated by extracting central sections from the Fourier volume and back transforming the 2D FTs. nspace controls the number of projection directions. The  oritab parameter allows you to input the orientations that you wish to have your volume projected in. pgrp controls the point-group symmetry c (rotational), d (dihedral), t (tetrahedral), o (octahedral) or i (icosahedral). The point-group symmetry is used to restrict the set of projections to within the asymmetric unit. neg inverts the contrast of the projections",
      "executable": "simple_exec"
    },
    "image input\/output": [
      {
        "key": "vol1",
        "keytype": "file",
        "descr_short": "Volume",
        "descr_long": "Volume for creating 2D central  sections",
        "descr_placeholder": "input volume e.g. vol.mrc",
        "required": true
      },
      {
        "key": "outstk",
        "keytype": "file",
        "descr_short": "Output stack name",
        "descr_long": "Output images stack name",
        "descr_placeholder": "e.g. outstk.mrc",
        "required": false
      }
    ],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "oritab",
        "keytype": "file",
        "descr_short": "Orientation and CTF parameter file",
        "descr_long": "Orientation and CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": false
      },
      {
        "key": "neg",
        "keytype": "binary",
        "descr_short": "Invert contrast",
        "descr_long": "Invert contrast of projections(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [
      {
        "key": "nspace",
        "keytype": "num",
        "descr_short": "Number of projection directions",
        "descr_long": "Number of projection directions used",
        "descr_placeholder": "# projections",
        "required": false
      },
      {
        "key": "pgrp",
        "keytype": "str",
        "descr_short": "Point-group symmetry",
        "descr_long": "Point-group symmetry of particle(cn|dn|t|o|i){c1}",
        "descr_placeholder": "point-group(cn|dn|t|o|i){c1}",
        "required": true
      }
    ],
    "filter controls": [],
    "mask controls": [
      {
        "key": "msk",
        "keytype": "num",
        "descr_short": "Mask radius",
        "descr_long": "Mask radius in pixels for application of a soft-edged circular mask to remove background noise",
        "descr_placeholder": "mask radius in pixels",
        "required": false
      }
    ],
    "computer controls": [
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "reconstruct3D": {
      "name": "reconstruct3D",
      "descr_short": "3D reconstruction from oriented particles",
      "descr_long": "is a distributed workflow for reconstructing volumes from MRC and SPIDER stacks, 'given input orientations and state assignments. The algorithm is based on direct Fourier inversion 'with a Kaiser-Bessel (KB) interpolation kernel",
      "executable": "simple_distr_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "mkdir",
        "keytype": "binary",
        "descr_short": "Make auto-named dir for output",
        "descr_long": "Make auto-named consequtively numbered dir for output(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [
      {
        "key": "pgrp",
        "keytype": "str",
        "descr_short": "Point-group symmetry",
        "descr_long": "Point-group symmetry of particle(cn|dn|t|o|i){c1}",
        "descr_placeholder": "point-group(cn|dn|t|o|i){c1}",
        "required": true
      },
      {
        "key": "frac",
        "keytype": "num",
        "descr_short": "Fraction of particles to include",
        "descr_long": "Fraction of particles to include based on spectral score (median of FRC between reference and particle)",
        "descr_placeholder": "fraction of particles(0.1-0.9){1.0}",
        "required": false
      }
    ],
    "filter controls": [
      {
        "key": "eo",
        "keytype": "binary",
        "descr_short": "Gold-standard FSC for filtering and resolution estimation",
        "descr_long": "Gold-standard FSC for filtering and resolution estimation(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "shellw",
        "keytype": "binary",
        "descr_short": "B-factor weighted reconstruction",
        "descr_long": "Whether to perform B-factor weighted reconstruction(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "mask controls": [
      {
        "key": "msk",
        "keytype": "num",
        "descr_short": "Mask radius",
        "descr_long": "Mask radius in pixels for application of a soft-edged circular mask to remove background noise",
        "descr_placeholder": "mask radius in pixels",
        "required": true
      },
      {
        "key": "mskfile",
        "keytype": "file",
        "descr_short": "Input mask file",
        "descr_long": "Input mask file to apply to reference volume(s) before projection",
        "descr_placeholder": "e.g. automask.mrc from postprocess",
        "required": false
      }
    ],
    "computer controls": [
      {
        "key": "nparts",
        "keytype": "num",
        "descr_short": "Number of parts",
        "descr_long": "Number of partitions for distrbuted memory execution. One part typically corresponds to one CPU socket in the distributed system. On a single-socket machine there may be speed benfits to dividing the jobs into a few (2-4) partitions, depending on memory capacity",
        "descr_placeholder": "divide job into # parts",
        "required": true
      },
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "refine3D": {
      "name": "refine3D",
      "descr_short": "3D refinement",
      "descr_long": "is a distributed workflow for 3D refinement based on probabilistic projection matching",
      "executable": "simple_distr_exec"
    },
    "image input\/output": [
      {
        "key": "vol1",
        "keytype": "file",
        "descr_short": "Reference volume",
        "descr_long": "Reference volume for creating polar 2D central  sections for particle image matching",
        "descr_placeholder": "input volume e.g. vol.mrc",
        "required": false
      }
    ],
    "parameter input\/output": [
      {
        "key": "mkdir",
        "keytype": "binary",
        "descr_short": "Make auto-named dir for output",
        "descr_long": "Make auto-named consequtively numbered dir for output(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [
      {
        "key": "nspace",
        "keytype": "num",
        "descr_short": "Number of projection directions",
        "descr_long": "Number of projection directions used",
        "descr_placeholder": "# projections",
        "required": false
      },
      {
        "key": "startit",
        "keytype": "num",
        "descr_short": "First iteration",
        "descr_long": "Index of first iteration when starting from a previous run",
        "descr_placeholder": "start iterations from here",
        "required": false
      },
      {
        "key": "trs",
        "keytype": "num",
        "descr_short": "Maximum translational shift",
        "descr_long": "Maximum half-width for bund-constrained search of rotational origin shifts",
        "descr_placeholder": "max shift per iteration in pixels{5}",
        "required": false
      },
      {
        "key": "center",
        "keytype": "binary",
        "descr_short": "Center reference volume(s)",
        "descr_long": "Center reference volume(s) by their center of gravity and map shifts back to the particles(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "maxits",
        "keytype": "num",
        "descr_short": "Max iterations",
        "descr_long": "Maximum number of iterations",
        "descr_placeholder": "Max # iterations",
        "required": false
      },
      {
        "key": "update_frac",
        "keytype": "num",
        "descr_short": "Fractional update per iteration",
        "descr_long": "Fraction of particles to update per iteration in incremental learning scheme for accelerated convergence rate(0.1-0.5){1.}",
        "descr_placeholder": "update this fraction per iter(0.1-0.5){1.0}",
        "required": false
      },
      {
        "key": "frac",
        "keytype": "num",
        "descr_short": "Fraction of particles to include",
        "descr_long": "Fraction of particles to include based on spectral score (median of FRC between reference and particle)",
        "descr_placeholder": "fraction of particles(0.1-0.9){1.0}",
        "required": false
      },
      {
        "key": "pgrp",
        "keytype": "str",
        "descr_short": "Point-group symmetry",
        "descr_long": "Point-group symmetry of particle(cn|dn|t|o|i){c1}",
        "descr_placeholder": "point-group(cn|dn|t|o|i){c1}",
        "required": true
      },
      {
        "key": "nnn",
        "keytype": "num",
        "descr_short": "Number of nearest neighbours",
        "descr_long": "Number of nearest projection direction neighbours in neigh=yes refinement",
        "descr_placeholder": "# projection neighbours{10% of search space}",
        "required": false
      },
      {
        "key": "nstates",
        "keytype": "num",
        "descr_short": "Number of states",
        "descr_long": "Number of conformational\/compositional states to reconstruct",
        "descr_placeholder": "# states to reconstruct",
        "required": false
      },
      {
        "key": "objfun",
        "keytype": "binary",
        "descr_short": "Objective function",
        "descr_long": "Objective function(cc|ccres){cc}",
        "descr_placeholder": "(cc|ccres){cc}",
        "required": false,
        "options": [
          "cc",
          "ccres"
        ]
      },
      {
        "key": "refine",
        "keytype": "multi",
        "descr_short": "Refinement mode",
        "descr_long": "Refinement mode(snhc|single|multi|greedy_single|greedy_multi|cluster|clustersym){no}",
        "descr_placeholder": "(snhc|single|multi|greedy_single|cont_single|greedy_multi|cluster|clustersym){single}",
        "required": false,
        "options": [
          "snhc",
          "single",
          "multi",
          "greedy_single",
          "cont_single",
          "greedy_multi",
          "cluster",
          "clustersym"
        ]
      },
      {
        "key": "neigh",
        "keytype": "binary",
        "descr_short": "Neighbourhood refinement",
        "descr_long": "Neighbourhood refinement(yes|no){yes}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "filter controls": [
      {
        "key": "hp",
        "keytype": "num",
        "descr_short": "High-pass limit",
        "descr_long": "High-pass resolution limit",
        "descr_placeholder": "high-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "cenlp",
        "keytype": "num",
        "descr_short": "Centering low-pass limit",
        "descr_long": "Limit for low-pass filter used in binarisation prior to determination of the center of gravity of the reference volume(s) and centering",
        "descr_placeholder": "centering low-pass limit in Angstroms{30}",
        "required": false
      },
      {
        "key": "lp",
        "keytype": "num",
        "descr_short": "Static low-pass limit",
        "descr_long": "Static low-pass limit",
        "descr_placeholder": "low-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "lpstop",
        "keytype": "num",
        "descr_short": "Low-pass limit for frequency limited refinement",
        "descr_long": "Low-pass limit used to limit the resolution to avoid possible overfitting",
        "descr_placeholder": "low-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "lplim_crit",
        "keytype": "num",
        "descr_short": "Low-pass limit FSC criterion",
        "descr_long": "FSC criterion for determining the low-pass limit(0.143-0.5){0.3}",
        "descr_placeholder": "low-pass FSC criterion(0.143-0.5){0.3}",
        "required": false
      },
      {
        "key": "eo",
        "keytype": "binary",
        "descr_short": "Gold-standard FSC for filtering and resolution estimation",
        "descr_long": "Gold-standard FSC for filtering and resolution estimation(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "weights3D",
        "keytype": "binary",
        "descr_short": "Spectral weighting",
        "descr_long": "Weighted particle contributions based on the median FRC between the particle and its corresponding reference(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "shellw",
        "keytype": "binary",
        "descr_short": "B-factor weighted reconstruction",
        "descr_long": "Whether to perform B-factor weighted reconstruction(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "mask controls": [
      {
        "key": "msk",
        "keytype": "num",
        "descr_short": "Mask radius",
        "descr_long": "Mask radius in pixels for application of a soft-edged circular mask to remove background noise",
        "descr_placeholder": "mask radius in pixels",
        "required": true
      },
      {
        "key": "inner",
        "keytype": "num",
        "descr_short": "Inner mask radius",
        "descr_long": "Inner mask radius for omitting unordered cores of particles with high radial symmetry, typically icosahedral viruses",
        "descr_placeholder": "inner mask radius in pixels",
        "required": false
      },
      {
        "key": "mskfile",
        "keytype": "file",
        "descr_short": "Input mask file",
        "descr_long": "Input mask file to apply to reference volume(s) before projection",
        "descr_placeholder": "e.g. automask.mrc from postprocess",
        "required": false
      },
      {
        "key": "focusmsk",
        "keytype": "num",
        "descr_short": "Mask radius in focused refinement",
        "descr_long": "Mask radius in pixels for application of a soft-edged circular mask to remove background noise in focused refinement",
        "descr_placeholder": "focused mask radius in pixels",
        "required": false
      },
      {
        "key": "width",
        "keytype": "num",
        "descr_short": "Falloff of inner mask",
        "descr_long": "Number of cosine edge pixels of inner mask in pixels",
        "descr_placeholder": "# pixels cosine edge{10}",
        "required": false
      }
    ],
    "computer controls": [
      {
        "key": "nparts",
        "keytype": "num",
        "descr_short": "Number of parts",
        "descr_long": "Number of partitions for distrbuted memory execution. One part typically corresponds to one CPU socket in the distributed system. On a single-socket machine there may be speed benfits to dividing the jobs into a few (2-4) partitions, depending on memory capacity",
        "descr_placeholder": "divide job into # parts",
        "required": true
      },
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "refine3D_init": {
      "name": "refine3D_init",
      "descr_short": "Random initialisation of 3D refinement",
      "descr_long": "is a distributed workflow for generating a random initial 3D model for initialisation of refine3D",
      "executable": "simple_distr_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "mkdir",
        "keytype": "binary",
        "descr_short": "Make auto-named dir for output",
        "descr_long": "Make auto-named consequtively numbered dir for output(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [
      {
        "key": "nspace",
        "keytype": "num",
        "descr_short": "Number of projection directions",
        "descr_long": "Number of projection directions used",
        "descr_placeholder": "# projections",
        "required": false
      },
      {
        "key": "pgrp",
        "keytype": "str",
        "descr_short": "Point-group symmetry",
        "descr_long": "Point-group symmetry of particle(cn|dn|t|o|i){c1}",
        "descr_placeholder": "point-group(cn|dn|t|o|i){c1}",
        "required": true
      },
      {
        "key": "nran",
        "keytype": "num",
        "descr_short": "Number of random samples",
        "descr_long": "Number of images to randomly sample for 3D reconstruction",
        "descr_placeholder": "# random samples",
        "required": false
      }
    ],
    "filter controls": [
      {
        "key": "shellw",
        "keytype": "binary",
        "descr_short": "B-factor weighted reconstruction",
        "descr_long": "Whether to perform B-factor weighted reconstruction(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "mask controls": [
      {
        "key": "msk",
        "keytype": "num",
        "descr_short": "Mask radius",
        "descr_long": "Mask radius in pixels for application of a soft-edged circular mask to remove background noise",
        "descr_placeholder": "mask radius in pixels",
        "required": true
      },
      {
        "key": "inner",
        "keytype": "num",
        "descr_short": "Inner mask radius",
        "descr_long": "Inner mask radius for omitting unordered cores of particles with high radial symmetry, typically icosahedral viruses",
        "descr_placeholder": "inner mask radius in pixels",
        "required": false
      }
    ],
    "computer controls": [
      {
        "key": "nparts",
        "keytype": "num",
        "descr_short": "Number of parts",
        "descr_long": "Number of partitions for distrbuted memory execution. One part typically corresponds to one CPU socket in the distributed system. On a single-socket machine there may be speed benfits to dividing the jobs into a few (2-4) partitions, depending on memory capacity",
        "descr_placeholder": "divide job into # parts",
        "required": true
      },
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "scale": {
      "name": "scale",
      "descr_short": "Re-scaling MRC & SPIDER stacks and volumes",
      "descr_long": "is a program for re-scaling, clipping and padding MRC & SPIDER stacks and volumes",
      "executable": "simple_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "newbox",
        "keytype": "num",
        "descr_short": "Scaled box size",
        "descr_long": "Target for scaled box size in pixels",
        "descr_placeholder": "new box in pixels",
        "required": false
      },
      {
        "key": "scale",
        "keytype": "num",
        "descr_short": "Scaling ratio",
        "descr_long": "Target box ratio for scaling(0-1)",
        "descr_placeholder": "(0-1)",
        "required": false
      },
      {
        "key": "scale2",
        "keytype": "num",
        "descr_short": "Second scaling ratio",
        "descr_long": "Second target box ratio for scaling(0-1)",
        "descr_placeholder": "(0-1)",
        "required": false
      },
      {
        "key": "clip",
        "keytype": "num",
        "descr_short": "Clipped box size",
        "descr_long": "Target box size for clipping in pixels",
        "descr_placeholder": "in pixels",
        "required": false
      },
      {
        "key": "outvol",
        "keytype": "file",
        "descr_short": "Output volume name",
        "descr_long": "Output volume name",
        "descr_placeholder": "e.g. outvol.mrc",
        "required": false
      },
      {
        "key": "outstk",
        "keytype": "file",
        "descr_short": "Output stack name",
        "descr_long": "Output images stack name",
        "descr_placeholder": "e.g. outstk.mrc",
        "required": false
      },
      {
        "key": "outstk2",
        "keytype": "file",
        "descr_short": "Second output stack name",
        "descr_long": "Second output images stack name",
        "descr_placeholder": "e.g. outstk2.mrc",
        "required": false
      }
    ],
    "alternative inputs": [
      {
        "key": "stk",
        "keytype": "file",
        "descr_short": "Particle image stack",
        "descr_long": "Particle image stack",
        "descr_placeholder": "xxx.mrc file with particles",
        "required": false
      },
      {
        "key": "vol1",
        "keytype": "file",
        "descr_short": "Input volume",
        "descr_long": "Input volume to re-scale",
        "descr_placeholder": "input volume e.g. vol.mrc",
        "required": false
      },
      {
        "key": "filetab",
        "keytype": "file",
        "descr_short": "Stacks list",
        "descr_long": "List of stacks of images to rescale",
        "descr_placeholder": "list input e.g. stktab.txt",
        "required": false
      }
    ],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": [
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "scale": {
      "name": "scale",
      "descr_short": "Re-scaling of MRC & SPIDER stacks",
      "descr_long": "is a program for re-scaling MRC & SPIDER stacks part of project specification",
      "executable": "simple_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "newbox",
        "keytype": "num",
        "descr_short": "Scaled box size",
        "descr_long": "Target for scaled box size in pixels",
        "descr_placeholder": "new box in pixels",
        "required": false
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": [
      {
        "key": "nparts",
        "keytype": "num",
        "descr_short": "Number of parts",
        "descr_long": "Number of partitions for distrbuted memory execution. One part typically corresponds to one CPU socket in the distributed system. On a single-socket machine there may be speed benfits to dividing the jobs into a few (2-4) partitions, depending on memory capacity",
        "descr_placeholder": "divide job into # parts",
        "required": true
      },
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "select": {
      "name": "select",
      "descr_short": "Select images",
      "descr_long": "is a program for selecting files based on image correlation matching",
      "executable": "simple_exec"
    },
    "image input\/output": [
      {
        "key": "stk",
        "keytype": "file",
        "descr_short": "Particle image stack",
        "descr_long": "Particle image stack",
        "descr_placeholder": "xxx.mrc file with particles",
        "required": false
      },
      {
        "key": "stk2",
        "keytype": "file",
        "descr_short": "Stack of selected images",
        "descr_long": "Stack of selected images",
        "descr_placeholder": "e.g. selected(cavgs).mrc",
        "required": true
      },
      {
        "key": "stk3",
        "keytype": "file",
        "descr_short": "Stack of images to select from",
        "descr_long": "Stack of images to select from",
        "descr_placeholder": "e.g. (cavgs)2selectfrom.mrc",
        "required": false
      },
      {
        "key": "filetab",
        "keytype": "file",
        "descr_short": "List of files to select from",
        "descr_long": "List of files to select from",
        "descr_placeholder": "e.g. filetab.txt",
        "required": false
      },
      {
        "key": "outfile",
        "keytype": "file",
        "descr_short": "Output orientation and CTF parameter file",
        "descr_long": "Output Orientation and CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": false
      },
      {
        "key": "outstk",
        "keytype": "file",
        "descr_short": "Output stack name",
        "descr_long": "Output images stack name",
        "descr_placeholder": "e.g. outstk.mrc",
        "required": false
      },
      {
        "key": "dir_select",
        "keytype": "dir",
        "descr_short": "Directory for selected images",
        "descr_long": "Move selected files to here{selected}",
        "descr_placeholder": "select dir",
        "required": false
      },
      {
        "key": "dir_reject",
        "keytype": "dir",
        "descr_short": "Directory for rejected images",
        "descr_long": "Move rejected files to here{rejected}",
        "descr_placeholder": "reject dir",
        "required": false
      }
    ],
    "parameter input\/output": [],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": [
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "shift": {
      "name": "shift",
      "descr_short": "Shift images to rotational origin",
      "descr_long": "is a program for shifting a stack according to origin shifts in oritab",
      "executable": "simple_exec"
    },
    "image input\/output": [
      {
        "key": "stk",
        "keytype": "file",
        "descr_short": "Particle image stack",
        "descr_long": "Particle image stack",
        "descr_placeholder": "xxx.mrc file with particles",
        "required": true
      },
      {
        "key": "outstk",
        "keytype": "file",
        "descr_short": "Output stack name",
        "descr_long": "Output images stack name",
        "descr_placeholder": "e.g. outstk.mrc",
        "required": false
      },
      {
        "key": "oritab",
        "keytype": "file",
        "descr_short": "Orientation and CTF parameter file",
        "descr_long": "Orientation and CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": false
      }
    ],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "mul",
        "keytype": "num",
        "descr_short": "Shift multiplication factor",
        "descr_long": "Shift multiplication factor{1.0}",
        "descr_placeholder": "multiplier",
        "required": false
      },
      {
        "key": "oritype",
        "keytype": "multi",
        "descr_short": "Oritype segment in project",
        "descr_long": "Oritype segment in project(ptcl2D|ptcl3D|cls3D){ptcl3D}",
        "descr_placeholder": "(ptcl2D|ptcl3D|cls3D){ptcl3D}",
        "required": false,
        "options": [
          "ptcl2D",
          "ptcl3D",
          "cls3D"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": [
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "simulate_movie": {
      "name": "simulate_movie",
      "descr_short": "Simulate DDD movie",
      "descr_long": "is a program for crude simulation of a DDD movie. Input is a set of projection images to place. Movie frames are then generated related by randomly shifting the base image and applying noise",
      "executable": "simple_exec"
    },
    "image input\/output": [
      {
        "key": "stk",
        "keytype": "file",
        "descr_short": "Particle image stack",
        "descr_long": "Particle image stack",
        "descr_placeholder": "xxx.mrc file with particles",
        "required": false
      }
    ],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "snr",
        "keytype": "num",
        "descr_short": "SNR",
        "descr_long": "Signal-to-noise ratio of movie frame",
        "descr_placeholder": "signal-to-noise ratio(0.)",
        "required": false
      },
      {
        "key": "kv",
        "keytype": "num",
        "descr_short": "Acceleration voltage",
        "descr_long": "Acceleration voltage in kV",
        "descr_placeholder": "in kV",
        "required": false
      },
      {
        "key": "cs",
        "keytype": "num",
        "descr_short": "Spherical aberration",
        "descr_long": "Spherical aberration constant(in mm){2.7}",
        "descr_placeholder": "in mm{2.7}",
        "required": false
      },
      {
        "key": "fraca",
        "keytype": "num",
        "descr_short": "Amplitude contrast fraction",
        "descr_long": "Fraction of amplitude contrast used for fitting CTF{0.1}",
        "descr_placeholder": "fraction{0.1}",
        "required": false
      },
      {
        "key": "defocus",
        "keytype": "num",
        "descr_short": "Underfocus",
        "descr_long": "Underfocus(in microns)",
        "descr_placeholder": "in microns",
        "required": false
      },
      {
        "key": "trs",
        "keytype": "num",
        "descr_short": "Maximum translational shift",
        "descr_long": "Maximum half-width for bund-constrained search of rotational origin shifts",
        "descr_placeholder": "max shift per iteration in pixels{5}",
        "required": false
      },
      {
        "key": "nframes",
        "keytype": "num",
        "descr_short": "Number of frames",
        "descr_long": "Number of movie frames",
        "descr_placeholder": "# frames",
        "required": false
      },
      {
        "key": "xdim",
        "keytype": "num",
        "descr_short": "x-dimension",
        "descr_long": "Number of pixels in x-direction",
        "descr_placeholder": "# pixels in x",
        "required": false
      },
      {
        "key": "ydim",
        "keytype": "num",
        "descr_short": "y-dimension",
        "descr_long": "Number of pixels in y-direction",
        "descr_placeholder": "# pixels in y",
        "required": false
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [
      {
        "key": "bfac",
        "keytype": "num",
        "descr_short": "CTF B-factor",
        "descr_long": "B-factor of CTF in Angstroms^2",
        "descr_placeholder": "B-factor in Angstroms^2(>0.0){0}",
        "required": false
      }
    ],
    "mask controls": [],
    "computer controls": [
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "simulate_noise": {
      "name": "simulate_noise",
      "descr_short": "White noise simulation",
      "descr_long": "is a program for generating pure noise images",
      "executable": "simple_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "box",
        "keytype": "num",
        "descr_short": "Square image size",
        "descr_long": "Square image size(in pixels)",
        "descr_placeholder": "# pixels of box",
        "required": true
      },
      {
        "key": "nptcls",
        "keytype": "num",
        "descr_short": "Number of particles",
        "descr_long": "Number of particle images",
        "descr_placeholder": "# particles",
        "required": true
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": []
  },
  {
    "simulate_particles": {
      "name": "simulate_particles",
      "descr_short": "Simulate single-particle images",
      "descr_long": "is a program for simulating single-particle cryo-EM images. It is not a verysophisticated simulator, but it is nevertheless useful for testing purposes. It does not do any multi-slice simulation and it cannot be used for simulating molecules containing heavy atoms. It does not even accept a PDB file as an input. Input is a cryo-EM map, which we usually generate from a PDB file using EMANs program pdb2mrc. The volume is projected using Fourier interpolation, 20% of the total noise is added to the images (pink noise), they are then Fourier transformed and multiplied with astigmatic CTF and B-factor. Next, the they are inverse FTed before the remaining 80% of the noise (white noise) is added",
      "executable": "simple_exec"
    },
    "image input\/output": [
      {
        "key": "vol1",
        "keytype": "file",
        "descr_short": "Volume",
        "descr_long": "Volume to project",
        "descr_placeholder": "input volume e.g. vol.mrc",
        "required": false
      }
    ],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "nptcls",
        "keytype": "num",
        "descr_short": "Number of particles",
        "descr_long": "Number of particle images",
        "descr_placeholder": "# particles",
        "required": true
      },
      {
        "key": "snr",
        "keytype": "num",
        "descr_short": "SNR",
        "descr_long": "Signal-to-noise ratio of particle images",
        "descr_placeholder": "signal-to-noise ratio(0.)",
        "required": false
      },
      {
        "key": "oritab",
        "keytype": "file",
        "descr_short": "Orientation and CTF parameter file",
        "descr_long": "Orientation and CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": false
      },
      {
        "key": "outfile",
        "keytype": "file",
        "descr_short": "Output orientation and CTF parameter file",
        "descr_long": "Output Orientation and CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": false
      },
      {
        "key": "outstk",
        "keytype": "file",
        "descr_short": "Output stack name",
        "descr_long": "Output images stack name",
        "descr_placeholder": "e.g. outstk.mrc",
        "required": false
      },
      {
        "key": "ndiscrete",
        "keytype": "num",
        "descr_short": "Number of discrete projection directions",
        "descr_long": "Number of discrete projection directions used in simulation",
        "descr_placeholder": "# discrete projs",
        "required": false
      },
      {
        "key": "sherr",
        "keytype": "num",
        "descr_short": "Shift error half-width",
        "descr_long": "Uniform rotational origin shift error half-width(in pixels)",
        "descr_placeholder": "shift error in pixels",
        "required": false
      },
      {
        "key": "kv",
        "keytype": "num",
        "descr_short": "Acceleration voltage",
        "descr_long": "Acceleration voltage in kV",
        "descr_placeholder": "in kV",
        "required": false
      },
      {
        "key": "cs",
        "keytype": "num",
        "descr_short": "Spherical aberration",
        "descr_long": "Spherical aberration constant(in mm){2.7}",
        "descr_placeholder": "in mm{2.7}",
        "required": false
      },
      {
        "key": "fraca",
        "keytype": "num",
        "descr_short": "Amplitude contrast fraction",
        "descr_long": "Fraction of amplitude contrast used for fitting CTF{0.1}",
        "descr_placeholder": "fraction{0.1}",
        "required": false
      },
      {
        "key": "deftab",
        "keytype": "file",
        "descr_short": "CTF parameter file",
        "descr_long": "CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format with dfx, dfy and angast values",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": false
      },
      {
        "key": "defocus",
        "keytype": "num",
        "descr_short": "Underfocus",
        "descr_long": "Underfocus(in microns)",
        "descr_placeholder": "in microns",
        "required": false
      },
      {
        "key": "dferr",
        "keytype": "num",
        "descr_short": "Underfocus error half-width",
        "descr_long": "Uniform underfoucs error half-width(in microns)",
        "descr_placeholder": "defocus error in microns",
        "required": false
      },
      {
        "key": "astigerr",
        "keytype": "num",
        "descr_short": "Astigmatism error",
        "descr_long": "Uniform astigmatism error(in microns)",
        "descr_placeholder": "error in microns",
        "required": false
      }
    ],
    "alternative inputs": [],
    "search controls": [
      {
        "key": "pgrp",
        "keytype": "str",
        "descr_short": "Point-group symmetry",
        "descr_long": "Point-group symmetry of particle(cn|dn|t|o|i){c1}",
        "descr_placeholder": "point-group(cn|dn|t|o|i){c1}",
        "required": true
      }
    ],
    "filter controls": [
      {
        "key": "bfac",
        "keytype": "num",
        "descr_short": "CTF B-factor",
        "descr_long": "B-factor of CTF in Angstroms^2",
        "descr_placeholder": "B-factor in Angstroms^2(>0.0){0}",
        "required": false
      },
      {
        "key": "bfacerr",
        "keytype": "num",
        "descr_short": "B-factor error",
        "descr_long": "Uniform B-factor error(in Angstroms^2)",
        "descr_placeholder": "error(in Angstroms^2)",
        "required": false
      }
    ],
    "mask controls": [
      {
        "key": "msk",
        "keytype": "num",
        "descr_short": "Mask radius",
        "descr_long": "Mask radius in pixels for application of a soft-edged circular mask to remove background noise",
        "descr_placeholder": "mask radius in pixels",
        "required": true
      }
    ],
    "computer controls": [
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "simulate_subtomogram": {
      "name": "simulate_subtomogram",
      "descr_short": "Simulate subtomogram",
      "descr_long": "is a program for crude simulation of a subtomogram",
      "executable": "simple_exec"
    },
    "image input\/output": [
      {
        "key": "vol1",
        "keytype": "file",
        "descr_short": "Volume",
        "descr_long": "Volume to use for simulation",
        "descr_placeholder": "input volume e.g. vol.mrc",
        "required": false
      }
    ],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "nptcls",
        "keytype": "num",
        "descr_short": "Number of particles",
        "descr_long": "Number of particle images",
        "descr_placeholder": "# particles",
        "required": true
      },
      {
        "key": "snr",
        "keytype": "num",
        "descr_short": "SNR",
        "descr_long": "Signal-to-noise ratio of particle images",
        "descr_placeholder": "signal-to-noise ratio(0.)",
        "required": false
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": [
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "stack": {
      "name": "stack",
      "descr_short": "Stack images",
      "descr_long": "is a program for stacking individual images (list) or multiple stacks into one",
      "executable": "simple_exec"
    },
    "image input\/output": [
      {
        "key": "filetab",
        "keytype": "file",
        "descr_short": "Stacks list",
        "descr_long": "List of stacks of images to stack into one",
        "descr_placeholder": "list input e.g. stktab.txt",
        "required": true
      },
      {
        "key": "outstk",
        "keytype": "file",
        "descr_short": "Output stack name",
        "descr_long": "Output images stack name",
        "descr_placeholder": "e.g. outstk.mrc",
        "required": false
      }
    ],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "clip",
        "keytype": "num",
        "descr_short": "Clipped box size",
        "descr_long": "Target box size for clipping in pixels",
        "descr_placeholder": "in pixels",
        "required": false
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": []
  },
  {
    "stack": {
      "name": "stack",
      "descr_short": "Standard stack editing",
      "descr_long": "is a program that provides standard single-particle image processing routines for MRC or SPIDER 'stacks. To extract a particular state, give oritab and set state. 'To select the fraction of best particles, give oritab 'and set frac. State and frac options can be combined. 'To apply noise, give the desired signal-to-noise ratio via snr. To calculate the autocorrelation 'function, set acf=yes. To extract a contiguous subset of images from the stack, set 'fromp and top. To extract a number of particle images at random, set nran to the desired number.'With avg=yes the global average of the stack is calculated. 'If nframesgrp is set to some integer number >1, averages with chunk sizes of nframesgrp are produced, 'which may be useful for analysis of dose-fractionated image series. neg inverts the contrast of the images",
      "executable": "simple_exec"
    },
    "image input\/output": [
      {
        "key": "stk",
        "keytype": "file",
        "descr_short": "Particle image stack",
        "descr_long": "Particle image stack",
        "descr_placeholder": "xxx.mrc file with particles",
        "required": true
      },
      {
        "key": "outstk",
        "keytype": "file",
        "descr_short": "Output stack name",
        "descr_long": "Output images stack name",
        "descr_placeholder": "e.g. outstk.mrc",
        "required": false
      }
    ],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "oritab",
        "keytype": "file",
        "descr_short": "Orientation and CTF parameter file",
        "descr_long": "Orientation and CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": false
      },
      {
        "key": "mirr",
        "keytype": "multi",
        "descr_short": "Perform mirroring",
        "descr_long": "Whether to mirror and along which axis(no|x|y){no}",
        "descr_placeholder": "(no|x|y){no}",
        "required": false,
        "options": [
          "no",
          "x",
          "y"
        ]
      },
      {
        "key": "nran",
        "keytype": "num",
        "descr_short": "Number of random samples",
        "descr_long": "Number of images to randomly sample",
        "descr_placeholder": "# random samples",
        "required": false
      },
      {
        "key": "frac",
        "keytype": "num",
        "descr_short": "Fraction of particles to include",
        "descr_long": "Fraction of particles to include based on spectral score (median of FRC between reference and particle)",
        "descr_placeholder": "fraction of particles(0.1-0.9){1.0}",
        "required": false
      },
      {
        "key": "state",
        "keytype": "num",
        "descr_short": "State index",
        "descr_long": "Index of state to extract",
        "descr_placeholder": "give state index",
        "required": false
      },
      {
        "key": "class",
        "keytype": "num",
        "descr_short": "Class index",
        "descr_long": "Index of class to extract",
        "descr_placeholder": "give class index",
        "required": false
      },
      {
        "key": "neg",
        "keytype": "binary",
        "descr_short": "Invert contrast",
        "descr_long": "Invert contrast(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "acf",
        "keytype": "binary",
        "descr_short": "Autocorrelation, A * conjg(A)",
        "descr_long": "Generate autocorrelation function: A * conjg(A)(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "avg",
        "keytype": "binary",
        "descr_short": "Average stack",
        "descr_long": "Generate global stack average(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "nframesgrp",
        "keytype": "num",
        "descr_short": "Number of stack entries to group & average",
        "descr_long": "Number of stack entries to group & average{0}",
        "descr_placeholder": "# frames",
        "required": false
      },
      {
        "key": "vis",
        "keytype": "binary",
        "descr_short": "Visualize stack images",
        "descr_long": "Visualize stack images with gnuplot(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "snr",
        "keytype": "num",
        "descr_short": "Apply noise to give SNR",
        "descr_long": "Apply noise to give this signal-to-noise ratio of output",
        "descr_placeholder": "signal-to-noise ratio(0.)",
        "required": false
      },
      {
        "key": "fromp",
        "keytype": "num",
        "descr_short": "From particle index",
        "descr_long": "Start index for stack copy",
        "descr_placeholder": "start index",
        "required": false
      },
      {
        "key": "top",
        "keytype": "num",
        "descr_short": "To particle index",
        "descr_long": "Stop index for stack copy",
        "descr_placeholder": "stop index",
        "required": false
      },
      {
        "key": "outfile",
        "keytype": "file",
        "descr_short": "Output orientation and CTF parameter file",
        "descr_long": "Output Orientation and CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": false
      },
      {
        "key": "stats",
        "keytype": "binary",
        "descr_short": "Provide statistics",
        "descr_long": "Provide statistics about images in stack(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": [
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "symsrch": {
      "name": "symsrch",
      "descr_short": "Search for symmetry axis",
      "descr_long": "is a distributed workflow for searching for the principal symmetry axis of a volume reconstructed in C1. The 3D reconstruction is projected and common lines-based optimisation is used to identify the principal symmetry axis. The rotational transformation is applied to the inputted orientations and a new document is produced. If you are unsure about the point-group, use the compare=yes mode and input the highest conceviable point-group. The program then calculates probabilities for all lower groups inclusive",
      "executable": "simple_exec"
    },
    "image input\/output": [
      {
        "key": "vol1",
        "keytype": "file",
        "descr_short": "C1 Volume to identify symmetry axis of",
        "descr_long": "C1 Volume to identify symmetry axis of",
        "descr_placeholder": "input volume e.g. vol_C1.mrc",
        "required": true
      }
    ],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "oritab",
        "keytype": "file",
        "descr_short": "Orientation and CTF parameter file",
        "descr_long": "Orientation and CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": false
      },
      {
        "key": "outfile",
        "keytype": "file",
        "descr_short": "Output orientation and CTF parameter file",
        "descr_long": "Output Orientation and CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": false
      },
      {
        "key": "mkdir",
        "keytype": "binary",
        "descr_short": "Make auto-named dir for output",
        "descr_long": "Make auto-named consequtively numbered dir for output(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [
      {
        "key": "pgrp",
        "keytype": "str",
        "descr_short": "Point-group symmetry",
        "descr_long": "Point-group symmetry of particle(cn|dn|t|o|i){c1}",
        "descr_placeholder": "point-group(cn|dn|t|o|i){c1}",
        "required": true
      },
      {
        "key": "nspace",
        "keytype": "num",
        "descr_short": "Number of projection directions",
        "descr_long": "Number of projection directions used",
        "descr_placeholder": "# projections",
        "required": false
      },
      {
        "key": "center",
        "keytype": "binary",
        "descr_short": "Center input volume",
        "descr_long": "Center input volume by its center of gravity before symmetry axis search(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "filter controls": [
      {
        "key": "lp",
        "keytype": "num",
        "descr_short": "Low-pass limit",
        "descr_long": "Low-pass resolution limit",
        "descr_placeholder": "low-pass limit in Angstroms",
        "required": true
      },
      {
        "key": "hp",
        "keytype": "num",
        "descr_short": "High-pass limit",
        "descr_long": "High-pass resolution limit",
        "descr_placeholder": "high-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "cenlp",
        "keytype": "num",
        "descr_short": "Centering low-pass limit",
        "descr_long": "Limit for low-pass filter used in binarisation prior to determination of the center of gravity of the input volume and centering",
        "descr_placeholder": "centering low-pass limit in Angstroms{30}",
        "required": false
      }
    ],
    "mask controls": [
      {
        "key": "msk",
        "keytype": "num",
        "descr_short": "Mask radius",
        "descr_long": "Mask radius in pixels for application of a soft-edged circular mask to remove background noise",
        "descr_placeholder": "mask radius in pixels",
        "required": true
      }
    ],
    "computer controls": [
      {
        "key": "nparts",
        "keytype": "num",
        "descr_short": "Number of parts",
        "descr_long": "Number of partitions for distrbuted memory execution. One part typically corresponds to one CPU socket in the distributed system. On a single-socket machine there may be speed benfits to dividing the jobs into a few (2-4) partitions, depending on memory capacity",
        "descr_placeholder": "divide job into # parts",
        "required": true
      },
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  },
  {
    "tseries_track": {
      "name": "tseries_track",
      "descr_short": "Track particles in time-series",
      "descr_long": "is a distributed workflow for particle tracking in time-series data",
      "executable": "simple_exec"
    },
    "image input\/output": [
      {
        "key": "filetab",
        "keytype": "file",
        "descr_short": "List of of movie frames",
        "descr_long": "List of movie frames to track in",
        "descr_placeholder": "e.g. movie_frames.txt",
        "required": true
      }
    ],
    "parameter input\/output": [
      {
        "key": "fbody",
        "keytype": "string",
        "descr_short": "Template output tracked series",
        "descr_long": "Template output tracked series",
        "descr_placeholder": "e.g. tracked_ptcl",
        "required": true
      },
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": true
      },
      {
        "key": "boxfile",
        "keytype": "file",
        "descr_short": "List of particle coordiantes",
        "descr_long": ".txt file with EMAN particle coordinates",
        "descr_placeholder": "e.g. coords.box",
        "required": true
      },
      {
        "key": "mkdir",
        "keytype": "binary",
        "descr_short": "Make auto-named dir for output",
        "descr_long": "Make auto-named consequtively numbered dir for output(yes|no){yes}",
        "descr_placeholder": "(yes|no){yes}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [
      {
        "key": "offset",
        "keytype": "num",
        "descr_short": "Shift half-width search bound",
        "descr_long": "Shift half-width search bound(in pixels)",
        "descr_placeholder": "e.g. pixels window halfwidth",
        "required": false
      }
    ],
    "filter controls": [
      {
        "key": "lp",
        "keytype": "num",
        "descr_short": "Low-pass limit",
        "descr_long": "Low-pass resolution limit",
        "descr_placeholder": "low-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "cenlp",
        "keytype": "num",
        "descr_short": "Centering low-pass limit",
        "descr_long": "Limit for low-pass filter used in binarisation prior to determination of the center of gravity of the particle and centering",
        "descr_placeholder": "centering low-pass limit in Angstroms{5}",
        "required": false
      }
    ],
    "mask controls": [],
    "computer controls": [
      {
        "key": "nparts",
        "keytype": "num",
        "descr_short": "Number of parts",
        "descr_long": "Number of partitions for distrbuted memory execution. One part typically corresponds to one CPU socket in the distributed system. On a single-socket machine there may be speed benfits to dividing the jobs into a few (2-4) partitions, depending on memory capacity",
        "descr_placeholder": "divide job into # parts",
        "required": true
      }
    ]
  },
  {
    "new_project": {
      "name": "new_project",
      "descr_short": "Update an existing project",
      "descr_long": "is a program for updating an existing project: changing the name\/user_email\/computer controls",
      "executable": "simple_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "projname",
        "keytype": "str",
        "descr_short": "Project name",
        "descr_long": "Name of project to create .\/myproject\/myproject.simple file for",
        "descr_placeholder": "e.g. to create .\/myproject\/myproject.simple",
        "required": true
      },
      {
        "key": "user_email",
        "keytype": "str",
        "descr_short": "Your e-mail address",
        "descr_long": "Your e-mail address",
        "descr_placeholder": "e.g. myname@uni.edu",
        "required": false
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": [
      {
        "key": "time_per_image",
        "keytype": "num",
        "descr_short": "Time per image",
        "descr_long": "Estimated time per image in seconds for forecasting total execution time{100}",
        "descr_placeholder": "in seconds{100}",
        "required": false
      },
      {
        "key": "user_account",
        "keytype": "str",
        "descr_short": "User account name in SLURM\/PBS",
        "descr_long": "User account name in SLURM\/PBS system",
        "descr_placeholder": "e.g. Account084",
        "required": false
      },
      {
        "key": "user_project",
        "keytype": "str",
        "descr_short": "User project name in SLURM\/PBS",
        "descr_long": "User project name in SLURM\/PBS system",
        "descr_placeholder": "e.g. Project001",
        "required": false
      },
      {
        "key": "qsys_partition",
        "keytype": "str",
        "descr_short": "Name of SLURM\/PBS partition",
        "descr_long": "Name of target partition of distributed computer system (SLURM\/PBS)",
        "descr_placeholder": "give part name",
        "required": false
      },
      {
        "key": "qsys_qos",
        "keytype": "str",
        "descr_short": "Schedule priority",
        "descr_long": "Job scheduling priority (SLURM\/PBS)",
        "descr_placeholder": "give priority",
        "required": false
      },
      {
        "key": "qsys_reservation",
        "keytype": "str",
        "descr_short": "Name of reserved partition",
        "descr_long": "Name of reserved target partition of distributed computer system (SLURM\/PBS)",
        "descr_placeholder": "give yourpart",
        "required": false
      },
      {
        "key": "job_memory_per_task",
        "keytype": "str",
        "descr_short": "Memory per part",
        "descr_long": "Memory in MB per part in distributed execution{1600}",
        "descr_placeholder": "MB per part{1600}",
        "required": false
      }
    ]
  },
  {
    "vizoris": {
      "name": "vizoris",
      "descr_short": "Visualization of orientation distribution",
      "descr_long": "is a program for extracting projection directions from orientations for visualization in UCSF Chimera",
      "executable": "simple_exec"
    },
    "image input\/output": [],
    "parameter input\/output": [
      {
        "key": "oritab",
        "keytype": "file",
        "descr_short": "Orientation and CTF parameter file",
        "descr_long": "Orientation and CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": true
      },
      {
        "key": "nspace",
        "keytype": "num",
        "descr_short": "Number of projection directions",
        "descr_long": "Number of projection directions used",
        "descr_placeholder": "# projections",
        "required": false
      },
      {
        "key": "pgrp",
        "keytype": "str",
        "descr_short": "Point-group symmetry",
        "descr_long": "Point-group symmetry of particle(cn|dn|t|o|i){c1}",
        "descr_placeholder": "point-group(cn|dn|t|o|i){c1}",
        "required": true
      },
      {
        "key": "oritype",
        "keytype": "multi",
        "descr_short": "Oritype segment in project",
        "descr_long": "Oritype segment in project(ptcl2D|ptcl3D|cls3D){ptcl3D}",
        "descr_placeholder": "(ptcl2D|ptcl3D|cls3D){ptcl3D}",
        "required": false,
        "options": [
          "ptcl2D",
          "ptcl3D",
          "cls3D"
        ]
      },
      {
        "key": "tseries",
        "keytype": "binary",
        "descr_short": "Time series anlysis",
        "descr_long": "Orientations come from analysis of a time-series(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [],
    "mask controls": [],
    "computer controls": []
  },
  {
    "volops": {
      "name": "volops",
      "descr_short": "Standard volume editing",
      "descr_long": "is a program that provides standard single-particle image processing routines for MRC or SPIDER volumes",
      "executable": "simple_exec"
    },
    "image input\/output": [
      {
        "key": "vol1",
        "keytype": "file",
        "descr_short": "Volume",
        "descr_long": "Volume to mask",
        "descr_placeholder": "input volume e.g. vol.mrc",
        "required": true
      },
      {
        "key": "outvol",
        "keytype": "file",
        "descr_short": "Output volume name",
        "descr_long": "Output volume name",
        "descr_placeholder": "e.g. outvol.mrc",
        "required": false
      }
    ],
    "parameter input\/output": [
      {
        "key": "smpd",
        "keytype": "num",
        "descr_short": "Sampling distance",
        "descr_long": "Distance between neighbouring pixels in Angstroms",
        "descr_placeholder": "pixel size in Angstroms",
        "required": false
      },
      {
        "key": "guinier",
        "keytype": "binary",
        "descr_short": "Guinier plot",
        "descr_long": "calculate Guinier plot(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "neg",
        "keytype": "binary",
        "descr_short": "Invert contrast",
        "descr_long": "Invert volume contrast(yes|no){no}",
        "descr_placeholder": "(yes|no){no}",
        "required": false,
        "options": [
          "yes",
          "no"
        ]
      },
      {
        "key": "snr",
        "keytype": "num",
        "descr_short": "SNR",
        "descr_long": "Adds noise to the volume",
        "descr_placeholder": "signal-to-noise ratio(0.)",
        "required": false
      },
      {
        "key": "mirr",
        "keytype": "multi",
        "descr_short": "Perform mirroring",
        "descr_long": "Whether to mirror and along which axis(no|x|y){no}",
        "descr_placeholder": "(no|x|y){no}",
        "required": false,
        "options": [
          "no",
          "x",
          "y"
        ]
      },
      {
        "key": "e1",
        "keytype": "num",
        "descr_short": "Rotation along Phi",
        "descr_long": "Phi Euler angle",
        "descr_placeholder": "in degrees",
        "required": false
      },
      {
        "key": "e2",
        "keytype": "num",
        "descr_short": "Rotation along Theta",
        "descr_long": "Theat Euler angle",
        "descr_placeholder": "in degrees",
        "required": false
      },
      {
        "key": "e3",
        "keytype": "num",
        "descr_short": "Rotation along Psi",
        "descr_long": "Psi Euler angle",
        "descr_placeholder": "in degrees",
        "required": false
      },
      {
        "key": "xsh",
        "keytype": "num",
        "descr_short": "Translation along x-axis",
        "descr_long": "Shift along X in pixels",
        "descr_placeholder": "in pixels",
        "required": false
      },
      {
        "key": "ysh",
        "keytype": "num",
        "descr_short": "Translation along y-axis",
        "descr_long": "Shift along Y in pixels",
        "descr_placeholder": "in pixels",
        "required": false
      },
      {
        "key": "zsh",
        "keytype": "num",
        "descr_short": "Translation along z-axis",
        "descr_long": "Shift along Z in pixels",
        "descr_placeholder": "in pixels",
        "required": false
      },
      {
        "key": "outfile",
        "keytype": "file",
        "descr_short": "Output orientation and CTF parameter file",
        "descr_long": "Output Orientation and CTF parameter file in plain text (.txt) or SIMPLE project (*.simple) format",
        "descr_placeholder": ".simple|.txt parameter file",
        "required": false
      }
    ],
    "alternative inputs": [],
    "search controls": [],
    "filter controls": [
      {
        "key": "lp",
        "keytype": "num",
        "descr_short": "Low-pass limit",
        "descr_long": "Low-pass resolution limit",
        "descr_placeholder": "low-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "hp",
        "keytype": "num",
        "descr_short": "High-pass limit",
        "descr_long": "High-pass resolution limit",
        "descr_placeholder": "high-pass limit in Angstroms",
        "required": false
      },
      {
        "key": "bfac",
        "keytype": "num",
        "descr_short": "B-factor for sharpening",
        "descr_long": "B-factor for sharpening in Angstroms^2",
        "descr_placeholder": "B-factor in Angstroms^2",
        "required": false
      }
    ],
    "mask controls": [
      {
        "key": "msk",
        "keytype": "num",
        "descr_short": "Mask radius",
        "descr_long": "Mask radius in pixels for application of a soft-edged circular mask to remove background noise",
        "descr_placeholder": "mask radius in pixels",
        "required": false
      }
    ],
    "computer controls": [
      {
        "key": "nthr",
        "keytype": "num",
        "descr_short": "Number of threads per part",
        "descr_long": "Number of shared-memory OpenMP threads with close affinity per partition. Typically the same as the number of logical threads in a socket.",
        "descr_placeholder": "# shared-memory CPU threads",
        "required": false
      }
    ]
  }
]
